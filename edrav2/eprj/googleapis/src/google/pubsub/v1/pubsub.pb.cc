// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/pubsub/v1/pubsub.proto

#include "google/pubsub/v1/pubsub.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ffield_5fmask_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FieldMask_google_2fprotobuf_2ffield_5fmask_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fpubsub_2fv1_2fpubsub_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateSnapshotRequest_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fpubsub_2fv1_2fpubsub_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeadLetterPolicy_google_2fpubsub_2fv1_2fpubsub_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fpubsub_2fv1_2fpubsub_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExpirationPolicy_google_2fpubsub_2fv1_2fpubsub_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fpubsub_2fv1_2fpubsub_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageStoragePolicy_google_2fpubsub_2fv1_2fpubsub_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fpubsub_2fv1_2fpubsub_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PubsubMessage_google_2fpubsub_2fv1_2fpubsub_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fpubsub_2fv1_2fpubsub_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PubsubMessage_AttributesEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fpubsub_2fv1_2fpubsub_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PushConfig_google_2fpubsub_2fv1_2fpubsub_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fpubsub_2fv1_2fpubsub_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PushConfig_AttributesEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fpubsub_2fv1_2fpubsub_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PushConfig_OidcToken_google_2fpubsub_2fv1_2fpubsub_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fpubsub_2fv1_2fpubsub_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReceivedMessage_google_2fpubsub_2fv1_2fpubsub_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fpubsub_2fv1_2fpubsub_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Snapshot_google_2fpubsub_2fv1_2fpubsub_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fpubsub_2fv1_2fpubsub_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Snapshot_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fpubsub_2fv1_2fpubsub_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Subscription_google_2fpubsub_2fv1_2fpubsub_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fpubsub_2fv1_2fpubsub_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Subscription_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fpubsub_2fv1_2fpubsub_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Topic_google_2fpubsub_2fv1_2fpubsub_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fpubsub_2fv1_2fpubsub_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Topic_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto;
namespace google {
namespace pubsub {
namespace v1 {
class MessageStoragePolicyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageStoragePolicy> _instance;
} _MessageStoragePolicy_default_instance_;
class Topic_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Topic_LabelsEntry_DoNotUse> _instance;
} _Topic_LabelsEntry_DoNotUse_default_instance_;
class TopicDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Topic> _instance;
} _Topic_default_instance_;
class PubsubMessage_AttributesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PubsubMessage_AttributesEntry_DoNotUse> _instance;
} _PubsubMessage_AttributesEntry_DoNotUse_default_instance_;
class PubsubMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PubsubMessage> _instance;
} _PubsubMessage_default_instance_;
class GetTopicRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetTopicRequest> _instance;
} _GetTopicRequest_default_instance_;
class UpdateTopicRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateTopicRequest> _instance;
} _UpdateTopicRequest_default_instance_;
class PublishRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublishRequest> _instance;
} _PublishRequest_default_instance_;
class PublishResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PublishResponse> _instance;
} _PublishResponse_default_instance_;
class ListTopicsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListTopicsRequest> _instance;
} _ListTopicsRequest_default_instance_;
class ListTopicsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListTopicsResponse> _instance;
} _ListTopicsResponse_default_instance_;
class ListTopicSubscriptionsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListTopicSubscriptionsRequest> _instance;
} _ListTopicSubscriptionsRequest_default_instance_;
class ListTopicSubscriptionsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListTopicSubscriptionsResponse> _instance;
} _ListTopicSubscriptionsResponse_default_instance_;
class ListTopicSnapshotsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListTopicSnapshotsRequest> _instance;
} _ListTopicSnapshotsRequest_default_instance_;
class ListTopicSnapshotsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListTopicSnapshotsResponse> _instance;
} _ListTopicSnapshotsResponse_default_instance_;
class DeleteTopicRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteTopicRequest> _instance;
} _DeleteTopicRequest_default_instance_;
class Subscription_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Subscription_LabelsEntry_DoNotUse> _instance;
} _Subscription_LabelsEntry_DoNotUse_default_instance_;
class SubscriptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Subscription> _instance;
} _Subscription_default_instance_;
class DeadLetterPolicyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeadLetterPolicy> _instance;
} _DeadLetterPolicy_default_instance_;
class ExpirationPolicyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ExpirationPolicy> _instance;
} _ExpirationPolicy_default_instance_;
class PushConfig_OidcTokenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PushConfig_OidcToken> _instance;
} _PushConfig_OidcToken_default_instance_;
class PushConfig_AttributesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PushConfig_AttributesEntry_DoNotUse> _instance;
} _PushConfig_AttributesEntry_DoNotUse_default_instance_;
class PushConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PushConfig> _instance;
  const ::google::pubsub::v1::PushConfig_OidcToken* oidc_token_;
} _PushConfig_default_instance_;
class ReceivedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReceivedMessage> _instance;
} _ReceivedMessage_default_instance_;
class GetSubscriptionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSubscriptionRequest> _instance;
} _GetSubscriptionRequest_default_instance_;
class UpdateSubscriptionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateSubscriptionRequest> _instance;
} _UpdateSubscriptionRequest_default_instance_;
class ListSubscriptionsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListSubscriptionsRequest> _instance;
} _ListSubscriptionsRequest_default_instance_;
class ListSubscriptionsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListSubscriptionsResponse> _instance;
} _ListSubscriptionsResponse_default_instance_;
class DeleteSubscriptionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteSubscriptionRequest> _instance;
} _DeleteSubscriptionRequest_default_instance_;
class ModifyPushConfigRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModifyPushConfigRequest> _instance;
} _ModifyPushConfigRequest_default_instance_;
class PullRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PullRequest> _instance;
} _PullRequest_default_instance_;
class PullResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PullResponse> _instance;
} _PullResponse_default_instance_;
class ModifyAckDeadlineRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ModifyAckDeadlineRequest> _instance;
} _ModifyAckDeadlineRequest_default_instance_;
class AcknowledgeRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AcknowledgeRequest> _instance;
} _AcknowledgeRequest_default_instance_;
class StreamingPullRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamingPullRequest> _instance;
} _StreamingPullRequest_default_instance_;
class StreamingPullResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StreamingPullResponse> _instance;
} _StreamingPullResponse_default_instance_;
class CreateSnapshotRequest_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateSnapshotRequest_LabelsEntry_DoNotUse> _instance;
} _CreateSnapshotRequest_LabelsEntry_DoNotUse_default_instance_;
class CreateSnapshotRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateSnapshotRequest> _instance;
} _CreateSnapshotRequest_default_instance_;
class UpdateSnapshotRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateSnapshotRequest> _instance;
} _UpdateSnapshotRequest_default_instance_;
class Snapshot_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Snapshot_LabelsEntry_DoNotUse> _instance;
} _Snapshot_LabelsEntry_DoNotUse_default_instance_;
class SnapshotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Snapshot> _instance;
} _Snapshot_default_instance_;
class GetSnapshotRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSnapshotRequest> _instance;
} _GetSnapshotRequest_default_instance_;
class ListSnapshotsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListSnapshotsRequest> _instance;
} _ListSnapshotsRequest_default_instance_;
class ListSnapshotsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListSnapshotsResponse> _instance;
} _ListSnapshotsResponse_default_instance_;
class DeleteSnapshotRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteSnapshotRequest> _instance;
} _DeleteSnapshotRequest_default_instance_;
class SeekRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SeekRequest> _instance;
  const PROTOBUF_NAMESPACE_ID::Timestamp* time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snapshot_;
} _SeekRequest_default_instance_;
class SeekResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SeekResponse> _instance;
} _SeekResponse_default_instance_;
}  // namespace v1
}  // namespace pubsub
}  // namespace google
static void InitDefaultsscc_info_AcknowledgeRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_AcknowledgeRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::AcknowledgeRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::AcknowledgeRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AcknowledgeRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AcknowledgeRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsscc_info_CreateSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_CreateSnapshotRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::CreateSnapshotRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::CreateSnapshotRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {
      &scc_info_CreateSnapshotRequest_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto.base,}};

static void InitDefaultsscc_info_CreateSnapshotRequest_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_CreateSnapshotRequest_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::google::pubsub::v1::CreateSnapshotRequest_LabelsEntry_DoNotUse();
  }
  ::google::pubsub::v1::CreateSnapshotRequest_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CreateSnapshotRequest_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CreateSnapshotRequest_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsscc_info_DeadLetterPolicy_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_DeadLetterPolicy_default_instance_;
    new (ptr) ::google::pubsub::v1::DeadLetterPolicy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::DeadLetterPolicy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeadLetterPolicy_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeadLetterPolicy_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsscc_info_DeleteSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_DeleteSnapshotRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::DeleteSnapshotRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::DeleteSnapshotRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsscc_info_DeleteSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_DeleteSubscriptionRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::DeleteSubscriptionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::DeleteSubscriptionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsscc_info_DeleteTopicRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_DeleteTopicRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::DeleteTopicRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::DeleteTopicRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteTopicRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteTopicRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsscc_info_ExpirationPolicy_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_ExpirationPolicy_default_instance_;
    new (ptr) ::google::pubsub::v1::ExpirationPolicy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::ExpirationPolicy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ExpirationPolicy_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ExpirationPolicy_google_2fpubsub_2fv1_2fpubsub_2eproto}, {
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,}};

static void InitDefaultsscc_info_GetSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_GetSnapshotRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::GetSnapshotRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::GetSnapshotRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsscc_info_GetSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_GetSubscriptionRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::GetSubscriptionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::GetSubscriptionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsscc_info_GetTopicRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_GetTopicRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::GetTopicRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::GetTopicRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetTopicRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetTopicRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsscc_info_ListSnapshotsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_ListSnapshotsRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::ListSnapshotsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::ListSnapshotsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListSnapshotsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListSnapshotsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsscc_info_ListSnapshotsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_ListSnapshotsResponse_default_instance_;
    new (ptr) ::google::pubsub::v1::ListSnapshotsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::ListSnapshotsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListSnapshotsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListSnapshotsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto}, {
      &scc_info_Snapshot_google_2fpubsub_2fv1_2fpubsub_2eproto.base,}};

static void InitDefaultsscc_info_ListSubscriptionsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_ListSubscriptionsRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::ListSubscriptionsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::ListSubscriptionsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListSubscriptionsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListSubscriptionsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsscc_info_ListSubscriptionsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_ListSubscriptionsResponse_default_instance_;
    new (ptr) ::google::pubsub::v1::ListSubscriptionsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::ListSubscriptionsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListSubscriptionsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListSubscriptionsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto}, {
      &scc_info_Subscription_google_2fpubsub_2fv1_2fpubsub_2eproto.base,}};

static void InitDefaultsscc_info_ListTopicSnapshotsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_ListTopicSnapshotsRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::ListTopicSnapshotsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::ListTopicSnapshotsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListTopicSnapshotsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListTopicSnapshotsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsscc_info_ListTopicSnapshotsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_ListTopicSnapshotsResponse_default_instance_;
    new (ptr) ::google::pubsub::v1::ListTopicSnapshotsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::ListTopicSnapshotsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListTopicSnapshotsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListTopicSnapshotsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsscc_info_ListTopicSubscriptionsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_ListTopicSubscriptionsRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::ListTopicSubscriptionsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::ListTopicSubscriptionsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListTopicSubscriptionsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListTopicSubscriptionsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsscc_info_ListTopicSubscriptionsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_ListTopicSubscriptionsResponse_default_instance_;
    new (ptr) ::google::pubsub::v1::ListTopicSubscriptionsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::ListTopicSubscriptionsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListTopicSubscriptionsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListTopicSubscriptionsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsscc_info_ListTopicsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_ListTopicsRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::ListTopicsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::ListTopicsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListTopicsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListTopicsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsscc_info_ListTopicsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_ListTopicsResponse_default_instance_;
    new (ptr) ::google::pubsub::v1::ListTopicsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::ListTopicsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListTopicsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListTopicsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto}, {
      &scc_info_Topic_google_2fpubsub_2fv1_2fpubsub_2eproto.base,}};

static void InitDefaultsscc_info_MessageStoragePolicy_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_MessageStoragePolicy_default_instance_;
    new (ptr) ::google::pubsub::v1::MessageStoragePolicy();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::MessageStoragePolicy::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageStoragePolicy_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessageStoragePolicy_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsscc_info_ModifyAckDeadlineRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_ModifyAckDeadlineRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::ModifyAckDeadlineRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::ModifyAckDeadlineRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ModifyAckDeadlineRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ModifyAckDeadlineRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsscc_info_ModifyPushConfigRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_ModifyPushConfigRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::ModifyPushConfigRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::ModifyPushConfigRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ModifyPushConfigRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ModifyPushConfigRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {
      &scc_info_PushConfig_google_2fpubsub_2fv1_2fpubsub_2eproto.base,}};

static void InitDefaultsscc_info_PublishRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_PublishRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::PublishRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::PublishRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PublishRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PublishRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {
      &scc_info_PubsubMessage_google_2fpubsub_2fv1_2fpubsub_2eproto.base,}};

static void InitDefaultsscc_info_PublishResponse_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_PublishResponse_default_instance_;
    new (ptr) ::google::pubsub::v1::PublishResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::PublishResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PublishResponse_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PublishResponse_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsscc_info_PubsubMessage_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_PubsubMessage_default_instance_;
    new (ptr) ::google::pubsub::v1::PubsubMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::PubsubMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PubsubMessage_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PubsubMessage_google_2fpubsub_2fv1_2fpubsub_2eproto}, {
      &scc_info_PubsubMessage_AttributesEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_PubsubMessage_AttributesEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_PubsubMessage_AttributesEntry_DoNotUse_default_instance_;
    new (ptr) ::google::pubsub::v1::PubsubMessage_AttributesEntry_DoNotUse();
  }
  ::google::pubsub::v1::PubsubMessage_AttributesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PubsubMessage_AttributesEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PubsubMessage_AttributesEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsscc_info_PullRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_PullRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::PullRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::PullRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PullRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PullRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsscc_info_PullResponse_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_PullResponse_default_instance_;
    new (ptr) ::google::pubsub::v1::PullResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::PullResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_PullResponse_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_PullResponse_google_2fpubsub_2fv1_2fpubsub_2eproto}, {
      &scc_info_ReceivedMessage_google_2fpubsub_2fv1_2fpubsub_2eproto.base,}};

static void InitDefaultsscc_info_PushConfig_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_PushConfig_default_instance_;
    new (ptr) ::google::pubsub::v1::PushConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::PushConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_PushConfig_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_PushConfig_google_2fpubsub_2fv1_2fpubsub_2eproto}, {
      &scc_info_PushConfig_AttributesEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
      &scc_info_PushConfig_OidcToken_google_2fpubsub_2fv1_2fpubsub_2eproto.base,}};

static void InitDefaultsscc_info_PushConfig_AttributesEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_PushConfig_AttributesEntry_DoNotUse_default_instance_;
    new (ptr) ::google::pubsub::v1::PushConfig_AttributesEntry_DoNotUse();
  }
  ::google::pubsub::v1::PushConfig_AttributesEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PushConfig_AttributesEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PushConfig_AttributesEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsscc_info_PushConfig_OidcToken_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_PushConfig_OidcToken_default_instance_;
    new (ptr) ::google::pubsub::v1::PushConfig_OidcToken();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::PushConfig_OidcToken::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PushConfig_OidcToken_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PushConfig_OidcToken_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsscc_info_ReceivedMessage_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_ReceivedMessage_default_instance_;
    new (ptr) ::google::pubsub::v1::ReceivedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::ReceivedMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReceivedMessage_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReceivedMessage_google_2fpubsub_2fv1_2fpubsub_2eproto}, {
      &scc_info_PubsubMessage_google_2fpubsub_2fv1_2fpubsub_2eproto.base,}};

static void InitDefaultsscc_info_SeekRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_SeekRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::SeekRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::SeekRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SeekRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SeekRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_SeekResponse_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_SeekResponse_default_instance_;
    new (ptr) ::google::pubsub::v1::SeekResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::SeekResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SeekResponse_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SeekResponse_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsscc_info_Snapshot_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_Snapshot_default_instance_;
    new (ptr) ::google::pubsub::v1::Snapshot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::Snapshot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Snapshot_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Snapshot_google_2fpubsub_2fv1_2fpubsub_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Snapshot_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto.base,}};

static void InitDefaultsscc_info_Snapshot_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_Snapshot_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::google::pubsub::v1::Snapshot_LabelsEntry_DoNotUse();
  }
  ::google::pubsub::v1::Snapshot_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Snapshot_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Snapshot_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsscc_info_StreamingPullRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_StreamingPullRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::StreamingPullRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::StreamingPullRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StreamingPullRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StreamingPullRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsscc_info_StreamingPullResponse_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_StreamingPullResponse_default_instance_;
    new (ptr) ::google::pubsub::v1::StreamingPullResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::StreamingPullResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StreamingPullResponse_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StreamingPullResponse_google_2fpubsub_2fv1_2fpubsub_2eproto}, {
      &scc_info_ReceivedMessage_google_2fpubsub_2fv1_2fpubsub_2eproto.base,}};

static void InitDefaultsscc_info_Subscription_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_Subscription_default_instance_;
    new (ptr) ::google::pubsub::v1::Subscription();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::Subscription::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_Subscription_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_Subscription_google_2fpubsub_2fv1_2fpubsub_2eproto}, {
      &scc_info_PushConfig_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,
      &scc_info_Subscription_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
      &scc_info_ExpirationPolicy_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
      &scc_info_DeadLetterPolicy_google_2fpubsub_2fv1_2fpubsub_2eproto.base,}};

static void InitDefaultsscc_info_Subscription_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_Subscription_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::google::pubsub::v1::Subscription_LabelsEntry_DoNotUse();
  }
  ::google::pubsub::v1::Subscription_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Subscription_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Subscription_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsscc_info_Topic_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_Topic_default_instance_;
    new (ptr) ::google::pubsub::v1::Topic();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::Topic::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Topic_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Topic_google_2fpubsub_2fv1_2fpubsub_2eproto}, {
      &scc_info_Topic_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
      &scc_info_MessageStoragePolicy_google_2fpubsub_2fv1_2fpubsub_2eproto.base,}};

static void InitDefaultsscc_info_Topic_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_Topic_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::google::pubsub::v1::Topic_LabelsEntry_DoNotUse();
  }
  ::google::pubsub::v1::Topic_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Topic_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Topic_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto}, {}};

static void InitDefaultsscc_info_UpdateSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_UpdateSnapshotRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::UpdateSnapshotRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::UpdateSnapshotRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UpdateSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {
      &scc_info_Snapshot_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
      &scc_info_FieldMask_google_2fprotobuf_2ffield_5fmask_2eproto.base,}};

static void InitDefaultsscc_info_UpdateSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_UpdateSubscriptionRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::UpdateSubscriptionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::UpdateSubscriptionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UpdateSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {
      &scc_info_Subscription_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
      &scc_info_FieldMask_google_2fprotobuf_2ffield_5fmask_2eproto.base,}};

static void InitDefaultsscc_info_UpdateTopicRequest_google_2fpubsub_2fv1_2fpubsub_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::pubsub::v1::_UpdateTopicRequest_default_instance_;
    new (ptr) ::google::pubsub::v1::UpdateTopicRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::pubsub::v1::UpdateTopicRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateTopicRequest_google_2fpubsub_2fv1_2fpubsub_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UpdateTopicRequest_google_2fpubsub_2fv1_2fpubsub_2eproto}, {
      &scc_info_Topic_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
      &scc_info_FieldMask_google_2fprotobuf_2ffield_5fmask_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto[47];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_google_2fpubsub_2fv1_2fpubsub_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_google_2fpubsub_2fv1_2fpubsub_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::MessageStoragePolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::MessageStoragePolicy, allowed_persistence_regions_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Topic_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Topic_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Topic_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Topic_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Topic, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Topic, name_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Topic, labels_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Topic, message_storage_policy_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Topic, kms_key_name_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PubsubMessage_AttributesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PubsubMessage_AttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PubsubMessage_AttributesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PubsubMessage_AttributesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PubsubMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PubsubMessage, data_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PubsubMessage, attributes_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PubsubMessage, message_id_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PubsubMessage, publish_time_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PubsubMessage, ordering_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::GetTopicRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::GetTopicRequest, topic_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::UpdateTopicRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::UpdateTopicRequest, topic_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::UpdateTopicRequest, update_mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PublishRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PublishRequest, topic_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PublishRequest, messages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PublishResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PublishResponse, message_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicsRequest, project_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicsRequest, page_size_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicsRequest, page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicsResponse, topics_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicsResponse, next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicSubscriptionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicSubscriptionsRequest, topic_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicSubscriptionsRequest, page_size_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicSubscriptionsRequest, page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicSubscriptionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicSubscriptionsResponse, subscriptions_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicSubscriptionsResponse, next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicSnapshotsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicSnapshotsRequest, topic_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicSnapshotsRequest, page_size_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicSnapshotsRequest, page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicSnapshotsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicSnapshotsResponse, snapshots_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListTopicSnapshotsResponse, next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::DeleteTopicRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::DeleteTopicRequest, topic_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Subscription_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Subscription_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Subscription_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Subscription_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Subscription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Subscription, name_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Subscription, topic_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Subscription, push_config_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Subscription, ack_deadline_seconds_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Subscription, retain_acked_messages_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Subscription, message_retention_duration_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Subscription, labels_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Subscription, enable_message_ordering_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Subscription, expiration_policy_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Subscription, dead_letter_policy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::DeadLetterPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::DeadLetterPolicy, dead_letter_topic_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::DeadLetterPolicy, max_delivery_attempts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ExpirationPolicy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ExpirationPolicy, ttl_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PushConfig_OidcToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PushConfig_OidcToken, service_account_email_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PushConfig_OidcToken, audience_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PushConfig_AttributesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PushConfig_AttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PushConfig_AttributesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PushConfig_AttributesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PushConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PushConfig, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PushConfig, push_endpoint_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PushConfig, attributes_),
  offsetof(::google::pubsub::v1::PushConfigDefaultTypeInternal, oidc_token_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PushConfig, authentication_method_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ReceivedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ReceivedMessage, ack_id_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ReceivedMessage, message_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ReceivedMessage, delivery_attempt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::GetSubscriptionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::GetSubscriptionRequest, subscription_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::UpdateSubscriptionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::UpdateSubscriptionRequest, subscription_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::UpdateSubscriptionRequest, update_mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListSubscriptionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListSubscriptionsRequest, project_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListSubscriptionsRequest, page_size_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListSubscriptionsRequest, page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListSubscriptionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListSubscriptionsResponse, subscriptions_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListSubscriptionsResponse, next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::DeleteSubscriptionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::DeleteSubscriptionRequest, subscription_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ModifyPushConfigRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ModifyPushConfigRequest, subscription_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ModifyPushConfigRequest, push_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PullRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PullRequest, subscription_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PullRequest, return_immediately_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PullRequest, max_messages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PullResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::PullResponse, received_messages_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ModifyAckDeadlineRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ModifyAckDeadlineRequest, subscription_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ModifyAckDeadlineRequest, ack_ids_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ModifyAckDeadlineRequest, ack_deadline_seconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::AcknowledgeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::AcknowledgeRequest, subscription_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::AcknowledgeRequest, ack_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::StreamingPullRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::StreamingPullRequest, subscription_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::StreamingPullRequest, ack_ids_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::StreamingPullRequest, modify_deadline_seconds_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::StreamingPullRequest, modify_deadline_ack_ids_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::StreamingPullRequest, stream_ack_deadline_seconds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::StreamingPullResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::StreamingPullResponse, received_messages_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::CreateSnapshotRequest_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::CreateSnapshotRequest_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::CreateSnapshotRequest_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::CreateSnapshotRequest_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::CreateSnapshotRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::CreateSnapshotRequest, name_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::CreateSnapshotRequest, subscription_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::CreateSnapshotRequest, labels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::UpdateSnapshotRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::UpdateSnapshotRequest, snapshot_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::UpdateSnapshotRequest, update_mask_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Snapshot_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Snapshot_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Snapshot_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Snapshot_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Snapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Snapshot, name_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Snapshot, topic_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Snapshot, expire_time_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::Snapshot, labels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::GetSnapshotRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::GetSnapshotRequest, snapshot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListSnapshotsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListSnapshotsRequest, project_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListSnapshotsRequest, page_size_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListSnapshotsRequest, page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListSnapshotsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListSnapshotsResponse, snapshots_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::ListSnapshotsResponse, next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::DeleteSnapshotRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::DeleteSnapshotRequest, snapshot_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::SeekRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::SeekRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::SeekRequest, subscription_),
  offsetof(::google::pubsub::v1::SeekRequestDefaultTypeInternal, time_),
  offsetof(::google::pubsub::v1::SeekRequestDefaultTypeInternal, snapshot_),
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::SeekRequest, target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::pubsub::v1::SeekResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::pubsub::v1::MessageStoragePolicy)},
  { 6, 13, sizeof(::google::pubsub::v1::Topic_LabelsEntry_DoNotUse)},
  { 15, -1, sizeof(::google::pubsub::v1::Topic)},
  { 24, 31, sizeof(::google::pubsub::v1::PubsubMessage_AttributesEntry_DoNotUse)},
  { 33, -1, sizeof(::google::pubsub::v1::PubsubMessage)},
  { 43, -1, sizeof(::google::pubsub::v1::GetTopicRequest)},
  { 49, -1, sizeof(::google::pubsub::v1::UpdateTopicRequest)},
  { 56, -1, sizeof(::google::pubsub::v1::PublishRequest)},
  { 63, -1, sizeof(::google::pubsub::v1::PublishResponse)},
  { 69, -1, sizeof(::google::pubsub::v1::ListTopicsRequest)},
  { 77, -1, sizeof(::google::pubsub::v1::ListTopicsResponse)},
  { 84, -1, sizeof(::google::pubsub::v1::ListTopicSubscriptionsRequest)},
  { 92, -1, sizeof(::google::pubsub::v1::ListTopicSubscriptionsResponse)},
  { 99, -1, sizeof(::google::pubsub::v1::ListTopicSnapshotsRequest)},
  { 107, -1, sizeof(::google::pubsub::v1::ListTopicSnapshotsResponse)},
  { 114, -1, sizeof(::google::pubsub::v1::DeleteTopicRequest)},
  { 120, 127, sizeof(::google::pubsub::v1::Subscription_LabelsEntry_DoNotUse)},
  { 129, -1, sizeof(::google::pubsub::v1::Subscription)},
  { 144, -1, sizeof(::google::pubsub::v1::DeadLetterPolicy)},
  { 151, -1, sizeof(::google::pubsub::v1::ExpirationPolicy)},
  { 157, -1, sizeof(::google::pubsub::v1::PushConfig_OidcToken)},
  { 164, 171, sizeof(::google::pubsub::v1::PushConfig_AttributesEntry_DoNotUse)},
  { 173, -1, sizeof(::google::pubsub::v1::PushConfig)},
  { 182, -1, sizeof(::google::pubsub::v1::ReceivedMessage)},
  { 190, -1, sizeof(::google::pubsub::v1::GetSubscriptionRequest)},
  { 196, -1, sizeof(::google::pubsub::v1::UpdateSubscriptionRequest)},
  { 203, -1, sizeof(::google::pubsub::v1::ListSubscriptionsRequest)},
  { 211, -1, sizeof(::google::pubsub::v1::ListSubscriptionsResponse)},
  { 218, -1, sizeof(::google::pubsub::v1::DeleteSubscriptionRequest)},
  { 224, -1, sizeof(::google::pubsub::v1::ModifyPushConfigRequest)},
  { 231, -1, sizeof(::google::pubsub::v1::PullRequest)},
  { 239, -1, sizeof(::google::pubsub::v1::PullResponse)},
  { 245, -1, sizeof(::google::pubsub::v1::ModifyAckDeadlineRequest)},
  { 253, -1, sizeof(::google::pubsub::v1::AcknowledgeRequest)},
  { 260, -1, sizeof(::google::pubsub::v1::StreamingPullRequest)},
  { 270, -1, sizeof(::google::pubsub::v1::StreamingPullResponse)},
  { 276, 283, sizeof(::google::pubsub::v1::CreateSnapshotRequest_LabelsEntry_DoNotUse)},
  { 285, -1, sizeof(::google::pubsub::v1::CreateSnapshotRequest)},
  { 293, -1, sizeof(::google::pubsub::v1::UpdateSnapshotRequest)},
  { 300, 307, sizeof(::google::pubsub::v1::Snapshot_LabelsEntry_DoNotUse)},
  { 309, -1, sizeof(::google::pubsub::v1::Snapshot)},
  { 318, -1, sizeof(::google::pubsub::v1::GetSnapshotRequest)},
  { 324, -1, sizeof(::google::pubsub::v1::ListSnapshotsRequest)},
  { 332, -1, sizeof(::google::pubsub::v1::ListSnapshotsResponse)},
  { 339, -1, sizeof(::google::pubsub::v1::DeleteSnapshotRequest)},
  { 345, -1, sizeof(::google::pubsub::v1::SeekRequest)},
  { 354, -1, sizeof(::google::pubsub::v1::SeekResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_MessageStoragePolicy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_Topic_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_Topic_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_PubsubMessage_AttributesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_PubsubMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_GetTopicRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_UpdateTopicRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_PublishRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_PublishResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_ListTopicsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_ListTopicsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_ListTopicSubscriptionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_ListTopicSubscriptionsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_ListTopicSnapshotsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_ListTopicSnapshotsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_DeleteTopicRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_Subscription_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_Subscription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_DeadLetterPolicy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_ExpirationPolicy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_PushConfig_OidcToken_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_PushConfig_AttributesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_PushConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_ReceivedMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_GetSubscriptionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_UpdateSubscriptionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_ListSubscriptionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_ListSubscriptionsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_DeleteSubscriptionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_ModifyPushConfigRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_PullRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_PullResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_ModifyAckDeadlineRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_AcknowledgeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_StreamingPullRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_StreamingPullResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_CreateSnapshotRequest_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_CreateSnapshotRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_UpdateSnapshotRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_Snapshot_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_Snapshot_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_GetSnapshotRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_ListSnapshotsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_ListSnapshotsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_DeleteSnapshotRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_SeekRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::pubsub::v1::_SeekResponse_default_instance_),
};

const char descriptor_table_protodef_google_2fpubsub_2fv1_2fpubsub_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035google/pubsub/v1/pubsub.proto\022\020google."
  "pubsub.v1\032\034google/api/annotations.proto\032"
  "\027google/api/client.proto\032\036google/protobu"
  "f/duration.proto\032\033google/protobuf/empty."
  "proto\032 google/protobuf/field_mask.proto\032"
  "\037google/protobuf/timestamp.proto\";\n\024Mess"
  "ageStoragePolicy\022#\n\033allowed_persistence_"
  "regions\030\001 \003(\t\"\327\001\n\005Topic\022\014\n\004name\030\001 \001(\t\0223\n"
  "\006labels\030\002 \003(\0132#.google.pubsub.v1.Topic.L"
  "abelsEntry\022F\n\026message_storage_policy\030\003 \001"
  "(\0132&.google.pubsub.v1.MessageStoragePoli"
  "cy\022\024\n\014kms_key_name\030\005 \001(\t\032-\n\013LabelsEntry\022"
  "\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\361\001\n\rPubs"
  "ubMessage\022\014\n\004data\030\001 \001(\014\022C\n\nattributes\030\002 "
  "\003(\0132/.google.pubsub.v1.PubsubMessage.Att"
  "ributesEntry\022\022\n\nmessage_id\030\003 \001(\t\0220\n\014publ"
  "ish_time\030\004 \001(\0132\032.google.protobuf.Timesta"
  "mp\022\024\n\014ordering_key\030\005 \001(\t\0321\n\017AttributesEn"
  "try\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\" \n\017G"
  "etTopicRequest\022\r\n\005topic\030\001 \001(\t\"m\n\022UpdateT"
  "opicRequest\022&\n\005topic\030\001 \001(\0132\027.google.pubs"
  "ub.v1.Topic\022/\n\013update_mask\030\002 \001(\0132\032.googl"
  "e.protobuf.FieldMask\"R\n\016PublishRequest\022\r"
  "\n\005topic\030\001 \001(\t\0221\n\010messages\030\002 \003(\0132\037.google"
  ".pubsub.v1.PubsubMessage\"&\n\017PublishRespo"
  "nse\022\023\n\013message_ids\030\001 \003(\t\"K\n\021ListTopicsRe"
  "quest\022\017\n\007project\030\001 \001(\t\022\021\n\tpage_size\030\002 \001("
  "\005\022\022\n\npage_token\030\003 \001(\t\"V\n\022ListTopicsRespo"
  "nse\022\'\n\006topics\030\001 \003(\0132\027.google.pubsub.v1.T"
  "opic\022\027\n\017next_page_token\030\002 \001(\t\"U\n\035ListTop"
  "icSubscriptionsRequest\022\r\n\005topic\030\001 \001(\t\022\021\n"
  "\tpage_size\030\002 \001(\005\022\022\n\npage_token\030\003 \001(\t\"P\n\036"
  "ListTopicSubscriptionsResponse\022\025\n\rsubscr"
  "iptions\030\001 \003(\t\022\027\n\017next_page_token\030\002 \001(\t\"Q"
  "\n\031ListTopicSnapshotsRequest\022\r\n\005topic\030\001 \001"
  "(\t\022\021\n\tpage_size\030\002 \001(\005\022\022\n\npage_token\030\003 \001("
  "\t\"H\n\032ListTopicSnapshotsResponse\022\021\n\tsnaps"
  "hots\030\001 \003(\t\022\027\n\017next_page_token\030\002 \001(\t\"#\n\022D"
  "eleteTopicRequest\022\r\n\005topic\030\001 \001(\t\"\345\003\n\014Sub"
  "scription\022\014\n\004name\030\001 \001(\t\022\r\n\005topic\030\002 \001(\t\0221"
  "\n\013push_config\030\004 \001(\0132\034.google.pubsub.v1.P"
  "ushConfig\022\034\n\024ack_deadline_seconds\030\005 \001(\005\022"
  "\035\n\025retain_acked_messages\030\007 \001(\010\022=\n\032messag"
  "e_retention_duration\030\010 \001(\0132\031.google.prot"
  "obuf.Duration\022:\n\006labels\030\t \003(\0132*.google.p"
  "ubsub.v1.Subscription.LabelsEntry\022\037\n\027ena"
  "ble_message_ordering\030\n \001(\010\022=\n\021expiration"
  "_policy\030\013 \001(\0132\".google.pubsub.v1.Expirat"
  "ionPolicy\022>\n\022dead_letter_policy\030\r \001(\0132\"."
  "google.pubsub.v1.DeadLetterPolicy\032-\n\013Lab"
  "elsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001"
  "\"L\n\020DeadLetterPolicy\022\031\n\021dead_letter_topi"
  "c\030\001 \001(\t\022\035\n\025max_delivery_attempts\030\002 \001(\005\":"
  "\n\020ExpirationPolicy\022&\n\003ttl\030\001 \001(\0132\031.google"
  ".protobuf.Duration\"\255\002\n\nPushConfig\022\025\n\rpus"
  "h_endpoint\030\001 \001(\t\022@\n\nattributes\030\002 \003(\0132,.g"
  "oogle.pubsub.v1.PushConfig.AttributesEnt"
  "ry\022<\n\noidc_token\030\003 \001(\0132&.google.pubsub.v"
  "1.PushConfig.OidcTokenH\000\032<\n\tOidcToken\022\035\n"
  "\025service_account_email\030\001 \001(\t\022\020\n\010audience"
  "\030\002 \001(\t\0321\n\017AttributesEntry\022\013\n\003key\030\001 \001(\t\022\r"
  "\n\005value\030\002 \001(\t:\0028\001B\027\n\025authentication_meth"
  "od\"m\n\017ReceivedMessage\022\016\n\006ack_id\030\001 \001(\t\0220\n"
  "\007message\030\002 \001(\0132\037.google.pubsub.v1.Pubsub"
  "Message\022\030\n\020delivery_attempt\030\003 \001(\005\".\n\026Get"
  "SubscriptionRequest\022\024\n\014subscription\030\001 \001("
  "\t\"\202\001\n\031UpdateSubscriptionRequest\0224\n\014subsc"
  "ription\030\001 \001(\0132\036.google.pubsub.v1.Subscri"
  "ption\022/\n\013update_mask\030\002 \001(\0132\032.google.prot"
  "obuf.FieldMask\"R\n\030ListSubscriptionsReque"
  "st\022\017\n\007project\030\001 \001(\t\022\021\n\tpage_size\030\002 \001(\005\022\022"
  "\n\npage_token\030\003 \001(\t\"k\n\031ListSubscriptionsR"
  "esponse\0225\n\rsubscriptions\030\001 \003(\0132\036.google."
  "pubsub.v1.Subscription\022\027\n\017next_page_toke"
  "n\030\002 \001(\t\"1\n\031DeleteSubscriptionRequest\022\024\n\014"
  "subscription\030\001 \001(\t\"b\n\027ModifyPushConfigRe"
  "quest\022\024\n\014subscription\030\001 \001(\t\0221\n\013push_conf"
  "ig\030\002 \001(\0132\034.google.pubsub.v1.PushConfig\"U"
  "\n\013PullRequest\022\024\n\014subscription\030\001 \001(\t\022\032\n\022r"
  "eturn_immediately\030\002 \001(\010\022\024\n\014max_messages\030"
  "\003 \001(\005\"L\n\014PullResponse\022<\n\021received_messag"
  "es\030\001 \003(\0132!.google.pubsub.v1.ReceivedMess"
  "age\"_\n\030ModifyAckDeadlineRequest\022\024\n\014subsc"
  "ription\030\001 \001(\t\022\017\n\007ack_ids\030\004 \003(\t\022\034\n\024ack_de"
  "adline_seconds\030\003 \001(\005\";\n\022AcknowledgeReque"
  "st\022\024\n\014subscription\030\001 \001(\t\022\017\n\007ack_ids\030\002 \003("
  "\t\"\244\001\n\024StreamingPullRequest\022\024\n\014subscripti"
  "on\030\001 \001(\t\022\017\n\007ack_ids\030\002 \003(\t\022\037\n\027modify_dead"
  "line_seconds\030\003 \003(\005\022\037\n\027modify_deadline_ac"
  "k_ids\030\004 \003(\t\022#\n\033stream_ack_deadline_secon"
  "ds\030\005 \001(\005\"U\n\025StreamingPullResponse\022<\n\021rec"
  "eived_messages\030\001 \003(\0132!.google.pubsub.v1."
  "ReceivedMessage\"\257\001\n\025CreateSnapshotReques"
  "t\022\014\n\004name\030\001 \001(\t\022\024\n\014subscription\030\002 \001(\t\022C\n"
  "\006labels\030\003 \003(\01323.google.pubsub.v1.CreateS"
  "napshotRequest.LabelsEntry\032-\n\013LabelsEntr"
  "y\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"v\n\025Upd"
  "ateSnapshotRequest\022,\n\010snapshot\030\001 \001(\0132\032.g"
  "oogle.pubsub.v1.Snapshot\022/\n\013update_mask\030"
  "\002 \001(\0132\032.google.protobuf.FieldMask\"\277\001\n\010Sn"
  "apshot\022\014\n\004name\030\001 \001(\t\022\r\n\005topic\030\002 \001(\t\022/\n\013e"
  "xpire_time\030\003 \001(\0132\032.google.protobuf.Times"
  "tamp\0226\n\006labels\030\004 \003(\0132&.google.pubsub.v1."
  "Snapshot.LabelsEntry\032-\n\013LabelsEntry\022\013\n\003k"
  "ey\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"&\n\022GetSnapsh"
  "otRequest\022\020\n\010snapshot\030\001 \001(\t\"N\n\024ListSnaps"
  "hotsRequest\022\017\n\007project\030\001 \001(\t\022\021\n\tpage_siz"
  "e\030\002 \001(\005\022\022\n\npage_token\030\003 \001(\t\"_\n\025ListSnaps"
  "hotsResponse\022-\n\tsnapshots\030\001 \003(\0132\032.google"
  ".pubsub.v1.Snapshot\022\027\n\017next_page_token\030\002"
  " \001(\t\")\n\025DeleteSnapshotRequest\022\020\n\010snapsho"
  "t\030\001 \001(\t\"m\n\013SeekRequest\022\024\n\014subscription\030\001"
  " \001(\t\022*\n\004time\030\002 \001(\0132\032.google.protobuf.Tim"
  "estampH\000\022\022\n\010snapshot\030\003 \001(\tH\000B\010\n\006target\"\016"
  "\n\014SeekResponse2\261\t\n\tPublisher\022j\n\013CreateTo"
  "pic\022\027.google.pubsub.v1.Topic\032\027.google.pu"
  "bsub.v1.Topic\")\202\323\344\223\002#\032\036/v1/{name=project"
  "s/*/topics/*}:\001*\022}\n\013UpdateTopic\022$.google"
  ".pubsub.v1.UpdateTopicRequest\032\027.google.p"
  "ubsub.v1.Topic\"/\202\323\344\223\002)2$/v1/{topic.name="
  "projects/*/topics/*}:\001*\022\202\001\n\007Publish\022 .go"
  "ogle.pubsub.v1.PublishRequest\032!.google.p"
  "ubsub.v1.PublishResponse\"2\202\323\344\223\002,\"\'/v1/{t"
  "opic=projects/*/topics/*}:publish:\001*\022o\n\010"
  "GetTopic\022!.google.pubsub.v1.GetTopicRequ"
  "est\032\027.google.pubsub.v1.Topic\"\'\202\323\344\223\002!\022\037/v"
  "1/{topic=projects/*/topics/*}\022\200\001\n\nListTo"
  "pics\022#.google.pubsub.v1.ListTopicsReques"
  "t\032$.google.pubsub.v1.ListTopicsResponse\""
  "\'\202\323\344\223\002!\022\037/v1/{project=projects/*}/topics"
  "\022\262\001\n\026ListTopicSubscriptions\022/.google.pub"
  "sub.v1.ListTopicSubscriptionsRequest\0320.g"
  "oogle.pubsub.v1.ListTopicSubscriptionsRe"
  "sponse\"5\202\323\344\223\002/\022-/v1/{topic=projects/*/to"
  "pics/*}/subscriptions\022\242\001\n\022ListTopicSnaps"
  "hots\022+.google.pubsub.v1.ListTopicSnapsho"
  "tsRequest\032,.google.pubsub.v1.ListTopicSn"
  "apshotsResponse\"1\202\323\344\223\002+\022)/v1/{topic=proj"
  "ects/*/topics/*}/snapshots\022t\n\013DeleteTopi"
  "c\022$.google.pubsub.v1.DeleteTopicRequest\032"
  "\026.google.protobuf.Empty\"\'\202\323\344\223\002!*\037/v1/{to"
  "pic=projects/*/topics/*}\032p\312A\025pubsub.goog"
  "leapis.com\322AUhttps://www.googleapis.com/"
  "auth/cloud-platform,https://www.googleap"
  "is.com/auth/pubsub2\353\022\n\nSubscriber\022\206\001\n\022Cr"
  "eateSubscription\022\036.google.pubsub.v1.Subs"
  "cription\032\036.google.pubsub.v1.Subscription"
  "\"0\202\323\344\223\002*\032%/v1/{name=projects/*/subscript"
  "ions/*}:\001*\022\222\001\n\017GetSubscription\022(.google."
  "pubsub.v1.GetSubscriptionRequest\032\036.googl"
  "e.pubsub.v1.Subscription\"5\202\323\344\223\002/\022-/v1/{s"
  "ubscription=projects/*/subscriptions/*}\022"
  "\240\001\n\022UpdateSubscription\022+.google.pubsub.v"
  "1.UpdateSubscriptionRequest\032\036.google.pub"
  "sub.v1.Subscription\"=\202\323\344\223\002722/v1/{subscr"
  "iption.name=projects/*/subscriptions/*}:"
  "\001*\022\234\001\n\021ListSubscriptions\022*.google.pubsub"
  ".v1.ListSubscriptionsRequest\032+.google.pu"
  "bsub.v1.ListSubscriptionsResponse\".\202\323\344\223\002"
  "(\022&/v1/{project=projects/*}/subscription"
  "s\022\220\001\n\022DeleteSubscription\022+.google.pubsub"
  ".v1.DeleteSubscriptionRequest\032\026.google.p"
  "rotobuf.Empty\"5\202\323\344\223\002/*-/v1/{subscription"
  "=projects/*/subscriptions/*}\022\243\001\n\021ModifyA"
  "ckDeadline\022*.google.pubsub.v1.ModifyAckD"
  "eadlineRequest\032\026.google.protobuf.Empty\"J"
  "\202\323\344\223\002D\"\?/v1/{subscription=projects/*/sub"
  "scriptions/*}:modifyAckDeadline:\001*\022\221\001\n\013A"
  "cknowledge\022$.google.pubsub.v1.Acknowledg"
  "eRequest\032\026.google.protobuf.Empty\"D\202\323\344\223\002>"
  "\"9/v1/{subscription=projects/*/subscript"
  "ions/*}:acknowledge:\001*\022\204\001\n\004Pull\022\035.google"
  ".pubsub.v1.PullRequest\032\036.google.pubsub.v"
  "1.PullResponse\"=\202\323\344\223\0027\"2/v1/{subscriptio"
  "n=projects/*/subscriptions/*}:pull:\001*\022f\n"
  "\rStreamingPull\022&.google.pubsub.v1.Stream"
  "ingPullRequest\032\'.google.pubsub.v1.Stream"
  "ingPullResponse\"\000(\0010\001\022\240\001\n\020ModifyPushConf"
  "ig\022).google.pubsub.v1.ModifyPushConfigRe"
  "quest\032\026.google.protobuf.Empty\"I\202\323\344\223\002C\">/"
  "v1/{subscription=projects/*/subscription"
  "s/*}:modifyPushConfig:\001*\022~\n\013GetSnapshot\022"
  "$.google.pubsub.v1.GetSnapshotRequest\032\032."
  "google.pubsub.v1.Snapshot\"-\202\323\344\223\002\'\022%/v1/{"
  "snapshot=projects/*/snapshots/*}\022\214\001\n\rLis"
  "tSnapshots\022&.google.pubsub.v1.ListSnapsh"
  "otsRequest\032\'.google.pubsub.v1.ListSnapsh"
  "otsResponse\"*\202\323\344\223\002$\022\"/v1/{project=projec"
  "ts/*}/snapshots\022\203\001\n\016CreateSnapshot\022\'.goo"
  "gle.pubsub.v1.CreateSnapshotRequest\032\032.go"
  "ogle.pubsub.v1.Snapshot\",\202\323\344\223\002&\032!/v1/{na"
  "me=projects/*/snapshots/*}:\001*\022\214\001\n\016Update"
  "Snapshot\022\'.google.pubsub.v1.UpdateSnapsh"
  "otRequest\032\032.google.pubsub.v1.Snapshot\"5\202"
  "\323\344\223\002/2*/v1/{snapshot.name=projects/*/sna"
  "pshots/*}:\001*\022\200\001\n\016DeleteSnapshot\022\'.google"
  ".pubsub.v1.DeleteSnapshotRequest\032\026.googl"
  "e.protobuf.Empty\"-\202\323\344\223\002\'*%/v1/{snapshot="
  "projects/*/snapshots/*}\022\204\001\n\004Seek\022\035.googl"
  "e.pubsub.v1.SeekRequest\032\036.google.pubsub."
  "v1.SeekResponse\"=\202\323\344\223\0027\"2/v1/{subscripti"
  "on=projects/*/subscriptions/*}:seek:\001*\032p"
  "\312A\025pubsub.googleapis.com\322AUhttps://www.g"
  "oogleapis.com/auth/cloud-platform,https:"
  "//www.googleapis.com/auth/pubsubB\256\001\n\024com"
  ".google.pubsub.v1B\013PubsubProtoP\001Z6google"
  ".golang.org/genproto/googleapis/pubsub/v"
  "1;pubsub\370\001\001\252\002\026Google.Cloud.PubSub.V1\312\002\026G"
  "oogle\\Cloud\\PubSub\\V1\352\002\031Google::Cloud::P"
  "ubSub::V1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_google_2fpubsub_2fv1_2fpubsub_2eproto_deps[6] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ffield_5fmask_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_google_2fpubsub_2fv1_2fpubsub_2eproto_sccs[47] = {
  &scc_info_AcknowledgeRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_CreateSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_CreateSnapshotRequest_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_DeadLetterPolicy_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_DeleteSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_DeleteSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_DeleteTopicRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_ExpirationPolicy_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_GetSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_GetSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_GetTopicRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_ListSnapshotsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_ListSnapshotsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_ListSubscriptionsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_ListSubscriptionsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_ListTopicSnapshotsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_ListTopicSnapshotsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_ListTopicSubscriptionsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_ListTopicSubscriptionsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_ListTopicsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_ListTopicsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_MessageStoragePolicy_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_ModifyAckDeadlineRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_ModifyPushConfigRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_PublishRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_PublishResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_PubsubMessage_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_PubsubMessage_AttributesEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_PullRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_PullResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_PushConfig_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_PushConfig_AttributesEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_PushConfig_OidcToken_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_ReceivedMessage_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_SeekRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_SeekResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_Snapshot_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_Snapshot_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_StreamingPullRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_StreamingPullResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_Subscription_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_Subscription_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_Topic_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_Topic_LabelsEntry_DoNotUse_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_UpdateSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_UpdateSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
  &scc_info_UpdateTopicRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_google_2fpubsub_2fv1_2fpubsub_2eproto_once;
static bool descriptor_table_google_2fpubsub_2fv1_2fpubsub_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fpubsub_2fv1_2fpubsub_2eproto = {
  &descriptor_table_google_2fpubsub_2fv1_2fpubsub_2eproto_initialized, descriptor_table_protodef_google_2fpubsub_2fv1_2fpubsub_2eproto, "google/pubsub/v1/pubsub.proto", 8377,
  &descriptor_table_google_2fpubsub_2fv1_2fpubsub_2eproto_once, descriptor_table_google_2fpubsub_2fv1_2fpubsub_2eproto_sccs, descriptor_table_google_2fpubsub_2fv1_2fpubsub_2eproto_deps, 47, 6,
  schemas, file_default_instances, TableStruct_google_2fpubsub_2fv1_2fpubsub_2eproto::offsets,
  file_level_metadata_google_2fpubsub_2fv1_2fpubsub_2eproto, 47, file_level_enum_descriptors_google_2fpubsub_2fv1_2fpubsub_2eproto, file_level_service_descriptors_google_2fpubsub_2fv1_2fpubsub_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_google_2fpubsub_2fv1_2fpubsub_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_google_2fpubsub_2fv1_2fpubsub_2eproto), true);
namespace google {
namespace pubsub {
namespace v1 {

// ===================================================================

void MessageStoragePolicy::InitAsDefaultInstance() {
}
class MessageStoragePolicy::_Internal {
 public:
};

MessageStoragePolicy::MessageStoragePolicy()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.MessageStoragePolicy)
}
MessageStoragePolicy::MessageStoragePolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  allowed_persistence_regions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.MessageStoragePolicy)
}
MessageStoragePolicy::MessageStoragePolicy(const MessageStoragePolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      allowed_persistence_regions_(from.allowed_persistence_regions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.MessageStoragePolicy)
}

void MessageStoragePolicy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageStoragePolicy_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
}

MessageStoragePolicy::~MessageStoragePolicy() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.MessageStoragePolicy)
  SharedDtor();
}

void MessageStoragePolicy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void MessageStoragePolicy::ArenaDtor(void* object) {
  MessageStoragePolicy* _this = reinterpret_cast< MessageStoragePolicy* >(object);
  (void)_this;
}
void MessageStoragePolicy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageStoragePolicy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageStoragePolicy& MessageStoragePolicy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageStoragePolicy_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void MessageStoragePolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.MessageStoragePolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allowed_persistence_regions_.Clear();
  _internal_metadata_.Clear();
}

const char* MessageStoragePolicy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string allowed_persistence_regions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_allowed_persistence_regions(), ptr, ctx, "google.pubsub.v1.MessageStoragePolicy.allowed_persistence_regions");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageStoragePolicy::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.MessageStoragePolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string allowed_persistence_regions = 1;
  for (int i = 0, n = this->_internal_allowed_persistence_regions_size(); i < n; i++) {
    const auto& s = this->_internal_allowed_persistence_regions(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.MessageStoragePolicy.allowed_persistence_regions");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.MessageStoragePolicy)
  return target;
}

size_t MessageStoragePolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.MessageStoragePolicy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string allowed_persistence_regions = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(allowed_persistence_regions_.size());
  for (int i = 0, n = allowed_persistence_regions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      allowed_persistence_regions_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageStoragePolicy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.MessageStoragePolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageStoragePolicy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageStoragePolicy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.MessageStoragePolicy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.MessageStoragePolicy)
    MergeFrom(*source);
  }
}

void MessageStoragePolicy::MergeFrom(const MessageStoragePolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.MessageStoragePolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allowed_persistence_regions_.MergeFrom(from.allowed_persistence_regions_);
}

void MessageStoragePolicy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.MessageStoragePolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageStoragePolicy::CopyFrom(const MessageStoragePolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.MessageStoragePolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageStoragePolicy::IsInitialized() const {
  return true;
}

void MessageStoragePolicy::InternalSwap(MessageStoragePolicy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  allowed_persistence_regions_.InternalSwap(&other->allowed_persistence_regions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageStoragePolicy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Topic_LabelsEntry_DoNotUse::Topic_LabelsEntry_DoNotUse() {}
Topic_LabelsEntry_DoNotUse::Topic_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Topic_LabelsEntry_DoNotUse::MergeFrom(const Topic_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Topic_LabelsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Topic_LabelsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Topic::InitAsDefaultInstance() {
  ::google::pubsub::v1::_Topic_default_instance_._instance.get_mutable()->message_storage_policy_ = const_cast< ::google::pubsub::v1::MessageStoragePolicy*>(
      ::google::pubsub::v1::MessageStoragePolicy::internal_default_instance());
}
class Topic::_Internal {
 public:
  static const ::google::pubsub::v1::MessageStoragePolicy& message_storage_policy(const Topic* msg);
};

const ::google::pubsub::v1::MessageStoragePolicy&
Topic::_Internal::message_storage_policy(const Topic* msg) {
  return *msg->message_storage_policy_;
}
void Topic::unsafe_arena_set_allocated_message_storage_policy(
    ::google::pubsub::v1::MessageStoragePolicy* message_storage_policy) {
  if (GetArenaNoVirtual() == nullptr) {
    delete message_storage_policy_;
  }
  message_storage_policy_ = message_storage_policy;
  if (message_storage_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Topic.message_storage_policy)
}
Topic::Topic()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.Topic)
}
Topic::Topic(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  labels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.Topic)
}
Topic::Topic(const Topic& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArenaNoVirtual());
  }
  kms_key_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_kms_key_name().empty()) {
    kms_key_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_kms_key_name(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_message_storage_policy()) {
    message_storage_policy_ = new ::google::pubsub::v1::MessageStoragePolicy(*from.message_storage_policy_);
  } else {
    message_storage_policy_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.Topic)
}

void Topic::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Topic_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kms_key_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_storage_policy_ = nullptr;
}

Topic::~Topic() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.Topic)
  SharedDtor();
}

void Topic::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  kms_key_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete message_storage_policy_;
}

void Topic::ArenaDtor(void* object) {
  Topic* _this = reinterpret_cast< Topic* >(object);
  (void)_this;
}
void Topic::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Topic::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Topic& Topic::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Topic_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void Topic::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.Topic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  kms_key_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && message_storage_policy_ != nullptr) {
    delete message_storage_policy_;
  }
  message_storage_policy_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Topic::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "google.pubsub.v1.Topic.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> labels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&labels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.pubsub.v1.MessageStoragePolicy message_storage_policy = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_storage_policy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string kms_key_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_kms_key_name(), ptr, ctx, "google.pubsub.v1.Topic.kms_key_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Topic::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.Topic)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.Topic.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // map<string, string> labels = 2;
  if (!this->_internal_labels().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.Topic.LabelsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.Topic.LabelsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_labels().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Topic_LabelsEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it) {
        target = Topic_LabelsEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .google.pubsub.v1.MessageStoragePolicy message_storage_policy = 3;
  if (this->has_message_storage_policy()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::message_storage_policy(this), target, stream);
  }

  // string kms_key_name = 5;
  if (this->kms_key_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_kms_key_name().data(), static_cast<int>(this->_internal_kms_key_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.Topic.kms_key_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_kms_key_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.Topic)
  return target;
}

size_t Topic::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.Topic)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> labels = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_labels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_labels().begin();
      it != this->_internal_labels().end(); ++it) {
    total_size += Topic_LabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string kms_key_name = 5;
  if (this->kms_key_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kms_key_name());
  }

  // .google.pubsub.v1.MessageStoragePolicy message_storage_policy = 3;
  if (this->has_message_storage_policy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_storage_policy_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Topic::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.Topic)
  GOOGLE_DCHECK_NE(&from, this);
  const Topic* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Topic>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.Topic)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.Topic)
    MergeFrom(*source);
  }
}

void Topic::MergeFrom(const Topic& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.Topic)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.kms_key_name().size() > 0) {
    _internal_set_kms_key_name(from._internal_kms_key_name());
  }
  if (from.has_message_storage_policy()) {
    _internal_mutable_message_storage_policy()->::google::pubsub::v1::MessageStoragePolicy::MergeFrom(from._internal_message_storage_policy());
  }
}

void Topic::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.Topic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Topic::CopyFrom(const Topic& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.Topic)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Topic::IsInitialized() const {
  return true;
}

void Topic::InternalSwap(Topic* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  labels_.Swap(&other->labels_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  kms_key_name_.Swap(&other->kms_key_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(message_storage_policy_, other->message_storage_policy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Topic::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

PubsubMessage_AttributesEntry_DoNotUse::PubsubMessage_AttributesEntry_DoNotUse() {}
PubsubMessage_AttributesEntry_DoNotUse::PubsubMessage_AttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PubsubMessage_AttributesEntry_DoNotUse::MergeFrom(const PubsubMessage_AttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PubsubMessage_AttributesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void PubsubMessage_AttributesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void PubsubMessage::InitAsDefaultInstance() {
  ::google::pubsub::v1::_PubsubMessage_default_instance_._instance.get_mutable()->publish_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class PubsubMessage::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& publish_time(const PubsubMessage* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
PubsubMessage::_Internal::publish_time(const PubsubMessage* msg) {
  return *msg->publish_time_;
}
void PubsubMessage::unsafe_arena_set_allocated_publish_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* publish_time) {
  if (GetArenaNoVirtual() == nullptr) {
    delete publish_time_;
  }
  publish_time_ = publish_time;
  if (publish_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.PubsubMessage.publish_time)
}
void PubsubMessage::clear_publish_time() {
  if (GetArenaNoVirtual() == nullptr && publish_time_ != nullptr) {
    delete publish_time_;
  }
  publish_time_ = nullptr;
}
PubsubMessage::PubsubMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.PubsubMessage)
}
PubsubMessage::PubsubMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  attributes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.PubsubMessage)
}
PubsubMessage::PubsubMessage(const PubsubMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attributes_.MergeFrom(from.attributes_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArenaNoVirtual());
  }
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message_id().empty()) {
    message_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message_id(),
      GetArenaNoVirtual());
  }
  ordering_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ordering_key().empty()) {
    ordering_key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ordering_key(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_publish_time()) {
    publish_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.publish_time_);
  } else {
    publish_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.PubsubMessage)
}

void PubsubMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PubsubMessage_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ordering_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  publish_time_ = nullptr;
}

PubsubMessage::~PubsubMessage() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.PubsubMessage)
  SharedDtor();
}

void PubsubMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ordering_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete publish_time_;
}

void PubsubMessage::ArenaDtor(void* object) {
  PubsubMessage* _this = reinterpret_cast< PubsubMessage* >(object);
  (void)_this;
}
void PubsubMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PubsubMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PubsubMessage& PubsubMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PubsubMessage_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void PubsubMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.PubsubMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attributes_.Clear();
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  message_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ordering_key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && publish_time_ != nullptr) {
    delete publish_time_;
  }
  publish_time_ = nullptr;
  _internal_metadata_.Clear();
}

const char* PubsubMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> attributes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&attributes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string message_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_message_id(), ptr, ctx, "google.pubsub.v1.PubsubMessage.message_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp publish_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_publish_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ordering_key = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_ordering_key(), ptr, ctx, "google.pubsub.v1.PubsubMessage.ordering_key");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PubsubMessage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.PubsubMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // map<string, string> attributes = 2;
  if (!this->_internal_attributes().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.PubsubMessage.AttributesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.PubsubMessage.AttributesEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_attributes().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_attributes().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_attributes().begin();
          it != this->_internal_attributes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PubsubMessage_AttributesEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_attributes().begin();
          it != this->_internal_attributes().end(); ++it) {
        target = PubsubMessage_AttributesEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string message_id = 3;
  if (this->message_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_id().data(), static_cast<int>(this->_internal_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PubsubMessage.message_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message_id(), target);
  }

  // .google.protobuf.Timestamp publish_time = 4;
  if (this->has_publish_time()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::publish_time(this), target, stream);
  }

  // string ordering_key = 5;
  if (this->ordering_key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ordering_key().data(), static_cast<int>(this->_internal_ordering_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PubsubMessage.ordering_key");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_ordering_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.PubsubMessage)
  return target;
}

size_t PubsubMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.PubsubMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> attributes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attributes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_attributes().begin();
      it != this->_internal_attributes().end(); ++it) {
    total_size += PubsubMessage_AttributesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes data = 1;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // string message_id = 3;
  if (this->message_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_id());
  }

  // string ordering_key = 5;
  if (this->ordering_key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ordering_key());
  }

  // .google.protobuf.Timestamp publish_time = 4;
  if (this->has_publish_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *publish_time_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PubsubMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.PubsubMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const PubsubMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PubsubMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.PubsubMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.PubsubMessage)
    MergeFrom(*source);
  }
}

void PubsubMessage::MergeFrom(const PubsubMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.PubsubMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attributes_.MergeFrom(from.attributes_);
  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.message_id().size() > 0) {
    _internal_set_message_id(from._internal_message_id());
  }
  if (from.ordering_key().size() > 0) {
    _internal_set_ordering_key(from._internal_ordering_key());
  }
  if (from.has_publish_time()) {
    _internal_mutable_publish_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_publish_time());
  }
}

void PubsubMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.PubsubMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PubsubMessage::CopyFrom(const PubsubMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.PubsubMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PubsubMessage::IsInitialized() const {
  return true;
}

void PubsubMessage::InternalSwap(PubsubMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  attributes_.Swap(&other->attributes_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  message_id_.Swap(&other->message_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ordering_key_.Swap(&other->ordering_key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(publish_time_, other->publish_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PubsubMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetTopicRequest::InitAsDefaultInstance() {
}
class GetTopicRequest::_Internal {
 public:
};

GetTopicRequest::GetTopicRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.GetTopicRequest)
}
GetTopicRequest::GetTopicRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.GetTopicRequest)
}
GetTopicRequest::GetTopicRequest(const GetTopicRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_topic().empty()) {
    topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_topic(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.GetTopicRequest)
}

void GetTopicRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetTopicRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetTopicRequest::~GetTopicRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.GetTopicRequest)
  SharedDtor();
}

void GetTopicRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetTopicRequest::ArenaDtor(void* object) {
  GetTopicRequest* _this = reinterpret_cast< GetTopicRequest* >(object);
  (void)_this;
}
void GetTopicRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTopicRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetTopicRequest& GetTopicRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetTopicRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void GetTopicRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.GetTopicRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topic_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

const char* GetTopicRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_topic(), ptr, ctx, "google.pubsub.v1.GetTopicRequest.topic");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTopicRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.GetTopicRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1;
  if (this->topic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.GetTopicRequest.topic");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_topic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.GetTopicRequest)
  return target;
}

size_t GetTopicRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.GetTopicRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string topic = 1;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTopicRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.GetTopicRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTopicRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetTopicRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.GetTopicRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.GetTopicRequest)
    MergeFrom(*source);
  }
}

void GetTopicRequest::MergeFrom(const GetTopicRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.GetTopicRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.topic().size() > 0) {
    _internal_set_topic(from._internal_topic());
  }
}

void GetTopicRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.GetTopicRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTopicRequest::CopyFrom(const GetTopicRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.GetTopicRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTopicRequest::IsInitialized() const {
  return true;
}

void GetTopicRequest::InternalSwap(GetTopicRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  topic_.Swap(&other->topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTopicRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateTopicRequest::InitAsDefaultInstance() {
  ::google::pubsub::v1::_UpdateTopicRequest_default_instance_._instance.get_mutable()->topic_ = const_cast< ::google::pubsub::v1::Topic*>(
      ::google::pubsub::v1::Topic::internal_default_instance());
  ::google::pubsub::v1::_UpdateTopicRequest_default_instance_._instance.get_mutable()->update_mask_ = const_cast< PROTOBUF_NAMESPACE_ID::FieldMask*>(
      PROTOBUF_NAMESPACE_ID::FieldMask::internal_default_instance());
}
class UpdateTopicRequest::_Internal {
 public:
  static const ::google::pubsub::v1::Topic& topic(const UpdateTopicRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::FieldMask& update_mask(const UpdateTopicRequest* msg);
};

const ::google::pubsub::v1::Topic&
UpdateTopicRequest::_Internal::topic(const UpdateTopicRequest* msg) {
  return *msg->topic_;
}
const PROTOBUF_NAMESPACE_ID::FieldMask&
UpdateTopicRequest::_Internal::update_mask(const UpdateTopicRequest* msg) {
  return *msg->update_mask_;
}
void UpdateTopicRequest::unsafe_arena_set_allocated_topic(
    ::google::pubsub::v1::Topic* topic) {
  if (GetArenaNoVirtual() == nullptr) {
    delete topic_;
  }
  topic_ = topic;
  if (topic) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.UpdateTopicRequest.topic)
}
void UpdateTopicRequest::unsafe_arena_set_allocated_update_mask(
    PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaNoVirtual() == nullptr) {
    delete update_mask_;
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.UpdateTopicRequest.update_mask)
}
void UpdateTopicRequest::clear_update_mask() {
  if (GetArenaNoVirtual() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
}
UpdateTopicRequest::UpdateTopicRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.UpdateTopicRequest)
}
UpdateTopicRequest::UpdateTopicRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.UpdateTopicRequest)
}
UpdateTopicRequest::UpdateTopicRequest(const UpdateTopicRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_topic()) {
    topic_ = new ::google::pubsub::v1::Topic(*from.topic_);
  } else {
    topic_ = nullptr;
  }
  if (from._internal_has_update_mask()) {
    update_mask_ = new PROTOBUF_NAMESPACE_ID::FieldMask(*from.update_mask_);
  } else {
    update_mask_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.UpdateTopicRequest)
}

void UpdateTopicRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateTopicRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::memset(&topic_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_mask_) -
      reinterpret_cast<char*>(&topic_)) + sizeof(update_mask_));
}

UpdateTopicRequest::~UpdateTopicRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.UpdateTopicRequest)
  SharedDtor();
}

void UpdateTopicRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete topic_;
  if (this != internal_default_instance()) delete update_mask_;
}

void UpdateTopicRequest::ArenaDtor(void* object) {
  UpdateTopicRequest* _this = reinterpret_cast< UpdateTopicRequest* >(object);
  (void)_this;
}
void UpdateTopicRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateTopicRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateTopicRequest& UpdateTopicRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateTopicRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void UpdateTopicRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.UpdateTopicRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && topic_ != nullptr) {
    delete topic_;
  }
  topic_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
  _internal_metadata_.Clear();
}

const char* UpdateTopicRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.pubsub.v1.Topic topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_topic(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FieldMask update_mask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_mask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateTopicRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.UpdateTopicRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.pubsub.v1.Topic topic = 1;
  if (this->has_topic()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::topic(this), target, stream);
  }

  // .google.protobuf.FieldMask update_mask = 2;
  if (this->has_update_mask()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::update_mask(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.UpdateTopicRequest)
  return target;
}

size_t UpdateTopicRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.UpdateTopicRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.pubsub.v1.Topic topic = 1;
  if (this->has_topic()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *topic_);
  }

  // .google.protobuf.FieldMask update_mask = 2;
  if (this->has_update_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_mask_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateTopicRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.UpdateTopicRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateTopicRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateTopicRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.UpdateTopicRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.UpdateTopicRequest)
    MergeFrom(*source);
  }
}

void UpdateTopicRequest::MergeFrom(const UpdateTopicRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.UpdateTopicRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_topic()) {
    _internal_mutable_topic()->::google::pubsub::v1::Topic::MergeFrom(from._internal_topic());
  }
  if (from.has_update_mask()) {
    _internal_mutable_update_mask()->PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(from._internal_update_mask());
  }
}

void UpdateTopicRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.UpdateTopicRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateTopicRequest::CopyFrom(const UpdateTopicRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.UpdateTopicRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateTopicRequest::IsInitialized() const {
  return true;
}

void UpdateTopicRequest::InternalSwap(UpdateTopicRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(topic_, other->topic_);
  swap(update_mask_, other->update_mask_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateTopicRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PublishRequest::InitAsDefaultInstance() {
}
class PublishRequest::_Internal {
 public:
};

PublishRequest::PublishRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.PublishRequest)
}
PublishRequest::PublishRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  messages_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.PublishRequest)
}
PublishRequest::PublishRequest(const PublishRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      messages_(from.messages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_topic().empty()) {
    topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_topic(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.PublishRequest)
}

void PublishRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublishRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PublishRequest::~PublishRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.PublishRequest)
  SharedDtor();
}

void PublishRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PublishRequest::ArenaDtor(void* object) {
  PublishRequest* _this = reinterpret_cast< PublishRequest* >(object);
  (void)_this;
}
void PublishRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishRequest& PublishRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublishRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void PublishRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.PublishRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  messages_.Clear();
  topic_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

const char* PublishRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_topic(), ptr, ctx, "google.pubsub.v1.PublishRequest.topic");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .google.pubsub.v1.PubsubMessage messages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.PublishRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1;
  if (this->topic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PublishRequest.topic");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_topic(), target);
  }

  // repeated .google.pubsub.v1.PubsubMessage messages = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_messages_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_messages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.PublishRequest)
  return target;
}

size_t PublishRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.PublishRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.pubsub.v1.PubsubMessage messages = 2;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string topic = 1;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.PublishRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.PublishRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.PublishRequest)
    MergeFrom(*source);
  }
}

void PublishRequest::MergeFrom(const PublishRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.PublishRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  messages_.MergeFrom(from.messages_);
  if (from.topic().size() > 0) {
    _internal_set_topic(from._internal_topic());
  }
}

void PublishRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.PublishRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishRequest::CopyFrom(const PublishRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.PublishRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishRequest::IsInitialized() const {
  return true;
}

void PublishRequest::InternalSwap(PublishRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  messages_.InternalSwap(&other->messages_);
  topic_.Swap(&other->topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PublishResponse::InitAsDefaultInstance() {
}
class PublishResponse::_Internal {
 public:
};

PublishResponse::PublishResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.PublishResponse)
}
PublishResponse::PublishResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  message_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.PublishResponse)
}
PublishResponse::PublishResponse(const PublishResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      message_ids_(from.message_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.PublishResponse)
}

void PublishResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PublishResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
}

PublishResponse::~PublishResponse() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.PublishResponse)
  SharedDtor();
}

void PublishResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void PublishResponse::ArenaDtor(void* object) {
  PublishResponse* _this = reinterpret_cast< PublishResponse* >(object);
  (void)_this;
}
void PublishResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PublishResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PublishResponse& PublishResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PublishResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void PublishResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.PublishResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_ids_.Clear();
  _internal_metadata_.Clear();
}

const char* PublishResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string message_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_message_ids(), ptr, ctx, "google.pubsub.v1.PublishResponse.message_ids");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PublishResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.PublishResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string message_ids = 1;
  for (int i = 0, n = this->_internal_message_ids_size(); i < n; i++) {
    const auto& s = this->_internal_message_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PublishResponse.message_ids");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.PublishResponse)
  return target;
}

size_t PublishResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.PublishResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string message_ids = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(message_ids_.size());
  for (int i = 0, n = message_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      message_ids_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublishResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.PublishResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PublishResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.PublishResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.PublishResponse)
    MergeFrom(*source);
  }
}

void PublishResponse::MergeFrom(const PublishResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.PublishResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  message_ids_.MergeFrom(from.message_ids_);
}

void PublishResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.PublishResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishResponse::CopyFrom(const PublishResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.PublishResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishResponse::IsInitialized() const {
  return true;
}

void PublishResponse::InternalSwap(PublishResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_ids_.InternalSwap(&other->message_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PublishResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListTopicsRequest::InitAsDefaultInstance() {
}
class ListTopicsRequest::_Internal {
 public:
};

ListTopicsRequest::ListTopicsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ListTopicsRequest)
}
ListTopicsRequest::ListTopicsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ListTopicsRequest)
}
ListTopicsRequest::ListTopicsRequest(const ListTopicsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_project().empty()) {
    project_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_project(),
      GetArenaNoVirtual());
  }
  page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_page_token().empty()) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_page_token(),
      GetArenaNoVirtual());
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ListTopicsRequest)
}

void ListTopicsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListTopicsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
}

ListTopicsRequest::~ListTopicsRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ListTopicsRequest)
  SharedDtor();
}

void ListTopicsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  project_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListTopicsRequest::ArenaDtor(void* object) {
  ListTopicsRequest* _this = reinterpret_cast< ListTopicsRequest* >(object);
  (void)_this;
}
void ListTopicsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListTopicsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListTopicsRequest& ListTopicsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListTopicsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void ListTopicsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ListTopicsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_size_ = 0;
  _internal_metadata_.Clear();
}

const char* ListTopicsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string project = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_project(), ptr, ctx, "google.pubsub.v1.ListTopicsRequest.project");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 page_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string page_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_page_token(), ptr, ctx, "google.pubsub.v1.ListTopicsRequest.page_token");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListTopicsRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ListTopicsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project().data(), static_cast<int>(this->_internal_project().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicsRequest.project");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_project(), target);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_page_size(), target);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page_token().data(), static_cast<int>(this->_internal_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicsRequest.page_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ListTopicsRequest)
  return target;
}

size_t ListTopicsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ListTopicsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project());
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page_token());
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_page_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListTopicsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ListTopicsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListTopicsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListTopicsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ListTopicsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ListTopicsRequest)
    MergeFrom(*source);
  }
}

void ListTopicsRequest::MergeFrom(const ListTopicsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ListTopicsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project().size() > 0) {
    _internal_set_project(from._internal_project());
  }
  if (from.page_token().size() > 0) {
    _internal_set_page_token(from._internal_page_token());
  }
  if (from.page_size() != 0) {
    _internal_set_page_size(from._internal_page_size());
  }
}

void ListTopicsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ListTopicsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTopicsRequest::CopyFrom(const ListTopicsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ListTopicsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTopicsRequest::IsInitialized() const {
  return true;
}

void ListTopicsRequest::InternalSwap(ListTopicsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  project_.Swap(&other->project_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  page_token_.Swap(&other->page_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(page_size_, other->page_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListTopicsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListTopicsResponse::InitAsDefaultInstance() {
}
class ListTopicsResponse::_Internal {
 public:
};

ListTopicsResponse::ListTopicsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ListTopicsResponse)
}
ListTopicsResponse::ListTopicsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  topics_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ListTopicsResponse)
}
ListTopicsResponse::ListTopicsResponse(const ListTopicsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      topics_(from.topics_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_next_page_token().empty()) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_next_page_token(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ListTopicsResponse)
}

void ListTopicsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListTopicsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  next_page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListTopicsResponse::~ListTopicsResponse() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ListTopicsResponse)
  SharedDtor();
}

void ListTopicsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  next_page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListTopicsResponse::ArenaDtor(void* object) {
  ListTopicsResponse* _this = reinterpret_cast< ListTopicsResponse* >(object);
  (void)_this;
}
void ListTopicsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListTopicsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListTopicsResponse& ListTopicsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListTopicsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void ListTopicsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ListTopicsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topics_.Clear();
  next_page_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

const char* ListTopicsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .google.pubsub.v1.Topic topics = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_topics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string next_page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_next_page_token(), ptr, ctx, "google.pubsub.v1.ListTopicsResponse.next_page_token");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListTopicsResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ListTopicsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.pubsub.v1.Topic topics = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_topics_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_topics(i), target, stream);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_page_token().data(), static_cast<int>(this->_internal_next_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicsResponse.next_page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ListTopicsResponse)
  return target;
}

size_t ListTopicsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ListTopicsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.pubsub.v1.Topic topics = 1;
  total_size += 1UL * this->_internal_topics_size();
  for (const auto& msg : this->topics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_page_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListTopicsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ListTopicsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListTopicsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListTopicsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ListTopicsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ListTopicsResponse)
    MergeFrom(*source);
  }
}

void ListTopicsResponse::MergeFrom(const ListTopicsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ListTopicsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  topics_.MergeFrom(from.topics_);
  if (from.next_page_token().size() > 0) {
    _internal_set_next_page_token(from._internal_next_page_token());
  }
}

void ListTopicsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ListTopicsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTopicsResponse::CopyFrom(const ListTopicsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ListTopicsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTopicsResponse::IsInitialized() const {
  return true;
}

void ListTopicsResponse::InternalSwap(ListTopicsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  topics_.InternalSwap(&other->topics_);
  next_page_token_.Swap(&other->next_page_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListTopicsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListTopicSubscriptionsRequest::InitAsDefaultInstance() {
}
class ListTopicSubscriptionsRequest::_Internal {
 public:
};

ListTopicSubscriptionsRequest::ListTopicSubscriptionsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ListTopicSubscriptionsRequest)
}
ListTopicSubscriptionsRequest::ListTopicSubscriptionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ListTopicSubscriptionsRequest)
}
ListTopicSubscriptionsRequest::ListTopicSubscriptionsRequest(const ListTopicSubscriptionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_topic().empty()) {
    topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_topic(),
      GetArenaNoVirtual());
  }
  page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_page_token().empty()) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_page_token(),
      GetArenaNoVirtual());
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ListTopicSubscriptionsRequest)
}

void ListTopicSubscriptionsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListTopicSubscriptionsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
}

ListTopicSubscriptionsRequest::~ListTopicSubscriptionsRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ListTopicSubscriptionsRequest)
  SharedDtor();
}

void ListTopicSubscriptionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListTopicSubscriptionsRequest::ArenaDtor(void* object) {
  ListTopicSubscriptionsRequest* _this = reinterpret_cast< ListTopicSubscriptionsRequest* >(object);
  (void)_this;
}
void ListTopicSubscriptionsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListTopicSubscriptionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListTopicSubscriptionsRequest& ListTopicSubscriptionsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListTopicSubscriptionsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void ListTopicSubscriptionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ListTopicSubscriptionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topic_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_size_ = 0;
  _internal_metadata_.Clear();
}

const char* ListTopicSubscriptionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_topic(), ptr, ctx, "google.pubsub.v1.ListTopicSubscriptionsRequest.topic");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 page_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string page_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_page_token(), ptr, ctx, "google.pubsub.v1.ListTopicSubscriptionsRequest.page_token");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListTopicSubscriptionsRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ListTopicSubscriptionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1;
  if (this->topic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicSubscriptionsRequest.topic");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_topic(), target);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_page_size(), target);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page_token().data(), static_cast<int>(this->_internal_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicSubscriptionsRequest.page_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ListTopicSubscriptionsRequest)
  return target;
}

size_t ListTopicSubscriptionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ListTopicSubscriptionsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string topic = 1;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic());
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page_token());
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_page_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListTopicSubscriptionsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ListTopicSubscriptionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListTopicSubscriptionsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListTopicSubscriptionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ListTopicSubscriptionsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ListTopicSubscriptionsRequest)
    MergeFrom(*source);
  }
}

void ListTopicSubscriptionsRequest::MergeFrom(const ListTopicSubscriptionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ListTopicSubscriptionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.topic().size() > 0) {
    _internal_set_topic(from._internal_topic());
  }
  if (from.page_token().size() > 0) {
    _internal_set_page_token(from._internal_page_token());
  }
  if (from.page_size() != 0) {
    _internal_set_page_size(from._internal_page_size());
  }
}

void ListTopicSubscriptionsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ListTopicSubscriptionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTopicSubscriptionsRequest::CopyFrom(const ListTopicSubscriptionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ListTopicSubscriptionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTopicSubscriptionsRequest::IsInitialized() const {
  return true;
}

void ListTopicSubscriptionsRequest::InternalSwap(ListTopicSubscriptionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  topic_.Swap(&other->topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  page_token_.Swap(&other->page_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(page_size_, other->page_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListTopicSubscriptionsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListTopicSubscriptionsResponse::InitAsDefaultInstance() {
}
class ListTopicSubscriptionsResponse::_Internal {
 public:
};

ListTopicSubscriptionsResponse::ListTopicSubscriptionsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ListTopicSubscriptionsResponse)
}
ListTopicSubscriptionsResponse::ListTopicSubscriptionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  subscriptions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ListTopicSubscriptionsResponse)
}
ListTopicSubscriptionsResponse::ListTopicSubscriptionsResponse(const ListTopicSubscriptionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      subscriptions_(from.subscriptions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_next_page_token().empty()) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_next_page_token(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ListTopicSubscriptionsResponse)
}

void ListTopicSubscriptionsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListTopicSubscriptionsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  next_page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListTopicSubscriptionsResponse::~ListTopicSubscriptionsResponse() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ListTopicSubscriptionsResponse)
  SharedDtor();
}

void ListTopicSubscriptionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  next_page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListTopicSubscriptionsResponse::ArenaDtor(void* object) {
  ListTopicSubscriptionsResponse* _this = reinterpret_cast< ListTopicSubscriptionsResponse* >(object);
  (void)_this;
}
void ListTopicSubscriptionsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListTopicSubscriptionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListTopicSubscriptionsResponse& ListTopicSubscriptionsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListTopicSubscriptionsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void ListTopicSubscriptionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ListTopicSubscriptionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscriptions_.Clear();
  next_page_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

const char* ListTopicSubscriptionsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string subscriptions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_subscriptions(), ptr, ctx, "google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string next_page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_next_page_token(), ptr, ctx, "google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListTopicSubscriptionsResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ListTopicSubscriptionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string subscriptions = 1;
  for (int i = 0, n = this->_internal_subscriptions_size(); i < n; i++) {
    const auto& s = this->_internal_subscriptions(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicSubscriptionsResponse.subscriptions");
    target = stream->WriteString(1, s, target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_page_token().data(), static_cast<int>(this->_internal_next_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicSubscriptionsResponse.next_page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ListTopicSubscriptionsResponse)
  return target;
}

size_t ListTopicSubscriptionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ListTopicSubscriptionsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string subscriptions = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(subscriptions_.size());
  for (int i = 0, n = subscriptions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      subscriptions_.Get(i));
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_page_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListTopicSubscriptionsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ListTopicSubscriptionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListTopicSubscriptionsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListTopicSubscriptionsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ListTopicSubscriptionsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ListTopicSubscriptionsResponse)
    MergeFrom(*source);
  }
}

void ListTopicSubscriptionsResponse::MergeFrom(const ListTopicSubscriptionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ListTopicSubscriptionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subscriptions_.MergeFrom(from.subscriptions_);
  if (from.next_page_token().size() > 0) {
    _internal_set_next_page_token(from._internal_next_page_token());
  }
}

void ListTopicSubscriptionsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ListTopicSubscriptionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTopicSubscriptionsResponse::CopyFrom(const ListTopicSubscriptionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ListTopicSubscriptionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTopicSubscriptionsResponse::IsInitialized() const {
  return true;
}

void ListTopicSubscriptionsResponse::InternalSwap(ListTopicSubscriptionsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  subscriptions_.InternalSwap(&other->subscriptions_);
  next_page_token_.Swap(&other->next_page_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListTopicSubscriptionsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListTopicSnapshotsRequest::InitAsDefaultInstance() {
}
class ListTopicSnapshotsRequest::_Internal {
 public:
};

ListTopicSnapshotsRequest::ListTopicSnapshotsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ListTopicSnapshotsRequest)
}
ListTopicSnapshotsRequest::ListTopicSnapshotsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ListTopicSnapshotsRequest)
}
ListTopicSnapshotsRequest::ListTopicSnapshotsRequest(const ListTopicSnapshotsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_topic().empty()) {
    topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_topic(),
      GetArenaNoVirtual());
  }
  page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_page_token().empty()) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_page_token(),
      GetArenaNoVirtual());
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ListTopicSnapshotsRequest)
}

void ListTopicSnapshotsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListTopicSnapshotsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
}

ListTopicSnapshotsRequest::~ListTopicSnapshotsRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ListTopicSnapshotsRequest)
  SharedDtor();
}

void ListTopicSnapshotsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListTopicSnapshotsRequest::ArenaDtor(void* object) {
  ListTopicSnapshotsRequest* _this = reinterpret_cast< ListTopicSnapshotsRequest* >(object);
  (void)_this;
}
void ListTopicSnapshotsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListTopicSnapshotsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListTopicSnapshotsRequest& ListTopicSnapshotsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListTopicSnapshotsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void ListTopicSnapshotsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ListTopicSnapshotsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topic_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_size_ = 0;
  _internal_metadata_.Clear();
}

const char* ListTopicSnapshotsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_topic(), ptr, ctx, "google.pubsub.v1.ListTopicSnapshotsRequest.topic");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 page_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string page_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_page_token(), ptr, ctx, "google.pubsub.v1.ListTopicSnapshotsRequest.page_token");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListTopicSnapshotsRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ListTopicSnapshotsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1;
  if (this->topic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicSnapshotsRequest.topic");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_topic(), target);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_page_size(), target);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page_token().data(), static_cast<int>(this->_internal_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicSnapshotsRequest.page_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ListTopicSnapshotsRequest)
  return target;
}

size_t ListTopicSnapshotsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ListTopicSnapshotsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string topic = 1;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic());
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page_token());
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_page_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListTopicSnapshotsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ListTopicSnapshotsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListTopicSnapshotsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListTopicSnapshotsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ListTopicSnapshotsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ListTopicSnapshotsRequest)
    MergeFrom(*source);
  }
}

void ListTopicSnapshotsRequest::MergeFrom(const ListTopicSnapshotsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ListTopicSnapshotsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.topic().size() > 0) {
    _internal_set_topic(from._internal_topic());
  }
  if (from.page_token().size() > 0) {
    _internal_set_page_token(from._internal_page_token());
  }
  if (from.page_size() != 0) {
    _internal_set_page_size(from._internal_page_size());
  }
}

void ListTopicSnapshotsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ListTopicSnapshotsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTopicSnapshotsRequest::CopyFrom(const ListTopicSnapshotsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ListTopicSnapshotsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTopicSnapshotsRequest::IsInitialized() const {
  return true;
}

void ListTopicSnapshotsRequest::InternalSwap(ListTopicSnapshotsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  topic_.Swap(&other->topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  page_token_.Swap(&other->page_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(page_size_, other->page_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListTopicSnapshotsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListTopicSnapshotsResponse::InitAsDefaultInstance() {
}
class ListTopicSnapshotsResponse::_Internal {
 public:
};

ListTopicSnapshotsResponse::ListTopicSnapshotsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ListTopicSnapshotsResponse)
}
ListTopicSnapshotsResponse::ListTopicSnapshotsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  snapshots_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ListTopicSnapshotsResponse)
}
ListTopicSnapshotsResponse::ListTopicSnapshotsResponse(const ListTopicSnapshotsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      snapshots_(from.snapshots_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_next_page_token().empty()) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_next_page_token(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ListTopicSnapshotsResponse)
}

void ListTopicSnapshotsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListTopicSnapshotsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  next_page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListTopicSnapshotsResponse::~ListTopicSnapshotsResponse() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ListTopicSnapshotsResponse)
  SharedDtor();
}

void ListTopicSnapshotsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  next_page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListTopicSnapshotsResponse::ArenaDtor(void* object) {
  ListTopicSnapshotsResponse* _this = reinterpret_cast< ListTopicSnapshotsResponse* >(object);
  (void)_this;
}
void ListTopicSnapshotsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListTopicSnapshotsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListTopicSnapshotsResponse& ListTopicSnapshotsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListTopicSnapshotsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void ListTopicSnapshotsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ListTopicSnapshotsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  snapshots_.Clear();
  next_page_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

const char* ListTopicSnapshotsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string snapshots = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_snapshots(), ptr, ctx, "google.pubsub.v1.ListTopicSnapshotsResponse.snapshots");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string next_page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_next_page_token(), ptr, ctx, "google.pubsub.v1.ListTopicSnapshotsResponse.next_page_token");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListTopicSnapshotsResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ListTopicSnapshotsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string snapshots = 1;
  for (int i = 0, n = this->_internal_snapshots_size(); i < n; i++) {
    const auto& s = this->_internal_snapshots(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicSnapshotsResponse.snapshots");
    target = stream->WriteString(1, s, target);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_page_token().data(), static_cast<int>(this->_internal_next_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListTopicSnapshotsResponse.next_page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ListTopicSnapshotsResponse)
  return target;
}

size_t ListTopicSnapshotsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ListTopicSnapshotsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string snapshots = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(snapshots_.size());
  for (int i = 0, n = snapshots_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      snapshots_.Get(i));
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_page_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListTopicSnapshotsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ListTopicSnapshotsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListTopicSnapshotsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListTopicSnapshotsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ListTopicSnapshotsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ListTopicSnapshotsResponse)
    MergeFrom(*source);
  }
}

void ListTopicSnapshotsResponse::MergeFrom(const ListTopicSnapshotsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ListTopicSnapshotsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  snapshots_.MergeFrom(from.snapshots_);
  if (from.next_page_token().size() > 0) {
    _internal_set_next_page_token(from._internal_next_page_token());
  }
}

void ListTopicSnapshotsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ListTopicSnapshotsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListTopicSnapshotsResponse::CopyFrom(const ListTopicSnapshotsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ListTopicSnapshotsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTopicSnapshotsResponse::IsInitialized() const {
  return true;
}

void ListTopicSnapshotsResponse::InternalSwap(ListTopicSnapshotsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  snapshots_.InternalSwap(&other->snapshots_);
  next_page_token_.Swap(&other->next_page_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListTopicSnapshotsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteTopicRequest::InitAsDefaultInstance() {
}
class DeleteTopicRequest::_Internal {
 public:
};

DeleteTopicRequest::DeleteTopicRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.DeleteTopicRequest)
}
DeleteTopicRequest::DeleteTopicRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.DeleteTopicRequest)
}
DeleteTopicRequest::DeleteTopicRequest(const DeleteTopicRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_topic().empty()) {
    topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_topic(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.DeleteTopicRequest)
}

void DeleteTopicRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteTopicRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteTopicRequest::~DeleteTopicRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.DeleteTopicRequest)
  SharedDtor();
}

void DeleteTopicRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteTopicRequest::ArenaDtor(void* object) {
  DeleteTopicRequest* _this = reinterpret_cast< DeleteTopicRequest* >(object);
  (void)_this;
}
void DeleteTopicRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteTopicRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteTopicRequest& DeleteTopicRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteTopicRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void DeleteTopicRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.DeleteTopicRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topic_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

const char* DeleteTopicRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_topic(), ptr, ctx, "google.pubsub.v1.DeleteTopicRequest.topic");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteTopicRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.DeleteTopicRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1;
  if (this->topic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.DeleteTopicRequest.topic");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_topic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.DeleteTopicRequest)
  return target;
}

size_t DeleteTopicRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.DeleteTopicRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string topic = 1;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteTopicRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.DeleteTopicRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteTopicRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteTopicRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.DeleteTopicRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.DeleteTopicRequest)
    MergeFrom(*source);
  }
}

void DeleteTopicRequest::MergeFrom(const DeleteTopicRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.DeleteTopicRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.topic().size() > 0) {
    _internal_set_topic(from._internal_topic());
  }
}

void DeleteTopicRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.DeleteTopicRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteTopicRequest::CopyFrom(const DeleteTopicRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.DeleteTopicRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTopicRequest::IsInitialized() const {
  return true;
}

void DeleteTopicRequest::InternalSwap(DeleteTopicRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  topic_.Swap(&other->topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteTopicRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Subscription_LabelsEntry_DoNotUse::Subscription_LabelsEntry_DoNotUse() {}
Subscription_LabelsEntry_DoNotUse::Subscription_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Subscription_LabelsEntry_DoNotUse::MergeFrom(const Subscription_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Subscription_LabelsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Subscription_LabelsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Subscription::InitAsDefaultInstance() {
  ::google::pubsub::v1::_Subscription_default_instance_._instance.get_mutable()->push_config_ = const_cast< ::google::pubsub::v1::PushConfig*>(
      ::google::pubsub::v1::PushConfig::internal_default_instance());
  ::google::pubsub::v1::_Subscription_default_instance_._instance.get_mutable()->message_retention_duration_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
  ::google::pubsub::v1::_Subscription_default_instance_._instance.get_mutable()->expiration_policy_ = const_cast< ::google::pubsub::v1::ExpirationPolicy*>(
      ::google::pubsub::v1::ExpirationPolicy::internal_default_instance());
  ::google::pubsub::v1::_Subscription_default_instance_._instance.get_mutable()->dead_letter_policy_ = const_cast< ::google::pubsub::v1::DeadLetterPolicy*>(
      ::google::pubsub::v1::DeadLetterPolicy::internal_default_instance());
}
class Subscription::_Internal {
 public:
  static const ::google::pubsub::v1::PushConfig& push_config(const Subscription* msg);
  static const PROTOBUF_NAMESPACE_ID::Duration& message_retention_duration(const Subscription* msg);
  static const ::google::pubsub::v1::ExpirationPolicy& expiration_policy(const Subscription* msg);
  static const ::google::pubsub::v1::DeadLetterPolicy& dead_letter_policy(const Subscription* msg);
};

const ::google::pubsub::v1::PushConfig&
Subscription::_Internal::push_config(const Subscription* msg) {
  return *msg->push_config_;
}
const PROTOBUF_NAMESPACE_ID::Duration&
Subscription::_Internal::message_retention_duration(const Subscription* msg) {
  return *msg->message_retention_duration_;
}
const ::google::pubsub::v1::ExpirationPolicy&
Subscription::_Internal::expiration_policy(const Subscription* msg) {
  return *msg->expiration_policy_;
}
const ::google::pubsub::v1::DeadLetterPolicy&
Subscription::_Internal::dead_letter_policy(const Subscription* msg) {
  return *msg->dead_letter_policy_;
}
void Subscription::unsafe_arena_set_allocated_push_config(
    ::google::pubsub::v1::PushConfig* push_config) {
  if (GetArenaNoVirtual() == nullptr) {
    delete push_config_;
  }
  push_config_ = push_config;
  if (push_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Subscription.push_config)
}
void Subscription::unsafe_arena_set_allocated_message_retention_duration(
    PROTOBUF_NAMESPACE_ID::Duration* message_retention_duration) {
  if (GetArenaNoVirtual() == nullptr) {
    delete message_retention_duration_;
  }
  message_retention_duration_ = message_retention_duration;
  if (message_retention_duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Subscription.message_retention_duration)
}
void Subscription::clear_message_retention_duration() {
  if (GetArenaNoVirtual() == nullptr && message_retention_duration_ != nullptr) {
    delete message_retention_duration_;
  }
  message_retention_duration_ = nullptr;
}
void Subscription::unsafe_arena_set_allocated_expiration_policy(
    ::google::pubsub::v1::ExpirationPolicy* expiration_policy) {
  if (GetArenaNoVirtual() == nullptr) {
    delete expiration_policy_;
  }
  expiration_policy_ = expiration_policy;
  if (expiration_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Subscription.expiration_policy)
}
void Subscription::unsafe_arena_set_allocated_dead_letter_policy(
    ::google::pubsub::v1::DeadLetterPolicy* dead_letter_policy) {
  if (GetArenaNoVirtual() == nullptr) {
    delete dead_letter_policy_;
  }
  dead_letter_policy_ = dead_letter_policy;
  if (dead_letter_policy) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Subscription.dead_letter_policy)
}
Subscription::Subscription()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.Subscription)
}
Subscription::Subscription(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  labels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.Subscription)
}
Subscription::Subscription(const Subscription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArenaNoVirtual());
  }
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_topic().empty()) {
    topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_topic(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_push_config()) {
    push_config_ = new ::google::pubsub::v1::PushConfig(*from.push_config_);
  } else {
    push_config_ = nullptr;
  }
  if (from._internal_has_message_retention_duration()) {
    message_retention_duration_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.message_retention_duration_);
  } else {
    message_retention_duration_ = nullptr;
  }
  if (from._internal_has_expiration_policy()) {
    expiration_policy_ = new ::google::pubsub::v1::ExpirationPolicy(*from.expiration_policy_);
  } else {
    expiration_policy_ = nullptr;
  }
  if (from._internal_has_dead_letter_policy()) {
    dead_letter_policy_ = new ::google::pubsub::v1::DeadLetterPolicy(*from.dead_letter_policy_);
  } else {
    dead_letter_policy_ = nullptr;
  }
  ::memcpy(&ack_deadline_seconds_, &from.ack_deadline_seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&enable_message_ordering_) -
    reinterpret_cast<char*>(&ack_deadline_seconds_)) + sizeof(enable_message_ordering_));
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.Subscription)
}

void Subscription::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Subscription_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&push_config_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_message_ordering_) -
      reinterpret_cast<char*>(&push_config_)) + sizeof(enable_message_ordering_));
}

Subscription::~Subscription() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.Subscription)
  SharedDtor();
}

void Subscription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete push_config_;
  if (this != internal_default_instance()) delete message_retention_duration_;
  if (this != internal_default_instance()) delete expiration_policy_;
  if (this != internal_default_instance()) delete dead_letter_policy_;
}

void Subscription::ArenaDtor(void* object) {
  Subscription* _this = reinterpret_cast< Subscription* >(object);
  (void)_this;
}
void Subscription::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Subscription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Subscription& Subscription::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Subscription_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void Subscription::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.Subscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  topic_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && push_config_ != nullptr) {
    delete push_config_;
  }
  push_config_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && message_retention_duration_ != nullptr) {
    delete message_retention_duration_;
  }
  message_retention_duration_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && expiration_policy_ != nullptr) {
    delete expiration_policy_;
  }
  expiration_policy_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && dead_letter_policy_ != nullptr) {
    delete dead_letter_policy_;
  }
  dead_letter_policy_ = nullptr;
  ::memset(&ack_deadline_seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&enable_message_ordering_) -
      reinterpret_cast<char*>(&ack_deadline_seconds_)) + sizeof(enable_message_ordering_));
  _internal_metadata_.Clear();
}

const char* Subscription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "google.pubsub.v1.Subscription.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string topic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_topic(), ptr, ctx, "google.pubsub.v1.Subscription.topic");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.pubsub.v1.PushConfig push_config = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_push_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ack_deadline_seconds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ack_deadline_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool retain_acked_messages = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          retain_acked_messages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration message_retention_duration = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_retention_duration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> labels = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&labels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // bool enable_message_ordering = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          enable_message_ordering_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.pubsub.v1.ExpirationPolicy expiration_policy = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_expiration_policy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.pubsub.v1.DeadLetterPolicy dead_letter_policy = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_dead_letter_policy(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Subscription::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.Subscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.Subscription.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string topic = 2;
  if (this->topic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.Subscription.topic");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_topic(), target);
  }

  // .google.pubsub.v1.PushConfig push_config = 4;
  if (this->has_push_config()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::push_config(this), target, stream);
  }

  // int32 ack_deadline_seconds = 5;
  if (this->ack_deadline_seconds() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_ack_deadline_seconds(), target);
  }

  // bool retain_acked_messages = 7;
  if (this->retain_acked_messages() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_retain_acked_messages(), target);
  }

  // .google.protobuf.Duration message_retention_duration = 8;
  if (this->has_message_retention_duration()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::message_retention_duration(this), target, stream);
  }

  // map<string, string> labels = 9;
  if (!this->_internal_labels().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.Subscription.LabelsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.Subscription.LabelsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_labels().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Subscription_LabelsEntry_DoNotUse::Funcs::InternalSerialize(9, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it) {
        target = Subscription_LabelsEntry_DoNotUse::Funcs::InternalSerialize(9, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // bool enable_message_ordering = 10;
  if (this->enable_message_ordering() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_enable_message_ordering(), target);
  }

  // .google.pubsub.v1.ExpirationPolicy expiration_policy = 11;
  if (this->has_expiration_policy()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::expiration_policy(this), target, stream);
  }

  // .google.pubsub.v1.DeadLetterPolicy dead_letter_policy = 13;
  if (this->has_dead_letter_policy()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, _Internal::dead_letter_policy(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.Subscription)
  return target;
}

size_t Subscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.Subscription)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> labels = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_labels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_labels().begin();
      it != this->_internal_labels().end(); ++it) {
    total_size += Subscription_LabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string topic = 2;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic());
  }

  // .google.pubsub.v1.PushConfig push_config = 4;
  if (this->has_push_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *push_config_);
  }

  // .google.protobuf.Duration message_retention_duration = 8;
  if (this->has_message_retention_duration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_retention_duration_);
  }

  // .google.pubsub.v1.ExpirationPolicy expiration_policy = 11;
  if (this->has_expiration_policy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expiration_policy_);
  }

  // .google.pubsub.v1.DeadLetterPolicy dead_letter_policy = 13;
  if (this->has_dead_letter_policy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dead_letter_policy_);
  }

  // int32 ack_deadline_seconds = 5;
  if (this->ack_deadline_seconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ack_deadline_seconds());
  }

  // bool retain_acked_messages = 7;
  if (this->retain_acked_messages() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_message_ordering = 10;
  if (this->enable_message_ordering() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Subscription::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.Subscription)
  GOOGLE_DCHECK_NE(&from, this);
  const Subscription* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Subscription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.Subscription)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.Subscription)
    MergeFrom(*source);
  }
}

void Subscription::MergeFrom(const Subscription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.Subscription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.topic().size() > 0) {
    _internal_set_topic(from._internal_topic());
  }
  if (from.has_push_config()) {
    _internal_mutable_push_config()->::google::pubsub::v1::PushConfig::MergeFrom(from._internal_push_config());
  }
  if (from.has_message_retention_duration()) {
    _internal_mutable_message_retention_duration()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_message_retention_duration());
  }
  if (from.has_expiration_policy()) {
    _internal_mutable_expiration_policy()->::google::pubsub::v1::ExpirationPolicy::MergeFrom(from._internal_expiration_policy());
  }
  if (from.has_dead_letter_policy()) {
    _internal_mutable_dead_letter_policy()->::google::pubsub::v1::DeadLetterPolicy::MergeFrom(from._internal_dead_letter_policy());
  }
  if (from.ack_deadline_seconds() != 0) {
    _internal_set_ack_deadline_seconds(from._internal_ack_deadline_seconds());
  }
  if (from.retain_acked_messages() != 0) {
    _internal_set_retain_acked_messages(from._internal_retain_acked_messages());
  }
  if (from.enable_message_ordering() != 0) {
    _internal_set_enable_message_ordering(from._internal_enable_message_ordering());
  }
}

void Subscription::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.Subscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Subscription::CopyFrom(const Subscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.Subscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subscription::IsInitialized() const {
  return true;
}

void Subscription::InternalSwap(Subscription* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  labels_.Swap(&other->labels_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  topic_.Swap(&other->topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(push_config_, other->push_config_);
  swap(message_retention_duration_, other->message_retention_duration_);
  swap(expiration_policy_, other->expiration_policy_);
  swap(dead_letter_policy_, other->dead_letter_policy_);
  swap(ack_deadline_seconds_, other->ack_deadline_seconds_);
  swap(retain_acked_messages_, other->retain_acked_messages_);
  swap(enable_message_ordering_, other->enable_message_ordering_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Subscription::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeadLetterPolicy::InitAsDefaultInstance() {
}
class DeadLetterPolicy::_Internal {
 public:
};

DeadLetterPolicy::DeadLetterPolicy()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.DeadLetterPolicy)
}
DeadLetterPolicy::DeadLetterPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.DeadLetterPolicy)
}
DeadLetterPolicy::DeadLetterPolicy(const DeadLetterPolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dead_letter_topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dead_letter_topic().empty()) {
    dead_letter_topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dead_letter_topic(),
      GetArenaNoVirtual());
  }
  max_delivery_attempts_ = from.max_delivery_attempts_;
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.DeadLetterPolicy)
}

void DeadLetterPolicy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeadLetterPolicy_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  dead_letter_topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  max_delivery_attempts_ = 0;
}

DeadLetterPolicy::~DeadLetterPolicy() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.DeadLetterPolicy)
  SharedDtor();
}

void DeadLetterPolicy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  dead_letter_topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeadLetterPolicy::ArenaDtor(void* object) {
  DeadLetterPolicy* _this = reinterpret_cast< DeadLetterPolicy* >(object);
  (void)_this;
}
void DeadLetterPolicy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeadLetterPolicy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeadLetterPolicy& DeadLetterPolicy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeadLetterPolicy_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void DeadLetterPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.DeadLetterPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dead_letter_topic_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  max_delivery_attempts_ = 0;
  _internal_metadata_.Clear();
}

const char* DeadLetterPolicy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string dead_letter_topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_dead_letter_topic(), ptr, ctx, "google.pubsub.v1.DeadLetterPolicy.dead_letter_topic");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_delivery_attempts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          max_delivery_attempts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeadLetterPolicy::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.DeadLetterPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string dead_letter_topic = 1;
  if (this->dead_letter_topic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dead_letter_topic().data(), static_cast<int>(this->_internal_dead_letter_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.DeadLetterPolicy.dead_letter_topic");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dead_letter_topic(), target);
  }

  // int32 max_delivery_attempts = 2;
  if (this->max_delivery_attempts() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_max_delivery_attempts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.DeadLetterPolicy)
  return target;
}

size_t DeadLetterPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.DeadLetterPolicy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dead_letter_topic = 1;
  if (this->dead_letter_topic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dead_letter_topic());
  }

  // int32 max_delivery_attempts = 2;
  if (this->max_delivery_attempts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_delivery_attempts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeadLetterPolicy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.DeadLetterPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const DeadLetterPolicy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeadLetterPolicy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.DeadLetterPolicy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.DeadLetterPolicy)
    MergeFrom(*source);
  }
}

void DeadLetterPolicy::MergeFrom(const DeadLetterPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.DeadLetterPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dead_letter_topic().size() > 0) {
    _internal_set_dead_letter_topic(from._internal_dead_letter_topic());
  }
  if (from.max_delivery_attempts() != 0) {
    _internal_set_max_delivery_attempts(from._internal_max_delivery_attempts());
  }
}

void DeadLetterPolicy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.DeadLetterPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeadLetterPolicy::CopyFrom(const DeadLetterPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.DeadLetterPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeadLetterPolicy::IsInitialized() const {
  return true;
}

void DeadLetterPolicy::InternalSwap(DeadLetterPolicy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  dead_letter_topic_.Swap(&other->dead_letter_topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(max_delivery_attempts_, other->max_delivery_attempts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeadLetterPolicy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ExpirationPolicy::InitAsDefaultInstance() {
  ::google::pubsub::v1::_ExpirationPolicy_default_instance_._instance.get_mutable()->ttl_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
}
class ExpirationPolicy::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Duration& ttl(const ExpirationPolicy* msg);
};

const PROTOBUF_NAMESPACE_ID::Duration&
ExpirationPolicy::_Internal::ttl(const ExpirationPolicy* msg) {
  return *msg->ttl_;
}
void ExpirationPolicy::unsafe_arena_set_allocated_ttl(
    PROTOBUF_NAMESPACE_ID::Duration* ttl) {
  if (GetArenaNoVirtual() == nullptr) {
    delete ttl_;
  }
  ttl_ = ttl;
  if (ttl) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ExpirationPolicy.ttl)
}
void ExpirationPolicy::clear_ttl() {
  if (GetArenaNoVirtual() == nullptr && ttl_ != nullptr) {
    delete ttl_;
  }
  ttl_ = nullptr;
}
ExpirationPolicy::ExpirationPolicy()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ExpirationPolicy)
}
ExpirationPolicy::ExpirationPolicy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ExpirationPolicy)
}
ExpirationPolicy::ExpirationPolicy(const ExpirationPolicy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_ttl()) {
    ttl_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.ttl_);
  } else {
    ttl_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ExpirationPolicy)
}

void ExpirationPolicy::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ExpirationPolicy_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ttl_ = nullptr;
}

ExpirationPolicy::~ExpirationPolicy() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ExpirationPolicy)
  SharedDtor();
}

void ExpirationPolicy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete ttl_;
}

void ExpirationPolicy::ArenaDtor(void* object) {
  ExpirationPolicy* _this = reinterpret_cast< ExpirationPolicy* >(object);
  (void)_this;
}
void ExpirationPolicy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ExpirationPolicy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ExpirationPolicy& ExpirationPolicy::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ExpirationPolicy_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void ExpirationPolicy::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ExpirationPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && ttl_ != nullptr) {
    delete ttl_;
  }
  ttl_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ExpirationPolicy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Duration ttl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ttl(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ExpirationPolicy::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ExpirationPolicy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Duration ttl = 1;
  if (this->has_ttl()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::ttl(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ExpirationPolicy)
  return target;
}

size_t ExpirationPolicy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ExpirationPolicy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration ttl = 1;
  if (this->has_ttl()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ttl_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExpirationPolicy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ExpirationPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  const ExpirationPolicy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ExpirationPolicy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ExpirationPolicy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ExpirationPolicy)
    MergeFrom(*source);
  }
}

void ExpirationPolicy::MergeFrom(const ExpirationPolicy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ExpirationPolicy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_ttl()) {
    _internal_mutable_ttl()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_ttl());
  }
}

void ExpirationPolicy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ExpirationPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpirationPolicy::CopyFrom(const ExpirationPolicy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ExpirationPolicy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpirationPolicy::IsInitialized() const {
  return true;
}

void ExpirationPolicy::InternalSwap(ExpirationPolicy* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(ttl_, other->ttl_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExpirationPolicy::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PushConfig_OidcToken::InitAsDefaultInstance() {
}
class PushConfig_OidcToken::_Internal {
 public:
};

PushConfig_OidcToken::PushConfig_OidcToken()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.PushConfig.OidcToken)
}
PushConfig_OidcToken::PushConfig_OidcToken(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.PushConfig.OidcToken)
}
PushConfig_OidcToken::PushConfig_OidcToken(const PushConfig_OidcToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_account_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_account_email().empty()) {
    service_account_email_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_service_account_email(),
      GetArenaNoVirtual());
  }
  audience_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_audience().empty()) {
    audience_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_audience(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.PushConfig.OidcToken)
}

void PushConfig_OidcToken::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PushConfig_OidcToken_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  service_account_email_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  audience_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PushConfig_OidcToken::~PushConfig_OidcToken() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.PushConfig.OidcToken)
  SharedDtor();
}

void PushConfig_OidcToken::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  service_account_email_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  audience_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PushConfig_OidcToken::ArenaDtor(void* object) {
  PushConfig_OidcToken* _this = reinterpret_cast< PushConfig_OidcToken* >(object);
  (void)_this;
}
void PushConfig_OidcToken::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PushConfig_OidcToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PushConfig_OidcToken& PushConfig_OidcToken::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PushConfig_OidcToken_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void PushConfig_OidcToken::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.PushConfig.OidcToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_account_email_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  audience_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

const char* PushConfig_OidcToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string service_account_email = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_service_account_email(), ptr, ctx, "google.pubsub.v1.PushConfig.OidcToken.service_account_email");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string audience = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_audience(), ptr, ctx, "google.pubsub.v1.PushConfig.OidcToken.audience");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PushConfig_OidcToken::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.PushConfig.OidcToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_account_email = 1;
  if (this->service_account_email().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_account_email().data(), static_cast<int>(this->_internal_service_account_email().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PushConfig.OidcToken.service_account_email");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_account_email(), target);
  }

  // string audience = 2;
  if (this->audience().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_audience().data(), static_cast<int>(this->_internal_audience().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PushConfig.OidcToken.audience");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_audience(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.PushConfig.OidcToken)
  return target;
}

size_t PushConfig_OidcToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.PushConfig.OidcToken)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_account_email = 1;
  if (this->service_account_email().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_account_email());
  }

  // string audience = 2;
  if (this->audience().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_audience());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PushConfig_OidcToken::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.PushConfig.OidcToken)
  GOOGLE_DCHECK_NE(&from, this);
  const PushConfig_OidcToken* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PushConfig_OidcToken>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.PushConfig.OidcToken)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.PushConfig.OidcToken)
    MergeFrom(*source);
  }
}

void PushConfig_OidcToken::MergeFrom(const PushConfig_OidcToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.PushConfig.OidcToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service_account_email().size() > 0) {
    _internal_set_service_account_email(from._internal_service_account_email());
  }
  if (from.audience().size() > 0) {
    _internal_set_audience(from._internal_audience());
  }
}

void PushConfig_OidcToken::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.PushConfig.OidcToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushConfig_OidcToken::CopyFrom(const PushConfig_OidcToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.PushConfig.OidcToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushConfig_OidcToken::IsInitialized() const {
  return true;
}

void PushConfig_OidcToken::InternalSwap(PushConfig_OidcToken* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  service_account_email_.Swap(&other->service_account_email_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  audience_.Swap(&other->audience_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata PushConfig_OidcToken::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

PushConfig_AttributesEntry_DoNotUse::PushConfig_AttributesEntry_DoNotUse() {}
PushConfig_AttributesEntry_DoNotUse::PushConfig_AttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void PushConfig_AttributesEntry_DoNotUse::MergeFrom(const PushConfig_AttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata PushConfig_AttributesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void PushConfig_AttributesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void PushConfig::InitAsDefaultInstance() {
  ::google::pubsub::v1::_PushConfig_default_instance_.oidc_token_ = const_cast< ::google::pubsub::v1::PushConfig_OidcToken*>(
      ::google::pubsub::v1::PushConfig_OidcToken::internal_default_instance());
}
class PushConfig::_Internal {
 public:
  static const ::google::pubsub::v1::PushConfig_OidcToken& oidc_token(const PushConfig* msg);
};

const ::google::pubsub::v1::PushConfig_OidcToken&
PushConfig::_Internal::oidc_token(const PushConfig* msg) {
  return *msg->authentication_method_.oidc_token_;
}
void PushConfig::set_allocated_oidc_token(::google::pubsub::v1::PushConfig_OidcToken* oidc_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_authentication_method();
  if (oidc_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(oidc_token);
    if (message_arena != submessage_arena) {
      oidc_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, oidc_token, submessage_arena);
    }
    set_has_oidc_token();
    authentication_method_.oidc_token_ = oidc_token;
  }
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.PushConfig.oidc_token)
}
PushConfig::PushConfig()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.PushConfig)
}
PushConfig::PushConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  attributes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.PushConfig)
}
PushConfig::PushConfig(const PushConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  attributes_.MergeFrom(from.attributes_);
  push_endpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_push_endpoint().empty()) {
    push_endpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_push_endpoint(),
      GetArenaNoVirtual());
  }
  clear_has_authentication_method();
  switch (from.authentication_method_case()) {
    case kOidcToken: {
      _internal_mutable_oidc_token()->::google::pubsub::v1::PushConfig_OidcToken::MergeFrom(from._internal_oidc_token());
      break;
    }
    case AUTHENTICATION_METHOD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.PushConfig)
}

void PushConfig::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PushConfig_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  push_endpoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_authentication_method();
}

PushConfig::~PushConfig() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.PushConfig)
  SharedDtor();
}

void PushConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  push_endpoint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_authentication_method()) {
    clear_authentication_method();
  }
}

void PushConfig::ArenaDtor(void* object) {
  PushConfig* _this = reinterpret_cast< PushConfig* >(object);
  (void)_this;
}
void PushConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PushConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PushConfig& PushConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PushConfig_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void PushConfig::clear_authentication_method() {
// @@protoc_insertion_point(one_of_clear_start:google.pubsub.v1.PushConfig)
  switch (authentication_method_case()) {
    case kOidcToken: {
      if (GetArenaNoVirtual() == nullptr) {
        delete authentication_method_.oidc_token_;
      }
      break;
    }
    case AUTHENTICATION_METHOD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = AUTHENTICATION_METHOD_NOT_SET;
}


void PushConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.PushConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attributes_.Clear();
  push_endpoint_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_authentication_method();
  _internal_metadata_.Clear();
}

const char* PushConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string push_endpoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_push_endpoint(), ptr, ctx, "google.pubsub.v1.PushConfig.push_endpoint");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> attributes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&attributes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.pubsub.v1.PushConfig.OidcToken oidc_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_oidc_token(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PushConfig::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.PushConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string push_endpoint = 1;
  if (this->push_endpoint().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_push_endpoint().data(), static_cast<int>(this->_internal_push_endpoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PushConfig.push_endpoint");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_push_endpoint(), target);
  }

  // map<string, string> attributes = 2;
  if (!this->_internal_attributes().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.PushConfig.AttributesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.PushConfig.AttributesEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_attributes().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_attributes().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_attributes().begin();
          it != this->_internal_attributes().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = PushConfig_AttributesEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_attributes().begin();
          it != this->_internal_attributes().end(); ++it) {
        target = PushConfig_AttributesEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .google.pubsub.v1.PushConfig.OidcToken oidc_token = 3;
  if (_internal_has_oidc_token()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::oidc_token(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.PushConfig)
  return target;
}

size_t PushConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.PushConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> attributes = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attributes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_attributes().begin();
      it != this->_internal_attributes().end(); ++it) {
    total_size += PushConfig_AttributesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string push_endpoint = 1;
  if (this->push_endpoint().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_push_endpoint());
  }

  switch (authentication_method_case()) {
    // .google.pubsub.v1.PushConfig.OidcToken oidc_token = 3;
    case kOidcToken: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *authentication_method_.oidc_token_);
      break;
    }
    case AUTHENTICATION_METHOD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PushConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.PushConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const PushConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PushConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.PushConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.PushConfig)
    MergeFrom(*source);
  }
}

void PushConfig::MergeFrom(const PushConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.PushConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  attributes_.MergeFrom(from.attributes_);
  if (from.push_endpoint().size() > 0) {
    _internal_set_push_endpoint(from._internal_push_endpoint());
  }
  switch (from.authentication_method_case()) {
    case kOidcToken: {
      _internal_mutable_oidc_token()->::google::pubsub::v1::PushConfig_OidcToken::MergeFrom(from._internal_oidc_token());
      break;
    }
    case AUTHENTICATION_METHOD_NOT_SET: {
      break;
    }
  }
}

void PushConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.PushConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PushConfig::CopyFrom(const PushConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.PushConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushConfig::IsInitialized() const {
  return true;
}

void PushConfig::InternalSwap(PushConfig* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  attributes_.Swap(&other->attributes_);
  push_endpoint_.Swap(&other->push_endpoint_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(authentication_method_, other->authentication_method_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata PushConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReceivedMessage::InitAsDefaultInstance() {
  ::google::pubsub::v1::_ReceivedMessage_default_instance_._instance.get_mutable()->message_ = const_cast< ::google::pubsub::v1::PubsubMessage*>(
      ::google::pubsub::v1::PubsubMessage::internal_default_instance());
}
class ReceivedMessage::_Internal {
 public:
  static const ::google::pubsub::v1::PubsubMessage& message(const ReceivedMessage* msg);
};

const ::google::pubsub::v1::PubsubMessage&
ReceivedMessage::_Internal::message(const ReceivedMessage* msg) {
  return *msg->message_;
}
void ReceivedMessage::unsafe_arena_set_allocated_message(
    ::google::pubsub::v1::PubsubMessage* message) {
  if (GetArenaNoVirtual() == nullptr) {
    delete message_;
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ReceivedMessage.message)
}
ReceivedMessage::ReceivedMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ReceivedMessage)
}
ReceivedMessage::ReceivedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ReceivedMessage)
}
ReceivedMessage::ReceivedMessage(const ReceivedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ack_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ack_id().empty()) {
    ack_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ack_id(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_message()) {
    message_ = new ::google::pubsub::v1::PubsubMessage(*from.message_);
  } else {
    message_ = nullptr;
  }
  delivery_attempt_ = from.delivery_attempt_;
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ReceivedMessage)
}

void ReceivedMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReceivedMessage_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ack_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&message_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&delivery_attempt_) -
      reinterpret_cast<char*>(&message_)) + sizeof(delivery_attempt_));
}

ReceivedMessage::~ReceivedMessage() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ReceivedMessage)
  SharedDtor();
}

void ReceivedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  ack_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete message_;
}

void ReceivedMessage::ArenaDtor(void* object) {
  ReceivedMessage* _this = reinterpret_cast< ReceivedMessage* >(object);
  (void)_this;
}
void ReceivedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReceivedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReceivedMessage& ReceivedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReceivedMessage_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void ReceivedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ReceivedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ack_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
  delivery_attempt_ = 0;
  _internal_metadata_.Clear();
}

const char* ReceivedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ack_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_ack_id(), ptr, ctx, "google.pubsub.v1.ReceivedMessage.ack_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.pubsub.v1.PubsubMessage message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 delivery_attempt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          delivery_attempt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReceivedMessage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ReceivedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ack_id = 1;
  if (this->ack_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ack_id().data(), static_cast<int>(this->_internal_ack_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ReceivedMessage.ack_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ack_id(), target);
  }

  // .google.pubsub.v1.PubsubMessage message = 2;
  if (this->has_message()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::message(this), target, stream);
  }

  // int32 delivery_attempt = 3;
  if (this->delivery_attempt() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_delivery_attempt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ReceivedMessage)
  return target;
}

size_t ReceivedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ReceivedMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ack_id = 1;
  if (this->ack_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ack_id());
  }

  // .google.pubsub.v1.PubsubMessage message = 2;
  if (this->has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  // int32 delivery_attempt = 3;
  if (this->delivery_attempt() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_delivery_attempt());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReceivedMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ReceivedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ReceivedMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReceivedMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ReceivedMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ReceivedMessage)
    MergeFrom(*source);
  }
}

void ReceivedMessage::MergeFrom(const ReceivedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ReceivedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ack_id().size() > 0) {
    _internal_set_ack_id(from._internal_ack_id());
  }
  if (from.has_message()) {
    _internal_mutable_message()->::google::pubsub::v1::PubsubMessage::MergeFrom(from._internal_message());
  }
  if (from.delivery_attempt() != 0) {
    _internal_set_delivery_attempt(from._internal_delivery_attempt());
  }
}

void ReceivedMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ReceivedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceivedMessage::CopyFrom(const ReceivedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ReceivedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceivedMessage::IsInitialized() const {
  return true;
}

void ReceivedMessage::InternalSwap(ReceivedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ack_id_.Swap(&other->ack_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(message_, other->message_);
  swap(delivery_attempt_, other->delivery_attempt_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReceivedMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetSubscriptionRequest::InitAsDefaultInstance() {
}
class GetSubscriptionRequest::_Internal {
 public:
};

GetSubscriptionRequest::GetSubscriptionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.GetSubscriptionRequest)
}
GetSubscriptionRequest::GetSubscriptionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.GetSubscriptionRequest)
}
GetSubscriptionRequest::GetSubscriptionRequest(const GetSubscriptionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subscription().empty()) {
    subscription_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_subscription(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.GetSubscriptionRequest)
}

void GetSubscriptionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  subscription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetSubscriptionRequest::~GetSubscriptionRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.GetSubscriptionRequest)
  SharedDtor();
}

void GetSubscriptionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  subscription_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetSubscriptionRequest::ArenaDtor(void* object) {
  GetSubscriptionRequest* _this = reinterpret_cast< GetSubscriptionRequest* >(object);
  (void)_this;
}
void GetSubscriptionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSubscriptionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSubscriptionRequest& GetSubscriptionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void GetSubscriptionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.GetSubscriptionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscription_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

const char* GetSubscriptionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string subscription = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_subscription(), ptr, ctx, "google.pubsub.v1.GetSubscriptionRequest.subscription");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSubscriptionRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.GetSubscriptionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1;
  if (this->subscription().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subscription().data(), static_cast<int>(this->_internal_subscription().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.GetSubscriptionRequest.subscription");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subscription(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.GetSubscriptionRequest)
  return target;
}

size_t GetSubscriptionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.GetSubscriptionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subscription = 1;
  if (this->subscription().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subscription());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSubscriptionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.GetSubscriptionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSubscriptionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSubscriptionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.GetSubscriptionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.GetSubscriptionRequest)
    MergeFrom(*source);
  }
}

void GetSubscriptionRequest::MergeFrom(const GetSubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.GetSubscriptionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.subscription().size() > 0) {
    _internal_set_subscription(from._internal_subscription());
  }
}

void GetSubscriptionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.GetSubscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSubscriptionRequest::CopyFrom(const GetSubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.GetSubscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSubscriptionRequest::IsInitialized() const {
  return true;
}

void GetSubscriptionRequest::InternalSwap(GetSubscriptionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  subscription_.Swap(&other->subscription_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSubscriptionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateSubscriptionRequest::InitAsDefaultInstance() {
  ::google::pubsub::v1::_UpdateSubscriptionRequest_default_instance_._instance.get_mutable()->subscription_ = const_cast< ::google::pubsub::v1::Subscription*>(
      ::google::pubsub::v1::Subscription::internal_default_instance());
  ::google::pubsub::v1::_UpdateSubscriptionRequest_default_instance_._instance.get_mutable()->update_mask_ = const_cast< PROTOBUF_NAMESPACE_ID::FieldMask*>(
      PROTOBUF_NAMESPACE_ID::FieldMask::internal_default_instance());
}
class UpdateSubscriptionRequest::_Internal {
 public:
  static const ::google::pubsub::v1::Subscription& subscription(const UpdateSubscriptionRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::FieldMask& update_mask(const UpdateSubscriptionRequest* msg);
};

const ::google::pubsub::v1::Subscription&
UpdateSubscriptionRequest::_Internal::subscription(const UpdateSubscriptionRequest* msg) {
  return *msg->subscription_;
}
const PROTOBUF_NAMESPACE_ID::FieldMask&
UpdateSubscriptionRequest::_Internal::update_mask(const UpdateSubscriptionRequest* msg) {
  return *msg->update_mask_;
}
void UpdateSubscriptionRequest::unsafe_arena_set_allocated_subscription(
    ::google::pubsub::v1::Subscription* subscription) {
  if (GetArenaNoVirtual() == nullptr) {
    delete subscription_;
  }
  subscription_ = subscription;
  if (subscription) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.UpdateSubscriptionRequest.subscription)
}
void UpdateSubscriptionRequest::unsafe_arena_set_allocated_update_mask(
    PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaNoVirtual() == nullptr) {
    delete update_mask_;
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.UpdateSubscriptionRequest.update_mask)
}
void UpdateSubscriptionRequest::clear_update_mask() {
  if (GetArenaNoVirtual() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
}
UpdateSubscriptionRequest::UpdateSubscriptionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.UpdateSubscriptionRequest)
}
UpdateSubscriptionRequest::UpdateSubscriptionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.UpdateSubscriptionRequest)
}
UpdateSubscriptionRequest::UpdateSubscriptionRequest(const UpdateSubscriptionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_subscription()) {
    subscription_ = new ::google::pubsub::v1::Subscription(*from.subscription_);
  } else {
    subscription_ = nullptr;
  }
  if (from._internal_has_update_mask()) {
    update_mask_ = new PROTOBUF_NAMESPACE_ID::FieldMask(*from.update_mask_);
  } else {
    update_mask_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.UpdateSubscriptionRequest)
}

void UpdateSubscriptionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::memset(&subscription_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_mask_) -
      reinterpret_cast<char*>(&subscription_)) + sizeof(update_mask_));
}

UpdateSubscriptionRequest::~UpdateSubscriptionRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.UpdateSubscriptionRequest)
  SharedDtor();
}

void UpdateSubscriptionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete subscription_;
  if (this != internal_default_instance()) delete update_mask_;
}

void UpdateSubscriptionRequest::ArenaDtor(void* object) {
  UpdateSubscriptionRequest* _this = reinterpret_cast< UpdateSubscriptionRequest* >(object);
  (void)_this;
}
void UpdateSubscriptionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateSubscriptionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateSubscriptionRequest& UpdateSubscriptionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void UpdateSubscriptionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.UpdateSubscriptionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && subscription_ != nullptr) {
    delete subscription_;
  }
  subscription_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
  _internal_metadata_.Clear();
}

const char* UpdateSubscriptionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.pubsub.v1.Subscription subscription = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscription(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FieldMask update_mask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_mask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateSubscriptionRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.UpdateSubscriptionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.pubsub.v1.Subscription subscription = 1;
  if (this->has_subscription()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::subscription(this), target, stream);
  }

  // .google.protobuf.FieldMask update_mask = 2;
  if (this->has_update_mask()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::update_mask(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.UpdateSubscriptionRequest)
  return target;
}

size_t UpdateSubscriptionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.UpdateSubscriptionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.pubsub.v1.Subscription subscription = 1;
  if (this->has_subscription()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subscription_);
  }

  // .google.protobuf.FieldMask update_mask = 2;
  if (this->has_update_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_mask_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateSubscriptionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.UpdateSubscriptionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateSubscriptionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateSubscriptionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.UpdateSubscriptionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.UpdateSubscriptionRequest)
    MergeFrom(*source);
  }
}

void UpdateSubscriptionRequest::MergeFrom(const UpdateSubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.UpdateSubscriptionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_subscription()) {
    _internal_mutable_subscription()->::google::pubsub::v1::Subscription::MergeFrom(from._internal_subscription());
  }
  if (from.has_update_mask()) {
    _internal_mutable_update_mask()->PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(from._internal_update_mask());
  }
}

void UpdateSubscriptionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.UpdateSubscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSubscriptionRequest::CopyFrom(const UpdateSubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.UpdateSubscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSubscriptionRequest::IsInitialized() const {
  return true;
}

void UpdateSubscriptionRequest::InternalSwap(UpdateSubscriptionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(subscription_, other->subscription_);
  swap(update_mask_, other->update_mask_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateSubscriptionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListSubscriptionsRequest::InitAsDefaultInstance() {
}
class ListSubscriptionsRequest::_Internal {
 public:
};

ListSubscriptionsRequest::ListSubscriptionsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ListSubscriptionsRequest)
}
ListSubscriptionsRequest::ListSubscriptionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ListSubscriptionsRequest)
}
ListSubscriptionsRequest::ListSubscriptionsRequest(const ListSubscriptionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_project().empty()) {
    project_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_project(),
      GetArenaNoVirtual());
  }
  page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_page_token().empty()) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_page_token(),
      GetArenaNoVirtual());
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ListSubscriptionsRequest)
}

void ListSubscriptionsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListSubscriptionsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
}

ListSubscriptionsRequest::~ListSubscriptionsRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ListSubscriptionsRequest)
  SharedDtor();
}

void ListSubscriptionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  project_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListSubscriptionsRequest::ArenaDtor(void* object) {
  ListSubscriptionsRequest* _this = reinterpret_cast< ListSubscriptionsRequest* >(object);
  (void)_this;
}
void ListSubscriptionsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListSubscriptionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListSubscriptionsRequest& ListSubscriptionsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListSubscriptionsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void ListSubscriptionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ListSubscriptionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_size_ = 0;
  _internal_metadata_.Clear();
}

const char* ListSubscriptionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string project = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_project(), ptr, ctx, "google.pubsub.v1.ListSubscriptionsRequest.project");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 page_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string page_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_page_token(), ptr, ctx, "google.pubsub.v1.ListSubscriptionsRequest.page_token");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListSubscriptionsRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ListSubscriptionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project().data(), static_cast<int>(this->_internal_project().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListSubscriptionsRequest.project");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_project(), target);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_page_size(), target);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page_token().data(), static_cast<int>(this->_internal_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListSubscriptionsRequest.page_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ListSubscriptionsRequest)
  return target;
}

size_t ListSubscriptionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ListSubscriptionsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project());
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page_token());
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_page_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListSubscriptionsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ListSubscriptionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListSubscriptionsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListSubscriptionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ListSubscriptionsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ListSubscriptionsRequest)
    MergeFrom(*source);
  }
}

void ListSubscriptionsRequest::MergeFrom(const ListSubscriptionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ListSubscriptionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project().size() > 0) {
    _internal_set_project(from._internal_project());
  }
  if (from.page_token().size() > 0) {
    _internal_set_page_token(from._internal_page_token());
  }
  if (from.page_size() != 0) {
    _internal_set_page_size(from._internal_page_size());
  }
}

void ListSubscriptionsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ListSubscriptionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListSubscriptionsRequest::CopyFrom(const ListSubscriptionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ListSubscriptionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSubscriptionsRequest::IsInitialized() const {
  return true;
}

void ListSubscriptionsRequest::InternalSwap(ListSubscriptionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  project_.Swap(&other->project_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  page_token_.Swap(&other->page_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(page_size_, other->page_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSubscriptionsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListSubscriptionsResponse::InitAsDefaultInstance() {
}
class ListSubscriptionsResponse::_Internal {
 public:
};

ListSubscriptionsResponse::ListSubscriptionsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ListSubscriptionsResponse)
}
ListSubscriptionsResponse::ListSubscriptionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  subscriptions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ListSubscriptionsResponse)
}
ListSubscriptionsResponse::ListSubscriptionsResponse(const ListSubscriptionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      subscriptions_(from.subscriptions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_next_page_token().empty()) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_next_page_token(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ListSubscriptionsResponse)
}

void ListSubscriptionsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListSubscriptionsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  next_page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListSubscriptionsResponse::~ListSubscriptionsResponse() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ListSubscriptionsResponse)
  SharedDtor();
}

void ListSubscriptionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  next_page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListSubscriptionsResponse::ArenaDtor(void* object) {
  ListSubscriptionsResponse* _this = reinterpret_cast< ListSubscriptionsResponse* >(object);
  (void)_this;
}
void ListSubscriptionsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListSubscriptionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListSubscriptionsResponse& ListSubscriptionsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListSubscriptionsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void ListSubscriptionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ListSubscriptionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscriptions_.Clear();
  next_page_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

const char* ListSubscriptionsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .google.pubsub.v1.Subscription subscriptions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subscriptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string next_page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_next_page_token(), ptr, ctx, "google.pubsub.v1.ListSubscriptionsResponse.next_page_token");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListSubscriptionsResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ListSubscriptionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.pubsub.v1.Subscription subscriptions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_subscriptions_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_subscriptions(i), target, stream);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_page_token().data(), static_cast<int>(this->_internal_next_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListSubscriptionsResponse.next_page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ListSubscriptionsResponse)
  return target;
}

size_t ListSubscriptionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ListSubscriptionsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.pubsub.v1.Subscription subscriptions = 1;
  total_size += 1UL * this->_internal_subscriptions_size();
  for (const auto& msg : this->subscriptions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_page_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListSubscriptionsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ListSubscriptionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListSubscriptionsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListSubscriptionsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ListSubscriptionsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ListSubscriptionsResponse)
    MergeFrom(*source);
  }
}

void ListSubscriptionsResponse::MergeFrom(const ListSubscriptionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ListSubscriptionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subscriptions_.MergeFrom(from.subscriptions_);
  if (from.next_page_token().size() > 0) {
    _internal_set_next_page_token(from._internal_next_page_token());
  }
}

void ListSubscriptionsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ListSubscriptionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListSubscriptionsResponse::CopyFrom(const ListSubscriptionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ListSubscriptionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSubscriptionsResponse::IsInitialized() const {
  return true;
}

void ListSubscriptionsResponse::InternalSwap(ListSubscriptionsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  subscriptions_.InternalSwap(&other->subscriptions_);
  next_page_token_.Swap(&other->next_page_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSubscriptionsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteSubscriptionRequest::InitAsDefaultInstance() {
}
class DeleteSubscriptionRequest::_Internal {
 public:
};

DeleteSubscriptionRequest::DeleteSubscriptionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.DeleteSubscriptionRequest)
}
DeleteSubscriptionRequest::DeleteSubscriptionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.DeleteSubscriptionRequest)
}
DeleteSubscriptionRequest::DeleteSubscriptionRequest(const DeleteSubscriptionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subscription().empty()) {
    subscription_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_subscription(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.DeleteSubscriptionRequest)
}

void DeleteSubscriptionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  subscription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteSubscriptionRequest::~DeleteSubscriptionRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.DeleteSubscriptionRequest)
  SharedDtor();
}

void DeleteSubscriptionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  subscription_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteSubscriptionRequest::ArenaDtor(void* object) {
  DeleteSubscriptionRequest* _this = reinterpret_cast< DeleteSubscriptionRequest* >(object);
  (void)_this;
}
void DeleteSubscriptionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteSubscriptionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteSubscriptionRequest& DeleteSubscriptionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteSubscriptionRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void DeleteSubscriptionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.DeleteSubscriptionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscription_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

const char* DeleteSubscriptionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string subscription = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_subscription(), ptr, ctx, "google.pubsub.v1.DeleteSubscriptionRequest.subscription");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteSubscriptionRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.DeleteSubscriptionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1;
  if (this->subscription().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subscription().data(), static_cast<int>(this->_internal_subscription().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.DeleteSubscriptionRequest.subscription");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subscription(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.DeleteSubscriptionRequest)
  return target;
}

size_t DeleteSubscriptionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.DeleteSubscriptionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subscription = 1;
  if (this->subscription().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subscription());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteSubscriptionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.DeleteSubscriptionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteSubscriptionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteSubscriptionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.DeleteSubscriptionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.DeleteSubscriptionRequest)
    MergeFrom(*source);
  }
}

void DeleteSubscriptionRequest::MergeFrom(const DeleteSubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.DeleteSubscriptionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.subscription().size() > 0) {
    _internal_set_subscription(from._internal_subscription());
  }
}

void DeleteSubscriptionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.DeleteSubscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteSubscriptionRequest::CopyFrom(const DeleteSubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.DeleteSubscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSubscriptionRequest::IsInitialized() const {
  return true;
}

void DeleteSubscriptionRequest::InternalSwap(DeleteSubscriptionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  subscription_.Swap(&other->subscription_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteSubscriptionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModifyPushConfigRequest::InitAsDefaultInstance() {
  ::google::pubsub::v1::_ModifyPushConfigRequest_default_instance_._instance.get_mutable()->push_config_ = const_cast< ::google::pubsub::v1::PushConfig*>(
      ::google::pubsub::v1::PushConfig::internal_default_instance());
}
class ModifyPushConfigRequest::_Internal {
 public:
  static const ::google::pubsub::v1::PushConfig& push_config(const ModifyPushConfigRequest* msg);
};

const ::google::pubsub::v1::PushConfig&
ModifyPushConfigRequest::_Internal::push_config(const ModifyPushConfigRequest* msg) {
  return *msg->push_config_;
}
void ModifyPushConfigRequest::unsafe_arena_set_allocated_push_config(
    ::google::pubsub::v1::PushConfig* push_config) {
  if (GetArenaNoVirtual() == nullptr) {
    delete push_config_;
  }
  push_config_ = push_config;
  if (push_config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.ModifyPushConfigRequest.push_config)
}
ModifyPushConfigRequest::ModifyPushConfigRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ModifyPushConfigRequest)
}
ModifyPushConfigRequest::ModifyPushConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ModifyPushConfigRequest)
}
ModifyPushConfigRequest::ModifyPushConfigRequest(const ModifyPushConfigRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subscription().empty()) {
    subscription_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_subscription(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_push_config()) {
    push_config_ = new ::google::pubsub::v1::PushConfig(*from.push_config_);
  } else {
    push_config_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ModifyPushConfigRequest)
}

void ModifyPushConfigRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModifyPushConfigRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  subscription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  push_config_ = nullptr;
}

ModifyPushConfigRequest::~ModifyPushConfigRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ModifyPushConfigRequest)
  SharedDtor();
}

void ModifyPushConfigRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  subscription_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete push_config_;
}

void ModifyPushConfigRequest::ArenaDtor(void* object) {
  ModifyPushConfigRequest* _this = reinterpret_cast< ModifyPushConfigRequest* >(object);
  (void)_this;
}
void ModifyPushConfigRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModifyPushConfigRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModifyPushConfigRequest& ModifyPushConfigRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModifyPushConfigRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void ModifyPushConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ModifyPushConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscription_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && push_config_ != nullptr) {
    delete push_config_;
  }
  push_config_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ModifyPushConfigRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string subscription = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_subscription(), ptr, ctx, "google.pubsub.v1.ModifyPushConfigRequest.subscription");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.pubsub.v1.PushConfig push_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_push_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModifyPushConfigRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ModifyPushConfigRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1;
  if (this->subscription().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subscription().data(), static_cast<int>(this->_internal_subscription().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ModifyPushConfigRequest.subscription");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subscription(), target);
  }

  // .google.pubsub.v1.PushConfig push_config = 2;
  if (this->has_push_config()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::push_config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ModifyPushConfigRequest)
  return target;
}

size_t ModifyPushConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ModifyPushConfigRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subscription = 1;
  if (this->subscription().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subscription());
  }

  // .google.pubsub.v1.PushConfig push_config = 2;
  if (this->has_push_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *push_config_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModifyPushConfigRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ModifyPushConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ModifyPushConfigRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModifyPushConfigRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ModifyPushConfigRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ModifyPushConfigRequest)
    MergeFrom(*source);
  }
}

void ModifyPushConfigRequest::MergeFrom(const ModifyPushConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ModifyPushConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.subscription().size() > 0) {
    _internal_set_subscription(from._internal_subscription());
  }
  if (from.has_push_config()) {
    _internal_mutable_push_config()->::google::pubsub::v1::PushConfig::MergeFrom(from._internal_push_config());
  }
}

void ModifyPushConfigRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ModifyPushConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyPushConfigRequest::CopyFrom(const ModifyPushConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ModifyPushConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyPushConfigRequest::IsInitialized() const {
  return true;
}

void ModifyPushConfigRequest::InternalSwap(ModifyPushConfigRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  subscription_.Swap(&other->subscription_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(push_config_, other->push_config_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModifyPushConfigRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PullRequest::InitAsDefaultInstance() {
}
class PullRequest::_Internal {
 public:
};

PullRequest::PullRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.PullRequest)
}
PullRequest::PullRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.PullRequest)
}
PullRequest::PullRequest(const PullRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subscription().empty()) {
    subscription_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_subscription(),
      GetArenaNoVirtual());
  }
  ::memcpy(&return_immediately_, &from.return_immediately_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_messages_) -
    reinterpret_cast<char*>(&return_immediately_)) + sizeof(max_messages_));
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.PullRequest)
}

void PullRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PullRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  subscription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&return_immediately_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_messages_) -
      reinterpret_cast<char*>(&return_immediately_)) + sizeof(max_messages_));
}

PullRequest::~PullRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.PullRequest)
  SharedDtor();
}

void PullRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  subscription_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PullRequest::ArenaDtor(void* object) {
  PullRequest* _this = reinterpret_cast< PullRequest* >(object);
  (void)_this;
}
void PullRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PullRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PullRequest& PullRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PullRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void PullRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.PullRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscription_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&return_immediately_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_messages_) -
      reinterpret_cast<char*>(&return_immediately_)) + sizeof(max_messages_));
  _internal_metadata_.Clear();
}

const char* PullRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string subscription = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_subscription(), ptr, ctx, "google.pubsub.v1.PullRequest.subscription");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool return_immediately = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          return_immediately_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 max_messages = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          max_messages_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PullRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.PullRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1;
  if (this->subscription().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subscription().data(), static_cast<int>(this->_internal_subscription().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.PullRequest.subscription");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subscription(), target);
  }

  // bool return_immediately = 2;
  if (this->return_immediately() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_return_immediately(), target);
  }

  // int32 max_messages = 3;
  if (this->max_messages() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_max_messages(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.PullRequest)
  return target;
}

size_t PullRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.PullRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subscription = 1;
  if (this->subscription().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subscription());
  }

  // bool return_immediately = 2;
  if (this->return_immediately() != 0) {
    total_size += 1 + 1;
  }

  // int32 max_messages = 3;
  if (this->max_messages() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_max_messages());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PullRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.PullRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const PullRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PullRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.PullRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.PullRequest)
    MergeFrom(*source);
  }
}

void PullRequest::MergeFrom(const PullRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.PullRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.subscription().size() > 0) {
    _internal_set_subscription(from._internal_subscription());
  }
  if (from.return_immediately() != 0) {
    _internal_set_return_immediately(from._internal_return_immediately());
  }
  if (from.max_messages() != 0) {
    _internal_set_max_messages(from._internal_max_messages());
  }
}

void PullRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.PullRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PullRequest::CopyFrom(const PullRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.PullRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PullRequest::IsInitialized() const {
  return true;
}

void PullRequest::InternalSwap(PullRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  subscription_.Swap(&other->subscription_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(return_immediately_, other->return_immediately_);
  swap(max_messages_, other->max_messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PullRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PullResponse::InitAsDefaultInstance() {
}
class PullResponse::_Internal {
 public:
};

PullResponse::PullResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.PullResponse)
}
PullResponse::PullResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  received_messages_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.PullResponse)
}
PullResponse::PullResponse(const PullResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      received_messages_(from.received_messages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.PullResponse)
}

void PullResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PullResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
}

PullResponse::~PullResponse() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.PullResponse)
  SharedDtor();
}

void PullResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void PullResponse::ArenaDtor(void* object) {
  PullResponse* _this = reinterpret_cast< PullResponse* >(object);
  (void)_this;
}
void PullResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PullResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PullResponse& PullResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PullResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void PullResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.PullResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  received_messages_.Clear();
  _internal_metadata_.Clear();
}

const char* PullResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_received_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PullResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.PullResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_received_messages_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_received_messages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.PullResponse)
  return target;
}

size_t PullResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.PullResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
  total_size += 1UL * this->_internal_received_messages_size();
  for (const auto& msg : this->received_messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PullResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.PullResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const PullResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PullResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.PullResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.PullResponse)
    MergeFrom(*source);
  }
}

void PullResponse::MergeFrom(const PullResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.PullResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  received_messages_.MergeFrom(from.received_messages_);
}

void PullResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.PullResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PullResponse::CopyFrom(const PullResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.PullResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PullResponse::IsInitialized() const {
  return true;
}

void PullResponse::InternalSwap(PullResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  received_messages_.InternalSwap(&other->received_messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PullResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ModifyAckDeadlineRequest::InitAsDefaultInstance() {
}
class ModifyAckDeadlineRequest::_Internal {
 public:
};

ModifyAckDeadlineRequest::ModifyAckDeadlineRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ModifyAckDeadlineRequest)
}
ModifyAckDeadlineRequest::ModifyAckDeadlineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  ack_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ModifyAckDeadlineRequest)
}
ModifyAckDeadlineRequest::ModifyAckDeadlineRequest(const ModifyAckDeadlineRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ack_ids_(from.ack_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subscription().empty()) {
    subscription_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_subscription(),
      GetArenaNoVirtual());
  }
  ack_deadline_seconds_ = from.ack_deadline_seconds_;
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ModifyAckDeadlineRequest)
}

void ModifyAckDeadlineRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ModifyAckDeadlineRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  subscription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ack_deadline_seconds_ = 0;
}

ModifyAckDeadlineRequest::~ModifyAckDeadlineRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ModifyAckDeadlineRequest)
  SharedDtor();
}

void ModifyAckDeadlineRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  subscription_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ModifyAckDeadlineRequest::ArenaDtor(void* object) {
  ModifyAckDeadlineRequest* _this = reinterpret_cast< ModifyAckDeadlineRequest* >(object);
  (void)_this;
}
void ModifyAckDeadlineRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModifyAckDeadlineRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ModifyAckDeadlineRequest& ModifyAckDeadlineRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ModifyAckDeadlineRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void ModifyAckDeadlineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ModifyAckDeadlineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ack_ids_.Clear();
  subscription_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ack_deadline_seconds_ = 0;
  _internal_metadata_.Clear();
}

const char* ModifyAckDeadlineRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string subscription = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_subscription(), ptr, ctx, "google.pubsub.v1.ModifyAckDeadlineRequest.subscription");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ack_deadline_seconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ack_deadline_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ack_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_ack_ids(), ptr, ctx, "google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ModifyAckDeadlineRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ModifyAckDeadlineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1;
  if (this->subscription().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subscription().data(), static_cast<int>(this->_internal_subscription().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ModifyAckDeadlineRequest.subscription");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subscription(), target);
  }

  // int32 ack_deadline_seconds = 3;
  if (this->ack_deadline_seconds() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ack_deadline_seconds(), target);
  }

  // repeated string ack_ids = 4;
  for (int i = 0, n = this->_internal_ack_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ack_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ModifyAckDeadlineRequest.ack_ids");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ModifyAckDeadlineRequest)
  return target;
}

size_t ModifyAckDeadlineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ModifyAckDeadlineRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ack_ids = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ack_ids_.size());
  for (int i = 0, n = ack_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ack_ids_.Get(i));
  }

  // string subscription = 1;
  if (this->subscription().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subscription());
  }

  // int32 ack_deadline_seconds = 3;
  if (this->ack_deadline_seconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ack_deadline_seconds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ModifyAckDeadlineRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ModifyAckDeadlineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ModifyAckDeadlineRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ModifyAckDeadlineRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ModifyAckDeadlineRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ModifyAckDeadlineRequest)
    MergeFrom(*source);
  }
}

void ModifyAckDeadlineRequest::MergeFrom(const ModifyAckDeadlineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ModifyAckDeadlineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ack_ids_.MergeFrom(from.ack_ids_);
  if (from.subscription().size() > 0) {
    _internal_set_subscription(from._internal_subscription());
  }
  if (from.ack_deadline_seconds() != 0) {
    _internal_set_ack_deadline_seconds(from._internal_ack_deadline_seconds());
  }
}

void ModifyAckDeadlineRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ModifyAckDeadlineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModifyAckDeadlineRequest::CopyFrom(const ModifyAckDeadlineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ModifyAckDeadlineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModifyAckDeadlineRequest::IsInitialized() const {
  return true;
}

void ModifyAckDeadlineRequest::InternalSwap(ModifyAckDeadlineRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ack_ids_.InternalSwap(&other->ack_ids_);
  subscription_.Swap(&other->subscription_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ack_deadline_seconds_, other->ack_deadline_seconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModifyAckDeadlineRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AcknowledgeRequest::InitAsDefaultInstance() {
}
class AcknowledgeRequest::_Internal {
 public:
};

AcknowledgeRequest::AcknowledgeRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.AcknowledgeRequest)
}
AcknowledgeRequest::AcknowledgeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  ack_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.AcknowledgeRequest)
}
AcknowledgeRequest::AcknowledgeRequest(const AcknowledgeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ack_ids_(from.ack_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subscription().empty()) {
    subscription_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_subscription(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.AcknowledgeRequest)
}

void AcknowledgeRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AcknowledgeRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  subscription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AcknowledgeRequest::~AcknowledgeRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.AcknowledgeRequest)
  SharedDtor();
}

void AcknowledgeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  subscription_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AcknowledgeRequest::ArenaDtor(void* object) {
  AcknowledgeRequest* _this = reinterpret_cast< AcknowledgeRequest* >(object);
  (void)_this;
}
void AcknowledgeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AcknowledgeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AcknowledgeRequest& AcknowledgeRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AcknowledgeRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void AcknowledgeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.AcknowledgeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ack_ids_.Clear();
  subscription_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

const char* AcknowledgeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string subscription = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_subscription(), ptr, ctx, "google.pubsub.v1.AcknowledgeRequest.subscription");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ack_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_ack_ids(), ptr, ctx, "google.pubsub.v1.AcknowledgeRequest.ack_ids");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AcknowledgeRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.AcknowledgeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1;
  if (this->subscription().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subscription().data(), static_cast<int>(this->_internal_subscription().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.AcknowledgeRequest.subscription");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subscription(), target);
  }

  // repeated string ack_ids = 2;
  for (int i = 0, n = this->_internal_ack_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ack_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.AcknowledgeRequest.ack_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.AcknowledgeRequest)
  return target;
}

size_t AcknowledgeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.AcknowledgeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ack_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ack_ids_.size());
  for (int i = 0, n = ack_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ack_ids_.Get(i));
  }

  // string subscription = 1;
  if (this->subscription().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subscription());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AcknowledgeRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.AcknowledgeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AcknowledgeRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AcknowledgeRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.AcknowledgeRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.AcknowledgeRequest)
    MergeFrom(*source);
  }
}

void AcknowledgeRequest::MergeFrom(const AcknowledgeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.AcknowledgeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ack_ids_.MergeFrom(from.ack_ids_);
  if (from.subscription().size() > 0) {
    _internal_set_subscription(from._internal_subscription());
  }
}

void AcknowledgeRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.AcknowledgeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcknowledgeRequest::CopyFrom(const AcknowledgeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.AcknowledgeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcknowledgeRequest::IsInitialized() const {
  return true;
}

void AcknowledgeRequest::InternalSwap(AcknowledgeRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ack_ids_.InternalSwap(&other->ack_ids_);
  subscription_.Swap(&other->subscription_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AcknowledgeRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamingPullRequest::InitAsDefaultInstance() {
}
class StreamingPullRequest::_Internal {
 public:
};

StreamingPullRequest::StreamingPullRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.StreamingPullRequest)
}
StreamingPullRequest::StreamingPullRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  ack_ids_(arena),
  modify_deadline_seconds_(arena),
  modify_deadline_ack_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.StreamingPullRequest)
}
StreamingPullRequest::StreamingPullRequest(const StreamingPullRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      ack_ids_(from.ack_ids_),
      modify_deadline_seconds_(from.modify_deadline_seconds_),
      modify_deadline_ack_ids_(from.modify_deadline_ack_ids_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subscription().empty()) {
    subscription_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_subscription(),
      GetArenaNoVirtual());
  }
  stream_ack_deadline_seconds_ = from.stream_ack_deadline_seconds_;
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.StreamingPullRequest)
}

void StreamingPullRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamingPullRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  subscription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  stream_ack_deadline_seconds_ = 0;
}

StreamingPullRequest::~StreamingPullRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.StreamingPullRequest)
  SharedDtor();
}

void StreamingPullRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  subscription_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void StreamingPullRequest::ArenaDtor(void* object) {
  StreamingPullRequest* _this = reinterpret_cast< StreamingPullRequest* >(object);
  (void)_this;
}
void StreamingPullRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamingPullRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamingPullRequest& StreamingPullRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamingPullRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void StreamingPullRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.StreamingPullRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ack_ids_.Clear();
  modify_deadline_seconds_.Clear();
  modify_deadline_ack_ids_.Clear();
  subscription_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  stream_ack_deadline_seconds_ = 0;
  _internal_metadata_.Clear();
}

const char* StreamingPullRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string subscription = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_subscription(), ptr, ctx, "google.pubsub.v1.StreamingPullRequest.subscription");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string ack_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_ack_ids(), ptr, ctx, "google.pubsub.v1.StreamingPullRequest.ack_ids");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 modify_deadline_seconds = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_modify_deadline_seconds(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_modify_deadline_seconds(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string modify_deadline_ack_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_modify_deadline_ack_ids(), ptr, ctx, "google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 stream_ack_deadline_seconds = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          stream_ack_deadline_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamingPullRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.StreamingPullRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1;
  if (this->subscription().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subscription().data(), static_cast<int>(this->_internal_subscription().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.StreamingPullRequest.subscription");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subscription(), target);
  }

  // repeated string ack_ids = 2;
  for (int i = 0, n = this->_internal_ack_ids_size(); i < n; i++) {
    const auto& s = this->_internal_ack_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.StreamingPullRequest.ack_ids");
    target = stream->WriteString(2, s, target);
  }

  // repeated int32 modify_deadline_seconds = 3;
  {
    int byte_size = _modify_deadline_seconds_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_modify_deadline_seconds(), byte_size, target);
    }
  }

  // repeated string modify_deadline_ack_ids = 4;
  for (int i = 0, n = this->_internal_modify_deadline_ack_ids_size(); i < n; i++) {
    const auto& s = this->_internal_modify_deadline_ack_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.StreamingPullRequest.modify_deadline_ack_ids");
    target = stream->WriteString(4, s, target);
  }

  // int32 stream_ack_deadline_seconds = 5;
  if (this->stream_ack_deadline_seconds() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_stream_ack_deadline_seconds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.StreamingPullRequest)
  return target;
}

size_t StreamingPullRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.StreamingPullRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string ack_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(ack_ids_.size());
  for (int i = 0, n = ack_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      ack_ids_.Get(i));
  }

  // repeated int32 modify_deadline_seconds = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->modify_deadline_seconds_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _modify_deadline_seconds_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string modify_deadline_ack_ids = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(modify_deadline_ack_ids_.size());
  for (int i = 0, n = modify_deadline_ack_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      modify_deadline_ack_ids_.Get(i));
  }

  // string subscription = 1;
  if (this->subscription().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subscription());
  }

  // int32 stream_ack_deadline_seconds = 5;
  if (this->stream_ack_deadline_seconds() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_stream_ack_deadline_seconds());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamingPullRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.StreamingPullRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamingPullRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamingPullRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.StreamingPullRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.StreamingPullRequest)
    MergeFrom(*source);
  }
}

void StreamingPullRequest::MergeFrom(const StreamingPullRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.StreamingPullRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ack_ids_.MergeFrom(from.ack_ids_);
  modify_deadline_seconds_.MergeFrom(from.modify_deadline_seconds_);
  modify_deadline_ack_ids_.MergeFrom(from.modify_deadline_ack_ids_);
  if (from.subscription().size() > 0) {
    _internal_set_subscription(from._internal_subscription());
  }
  if (from.stream_ack_deadline_seconds() != 0) {
    _internal_set_stream_ack_deadline_seconds(from._internal_stream_ack_deadline_seconds());
  }
}

void StreamingPullRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.StreamingPullRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingPullRequest::CopyFrom(const StreamingPullRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.StreamingPullRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingPullRequest::IsInitialized() const {
  return true;
}

void StreamingPullRequest::InternalSwap(StreamingPullRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  ack_ids_.InternalSwap(&other->ack_ids_);
  modify_deadline_seconds_.InternalSwap(&other->modify_deadline_seconds_);
  modify_deadline_ack_ids_.InternalSwap(&other->modify_deadline_ack_ids_);
  subscription_.Swap(&other->subscription_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(stream_ack_deadline_seconds_, other->stream_ack_deadline_seconds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamingPullRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StreamingPullResponse::InitAsDefaultInstance() {
}
class StreamingPullResponse::_Internal {
 public:
};

StreamingPullResponse::StreamingPullResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.StreamingPullResponse)
}
StreamingPullResponse::StreamingPullResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  received_messages_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.StreamingPullResponse)
}
StreamingPullResponse::StreamingPullResponse(const StreamingPullResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      received_messages_(from.received_messages_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.StreamingPullResponse)
}

void StreamingPullResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StreamingPullResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
}

StreamingPullResponse::~StreamingPullResponse() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.StreamingPullResponse)
  SharedDtor();
}

void StreamingPullResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void StreamingPullResponse::ArenaDtor(void* object) {
  StreamingPullResponse* _this = reinterpret_cast< StreamingPullResponse* >(object);
  (void)_this;
}
void StreamingPullResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamingPullResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StreamingPullResponse& StreamingPullResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StreamingPullResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void StreamingPullResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.StreamingPullResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  received_messages_.Clear();
  _internal_metadata_.Clear();
}

const char* StreamingPullResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_received_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* StreamingPullResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.StreamingPullResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_received_messages_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_received_messages(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.StreamingPullResponse)
  return target;
}

size_t StreamingPullResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.StreamingPullResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.pubsub.v1.ReceivedMessage received_messages = 1;
  total_size += 1UL * this->_internal_received_messages_size();
  for (const auto& msg : this->received_messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StreamingPullResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.StreamingPullResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StreamingPullResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StreamingPullResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.StreamingPullResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.StreamingPullResponse)
    MergeFrom(*source);
  }
}

void StreamingPullResponse::MergeFrom(const StreamingPullResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.StreamingPullResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  received_messages_.MergeFrom(from.received_messages_);
}

void StreamingPullResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.StreamingPullResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StreamingPullResponse::CopyFrom(const StreamingPullResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.StreamingPullResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamingPullResponse::IsInitialized() const {
  return true;
}

void StreamingPullResponse::InternalSwap(StreamingPullResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  received_messages_.InternalSwap(&other->received_messages_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamingPullResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

CreateSnapshotRequest_LabelsEntry_DoNotUse::CreateSnapshotRequest_LabelsEntry_DoNotUse() {}
CreateSnapshotRequest_LabelsEntry_DoNotUse::CreateSnapshotRequest_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CreateSnapshotRequest_LabelsEntry_DoNotUse::MergeFrom(const CreateSnapshotRequest_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CreateSnapshotRequest_LabelsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void CreateSnapshotRequest_LabelsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void CreateSnapshotRequest::InitAsDefaultInstance() {
}
class CreateSnapshotRequest::_Internal {
 public:
};

CreateSnapshotRequest::CreateSnapshotRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.CreateSnapshotRequest)
}
CreateSnapshotRequest::CreateSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  labels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.CreateSnapshotRequest)
}
CreateSnapshotRequest::CreateSnapshotRequest(const CreateSnapshotRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArenaNoVirtual());
  }
  subscription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subscription().empty()) {
    subscription_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_subscription(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.CreateSnapshotRequest)
}

void CreateSnapshotRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subscription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CreateSnapshotRequest::~CreateSnapshotRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.CreateSnapshotRequest)
  SharedDtor();
}

void CreateSnapshotRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subscription_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateSnapshotRequest::ArenaDtor(void* object) {
  CreateSnapshotRequest* _this = reinterpret_cast< CreateSnapshotRequest* >(object);
  (void)_this;
}
void CreateSnapshotRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateSnapshotRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateSnapshotRequest& CreateSnapshotRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void CreateSnapshotRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.CreateSnapshotRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  subscription_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

const char* CreateSnapshotRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "google.pubsub.v1.CreateSnapshotRequest.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string subscription = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_subscription(), ptr, ctx, "google.pubsub.v1.CreateSnapshotRequest.subscription");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> labels = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&labels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateSnapshotRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.CreateSnapshotRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.CreateSnapshotRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string subscription = 2;
  if (this->subscription().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subscription().data(), static_cast<int>(this->_internal_subscription().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.CreateSnapshotRequest.subscription");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_subscription(), target);
  }

  // map<string, string> labels = 3;
  if (!this->_internal_labels().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.CreateSnapshotRequest.LabelsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.CreateSnapshotRequest.LabelsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_labels().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = CreateSnapshotRequest_LabelsEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it) {
        target = CreateSnapshotRequest_LabelsEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.CreateSnapshotRequest)
  return target;
}

size_t CreateSnapshotRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.CreateSnapshotRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> labels = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_labels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_labels().begin();
      it != this->_internal_labels().end(); ++it) {
    total_size += CreateSnapshotRequest_LabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string subscription = 2;
  if (this->subscription().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subscription());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateSnapshotRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.CreateSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateSnapshotRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateSnapshotRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.CreateSnapshotRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.CreateSnapshotRequest)
    MergeFrom(*source);
  }
}

void CreateSnapshotRequest::MergeFrom(const CreateSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.CreateSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.subscription().size() > 0) {
    _internal_set_subscription(from._internal_subscription());
  }
}

void CreateSnapshotRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.CreateSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSnapshotRequest::CopyFrom(const CreateSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.CreateSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSnapshotRequest::IsInitialized() const {
  return true;
}

void CreateSnapshotRequest::InternalSwap(CreateSnapshotRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  labels_.Swap(&other->labels_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  subscription_.Swap(&other->subscription_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateSnapshotRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateSnapshotRequest::InitAsDefaultInstance() {
  ::google::pubsub::v1::_UpdateSnapshotRequest_default_instance_._instance.get_mutable()->snapshot_ = const_cast< ::google::pubsub::v1::Snapshot*>(
      ::google::pubsub::v1::Snapshot::internal_default_instance());
  ::google::pubsub::v1::_UpdateSnapshotRequest_default_instance_._instance.get_mutable()->update_mask_ = const_cast< PROTOBUF_NAMESPACE_ID::FieldMask*>(
      PROTOBUF_NAMESPACE_ID::FieldMask::internal_default_instance());
}
class UpdateSnapshotRequest::_Internal {
 public:
  static const ::google::pubsub::v1::Snapshot& snapshot(const UpdateSnapshotRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::FieldMask& update_mask(const UpdateSnapshotRequest* msg);
};

const ::google::pubsub::v1::Snapshot&
UpdateSnapshotRequest::_Internal::snapshot(const UpdateSnapshotRequest* msg) {
  return *msg->snapshot_;
}
const PROTOBUF_NAMESPACE_ID::FieldMask&
UpdateSnapshotRequest::_Internal::update_mask(const UpdateSnapshotRequest* msg) {
  return *msg->update_mask_;
}
void UpdateSnapshotRequest::unsafe_arena_set_allocated_snapshot(
    ::google::pubsub::v1::Snapshot* snapshot) {
  if (GetArenaNoVirtual() == nullptr) {
    delete snapshot_;
  }
  snapshot_ = snapshot;
  if (snapshot) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.UpdateSnapshotRequest.snapshot)
}
void UpdateSnapshotRequest::unsafe_arena_set_allocated_update_mask(
    PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaNoVirtual() == nullptr) {
    delete update_mask_;
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.UpdateSnapshotRequest.update_mask)
}
void UpdateSnapshotRequest::clear_update_mask() {
  if (GetArenaNoVirtual() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
}
UpdateSnapshotRequest::UpdateSnapshotRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.UpdateSnapshotRequest)
}
UpdateSnapshotRequest::UpdateSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.UpdateSnapshotRequest)
}
UpdateSnapshotRequest::UpdateSnapshotRequest(const UpdateSnapshotRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_snapshot()) {
    snapshot_ = new ::google::pubsub::v1::Snapshot(*from.snapshot_);
  } else {
    snapshot_ = nullptr;
  }
  if (from._internal_has_update_mask()) {
    update_mask_ = new PROTOBUF_NAMESPACE_ID::FieldMask(*from.update_mask_);
  } else {
    update_mask_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.UpdateSnapshotRequest)
}

void UpdateSnapshotRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  ::memset(&snapshot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_mask_) -
      reinterpret_cast<char*>(&snapshot_)) + sizeof(update_mask_));
}

UpdateSnapshotRequest::~UpdateSnapshotRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.UpdateSnapshotRequest)
  SharedDtor();
}

void UpdateSnapshotRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete snapshot_;
  if (this != internal_default_instance()) delete update_mask_;
}

void UpdateSnapshotRequest::ArenaDtor(void* object) {
  UpdateSnapshotRequest* _this = reinterpret_cast< UpdateSnapshotRequest* >(object);
  (void)_this;
}
void UpdateSnapshotRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateSnapshotRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateSnapshotRequest& UpdateSnapshotRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void UpdateSnapshotRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.UpdateSnapshotRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && snapshot_ != nullptr) {
    delete snapshot_;
  }
  snapshot_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
  _internal_metadata_.Clear();
}

const char* UpdateSnapshotRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.pubsub.v1.Snapshot snapshot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_snapshot(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FieldMask update_mask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_mask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateSnapshotRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.UpdateSnapshotRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.pubsub.v1.Snapshot snapshot = 1;
  if (this->has_snapshot()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::snapshot(this), target, stream);
  }

  // .google.protobuf.FieldMask update_mask = 2;
  if (this->has_update_mask()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::update_mask(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.UpdateSnapshotRequest)
  return target;
}

size_t UpdateSnapshotRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.UpdateSnapshotRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.pubsub.v1.Snapshot snapshot = 1;
  if (this->has_snapshot()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *snapshot_);
  }

  // .google.protobuf.FieldMask update_mask = 2;
  if (this->has_update_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_mask_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateSnapshotRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.UpdateSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateSnapshotRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateSnapshotRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.UpdateSnapshotRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.UpdateSnapshotRequest)
    MergeFrom(*source);
  }
}

void UpdateSnapshotRequest::MergeFrom(const UpdateSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.UpdateSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_snapshot()) {
    _internal_mutable_snapshot()->::google::pubsub::v1::Snapshot::MergeFrom(from._internal_snapshot());
  }
  if (from.has_update_mask()) {
    _internal_mutable_update_mask()->PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(from._internal_update_mask());
  }
}

void UpdateSnapshotRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.UpdateSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSnapshotRequest::CopyFrom(const UpdateSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.UpdateSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSnapshotRequest::IsInitialized() const {
  return true;
}

void UpdateSnapshotRequest::InternalSwap(UpdateSnapshotRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(snapshot_, other->snapshot_);
  swap(update_mask_, other->update_mask_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateSnapshotRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Snapshot_LabelsEntry_DoNotUse::Snapshot_LabelsEntry_DoNotUse() {}
Snapshot_LabelsEntry_DoNotUse::Snapshot_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Snapshot_LabelsEntry_DoNotUse::MergeFrom(const Snapshot_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Snapshot_LabelsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void Snapshot_LabelsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void Snapshot::InitAsDefaultInstance() {
  ::google::pubsub::v1::_Snapshot_default_instance_._instance.get_mutable()->expire_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class Snapshot::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& expire_time(const Snapshot* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
Snapshot::_Internal::expire_time(const Snapshot* msg) {
  return *msg->expire_time_;
}
void Snapshot::unsafe_arena_set_allocated_expire_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* expire_time) {
  if (GetArenaNoVirtual() == nullptr) {
    delete expire_time_;
  }
  expire_time_ = expire_time;
  if (expire_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.pubsub.v1.Snapshot.expire_time)
}
void Snapshot::clear_expire_time() {
  if (GetArenaNoVirtual() == nullptr && expire_time_ != nullptr) {
    delete expire_time_;
  }
  expire_time_ = nullptr;
}
Snapshot::Snapshot()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.Snapshot)
}
Snapshot::Snapshot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  labels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.Snapshot)
}
Snapshot::Snapshot(const Snapshot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArenaNoVirtual());
  }
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_topic().empty()) {
    topic_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_topic(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_expire_time()) {
    expire_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.expire_time_);
  } else {
    expire_time_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.Snapshot)
}

void Snapshot::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Snapshot_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expire_time_ = nullptr;
}

Snapshot::~Snapshot() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.Snapshot)
  SharedDtor();
}

void Snapshot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete expire_time_;
}

void Snapshot::ArenaDtor(void* object) {
  Snapshot* _this = reinterpret_cast< Snapshot* >(object);
  (void)_this;
}
void Snapshot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Snapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Snapshot& Snapshot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Snapshot_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void Snapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.Snapshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  topic_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && expire_time_ != nullptr) {
    delete expire_time_;
  }
  expire_time_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Snapshot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "google.pubsub.v1.Snapshot.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string topic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_topic(), ptr, ctx, "google.pubsub.v1.Snapshot.topic");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp expire_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_expire_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> labels = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&labels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Snapshot::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.Snapshot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.Snapshot.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string topic = 2;
  if (this->topic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.Snapshot.topic");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_topic(), target);
  }

  // .google.protobuf.Timestamp expire_time = 3;
  if (this->has_expire_time()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::expire_time(this), target, stream);
  }

  // map<string, string> labels = 4;
  if (!this->_internal_labels().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.Snapshot.LabelsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "google.pubsub.v1.Snapshot.LabelsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_labels().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Snapshot_LabelsEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it) {
        target = Snapshot_LabelsEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.Snapshot)
  return target;
}

size_t Snapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.Snapshot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> labels = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_labels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_labels().begin();
      it != this->_internal_labels().end(); ++it) {
    total_size += Snapshot_LabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string topic = 2;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic());
  }

  // .google.protobuf.Timestamp expire_time = 3;
  if (this->has_expire_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expire_time_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Snapshot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.Snapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const Snapshot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Snapshot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.Snapshot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.Snapshot)
    MergeFrom(*source);
  }
}

void Snapshot::MergeFrom(const Snapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.Snapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.topic().size() > 0) {
    _internal_set_topic(from._internal_topic());
  }
  if (from.has_expire_time()) {
    _internal_mutable_expire_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_expire_time());
  }
}

void Snapshot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.Snapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Snapshot::CopyFrom(const Snapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.Snapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snapshot::IsInitialized() const {
  return true;
}

void Snapshot::InternalSwap(Snapshot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  labels_.Swap(&other->labels_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  topic_.Swap(&other->topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(expire_time_, other->expire_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Snapshot::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetSnapshotRequest::InitAsDefaultInstance() {
}
class GetSnapshotRequest::_Internal {
 public:
};

GetSnapshotRequest::GetSnapshotRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.GetSnapshotRequest)
}
GetSnapshotRequest::GetSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.GetSnapshotRequest)
}
GetSnapshotRequest::GetSnapshotRequest(const GetSnapshotRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  snapshot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_snapshot().empty()) {
    snapshot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_snapshot(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.GetSnapshotRequest)
}

void GetSnapshotRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  snapshot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetSnapshotRequest::~GetSnapshotRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.GetSnapshotRequest)
  SharedDtor();
}

void GetSnapshotRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  snapshot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetSnapshotRequest::ArenaDtor(void* object) {
  GetSnapshotRequest* _this = reinterpret_cast< GetSnapshotRequest* >(object);
  (void)_this;
}
void GetSnapshotRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSnapshotRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSnapshotRequest& GetSnapshotRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void GetSnapshotRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.GetSnapshotRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  snapshot_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

const char* GetSnapshotRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string snapshot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_snapshot(), ptr, ctx, "google.pubsub.v1.GetSnapshotRequest.snapshot");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSnapshotRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.GetSnapshotRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string snapshot = 1;
  if (this->snapshot().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_snapshot().data(), static_cast<int>(this->_internal_snapshot().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.GetSnapshotRequest.snapshot");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_snapshot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.GetSnapshotRequest)
  return target;
}

size_t GetSnapshotRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.GetSnapshotRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string snapshot = 1;
  if (this->snapshot().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_snapshot());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSnapshotRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.GetSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSnapshotRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSnapshotRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.GetSnapshotRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.GetSnapshotRequest)
    MergeFrom(*source);
  }
}

void GetSnapshotRequest::MergeFrom(const GetSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.GetSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.snapshot().size() > 0) {
    _internal_set_snapshot(from._internal_snapshot());
  }
}

void GetSnapshotRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.GetSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSnapshotRequest::CopyFrom(const GetSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.GetSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSnapshotRequest::IsInitialized() const {
  return true;
}

void GetSnapshotRequest::InternalSwap(GetSnapshotRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  snapshot_.Swap(&other->snapshot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSnapshotRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListSnapshotsRequest::InitAsDefaultInstance() {
}
class ListSnapshotsRequest::_Internal {
 public:
};

ListSnapshotsRequest::ListSnapshotsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ListSnapshotsRequest)
}
ListSnapshotsRequest::ListSnapshotsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ListSnapshotsRequest)
}
ListSnapshotsRequest::ListSnapshotsRequest(const ListSnapshotsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_project().empty()) {
    project_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_project(),
      GetArenaNoVirtual());
  }
  page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_page_token().empty()) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_page_token(),
      GetArenaNoVirtual());
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ListSnapshotsRequest)
}

void ListSnapshotsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListSnapshotsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
}

ListSnapshotsRequest::~ListSnapshotsRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ListSnapshotsRequest)
  SharedDtor();
}

void ListSnapshotsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  project_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListSnapshotsRequest::ArenaDtor(void* object) {
  ListSnapshotsRequest* _this = reinterpret_cast< ListSnapshotsRequest* >(object);
  (void)_this;
}
void ListSnapshotsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListSnapshotsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListSnapshotsRequest& ListSnapshotsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListSnapshotsRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void ListSnapshotsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ListSnapshotsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_size_ = 0;
  _internal_metadata_.Clear();
}

const char* ListSnapshotsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string project = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_project(), ptr, ctx, "google.pubsub.v1.ListSnapshotsRequest.project");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 page_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string page_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_page_token(), ptr, ctx, "google.pubsub.v1.ListSnapshotsRequest.page_token");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListSnapshotsRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ListSnapshotsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project().data(), static_cast<int>(this->_internal_project().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListSnapshotsRequest.project");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_project(), target);
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_page_size(), target);
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page_token().data(), static_cast<int>(this->_internal_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListSnapshotsRequest.page_token");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ListSnapshotsRequest)
  return target;
}

size_t ListSnapshotsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ListSnapshotsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string project = 1;
  if (this->project().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project());
  }

  // string page_token = 3;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page_token());
  }

  // int32 page_size = 2;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_page_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListSnapshotsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ListSnapshotsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListSnapshotsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListSnapshotsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ListSnapshotsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ListSnapshotsRequest)
    MergeFrom(*source);
  }
}

void ListSnapshotsRequest::MergeFrom(const ListSnapshotsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ListSnapshotsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project().size() > 0) {
    _internal_set_project(from._internal_project());
  }
  if (from.page_token().size() > 0) {
    _internal_set_page_token(from._internal_page_token());
  }
  if (from.page_size() != 0) {
    _internal_set_page_size(from._internal_page_size());
  }
}

void ListSnapshotsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ListSnapshotsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListSnapshotsRequest::CopyFrom(const ListSnapshotsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ListSnapshotsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSnapshotsRequest::IsInitialized() const {
  return true;
}

void ListSnapshotsRequest::InternalSwap(ListSnapshotsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  project_.Swap(&other->project_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  page_token_.Swap(&other->page_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(page_size_, other->page_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSnapshotsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListSnapshotsResponse::InitAsDefaultInstance() {
}
class ListSnapshotsResponse::_Internal {
 public:
};

ListSnapshotsResponse::ListSnapshotsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.ListSnapshotsResponse)
}
ListSnapshotsResponse::ListSnapshotsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  snapshots_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.ListSnapshotsResponse)
}
ListSnapshotsResponse::ListSnapshotsResponse(const ListSnapshotsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      snapshots_(from.snapshots_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_next_page_token().empty()) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_next_page_token(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.ListSnapshotsResponse)
}

void ListSnapshotsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListSnapshotsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  next_page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListSnapshotsResponse::~ListSnapshotsResponse() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.ListSnapshotsResponse)
  SharedDtor();
}

void ListSnapshotsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  next_page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListSnapshotsResponse::ArenaDtor(void* object) {
  ListSnapshotsResponse* _this = reinterpret_cast< ListSnapshotsResponse* >(object);
  (void)_this;
}
void ListSnapshotsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListSnapshotsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListSnapshotsResponse& ListSnapshotsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListSnapshotsResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void ListSnapshotsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.ListSnapshotsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  snapshots_.Clear();
  next_page_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

const char* ListSnapshotsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .google.pubsub.v1.Snapshot snapshots = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_snapshots(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string next_page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_next_page_token(), ptr, ctx, "google.pubsub.v1.ListSnapshotsResponse.next_page_token");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListSnapshotsResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.ListSnapshotsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.pubsub.v1.Snapshot snapshots = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_snapshots_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_snapshots(i), target, stream);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_page_token().data(), static_cast<int>(this->_internal_next_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.ListSnapshotsResponse.next_page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.ListSnapshotsResponse)
  return target;
}

size_t ListSnapshotsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.ListSnapshotsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.pubsub.v1.Snapshot snapshots = 1;
  total_size += 1UL * this->_internal_snapshots_size();
  for (const auto& msg : this->snapshots_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_page_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListSnapshotsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.ListSnapshotsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListSnapshotsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListSnapshotsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.ListSnapshotsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.ListSnapshotsResponse)
    MergeFrom(*source);
  }
}

void ListSnapshotsResponse::MergeFrom(const ListSnapshotsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.ListSnapshotsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  snapshots_.MergeFrom(from.snapshots_);
  if (from.next_page_token().size() > 0) {
    _internal_set_next_page_token(from._internal_next_page_token());
  }
}

void ListSnapshotsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.ListSnapshotsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListSnapshotsResponse::CopyFrom(const ListSnapshotsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.ListSnapshotsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSnapshotsResponse::IsInitialized() const {
  return true;
}

void ListSnapshotsResponse::InternalSwap(ListSnapshotsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  snapshots_.InternalSwap(&other->snapshots_);
  next_page_token_.Swap(&other->next_page_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSnapshotsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteSnapshotRequest::InitAsDefaultInstance() {
}
class DeleteSnapshotRequest::_Internal {
 public:
};

DeleteSnapshotRequest::DeleteSnapshotRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.DeleteSnapshotRequest)
}
DeleteSnapshotRequest::DeleteSnapshotRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.DeleteSnapshotRequest)
}
DeleteSnapshotRequest::DeleteSnapshotRequest(const DeleteSnapshotRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  snapshot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_snapshot().empty()) {
    snapshot_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_snapshot(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.DeleteSnapshotRequest)
}

void DeleteSnapshotRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  snapshot_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteSnapshotRequest::~DeleteSnapshotRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.DeleteSnapshotRequest)
  SharedDtor();
}

void DeleteSnapshotRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  snapshot_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteSnapshotRequest::ArenaDtor(void* object) {
  DeleteSnapshotRequest* _this = reinterpret_cast< DeleteSnapshotRequest* >(object);
  (void)_this;
}
void DeleteSnapshotRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteSnapshotRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteSnapshotRequest& DeleteSnapshotRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteSnapshotRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void DeleteSnapshotRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.DeleteSnapshotRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  snapshot_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

const char* DeleteSnapshotRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string snapshot = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_snapshot(), ptr, ctx, "google.pubsub.v1.DeleteSnapshotRequest.snapshot");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteSnapshotRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.DeleteSnapshotRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string snapshot = 1;
  if (this->snapshot().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_snapshot().data(), static_cast<int>(this->_internal_snapshot().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.DeleteSnapshotRequest.snapshot");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_snapshot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.DeleteSnapshotRequest)
  return target;
}

size_t DeleteSnapshotRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.DeleteSnapshotRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string snapshot = 1;
  if (this->snapshot().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_snapshot());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteSnapshotRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.DeleteSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteSnapshotRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteSnapshotRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.DeleteSnapshotRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.DeleteSnapshotRequest)
    MergeFrom(*source);
  }
}

void DeleteSnapshotRequest::MergeFrom(const DeleteSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.DeleteSnapshotRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.snapshot().size() > 0) {
    _internal_set_snapshot(from._internal_snapshot());
  }
}

void DeleteSnapshotRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.DeleteSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteSnapshotRequest::CopyFrom(const DeleteSnapshotRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.DeleteSnapshotRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSnapshotRequest::IsInitialized() const {
  return true;
}

void DeleteSnapshotRequest::InternalSwap(DeleteSnapshotRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  snapshot_.Swap(&other->snapshot_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteSnapshotRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SeekRequest::InitAsDefaultInstance() {
  ::google::pubsub::v1::_SeekRequest_default_instance_.time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::google::pubsub::v1::_SeekRequest_default_instance_.snapshot_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class SeekRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& time(const SeekRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
SeekRequest::_Internal::time(const SeekRequest* msg) {
  return *msg->target_.time_;
}
void SeekRequest::set_allocated_time(PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_target();
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time)->GetArena();
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    set_has_time();
    target_.time_ = time;
  }
  // @@protoc_insertion_point(field_set_allocated:google.pubsub.v1.SeekRequest.time)
}
void SeekRequest::clear_time() {
  if (_internal_has_time()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete target_.time_;
    }
    clear_has_target();
  }
}
SeekRequest::SeekRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.SeekRequest)
}
SeekRequest::SeekRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.SeekRequest)
}
SeekRequest::SeekRequest(const SeekRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subscription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subscription().empty()) {
    subscription_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_subscription(),
      GetArenaNoVirtual());
  }
  clear_has_target();
  switch (from.target_case()) {
    case kTime: {
      _internal_mutable_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time());
      break;
    }
    case kSnapshot: {
      _internal_set_snapshot(from._internal_snapshot());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.SeekRequest)
}

void SeekRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SeekRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  subscription_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_target();
}

SeekRequest::~SeekRequest() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.SeekRequest)
  SharedDtor();
}

void SeekRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  subscription_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_target()) {
    clear_target();
  }
}

void SeekRequest::ArenaDtor(void* object) {
  SeekRequest* _this = reinterpret_cast< SeekRequest* >(object);
  (void)_this;
}
void SeekRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SeekRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SeekRequest& SeekRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SeekRequest_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void SeekRequest::clear_target() {
// @@protoc_insertion_point(one_of_clear_start:google.pubsub.v1.SeekRequest)
  switch (target_case()) {
    case kTime: {
      if (GetArenaNoVirtual() == nullptr) {
        delete target_.time_;
      }
      break;
    }
    case kSnapshot: {
      target_.snapshot_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TARGET_NOT_SET;
}


void SeekRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.SeekRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscription_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_target();
  _internal_metadata_.Clear();
}

const char* SeekRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string subscription = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_subscription(), ptr, ctx, "google.pubsub.v1.SeekRequest.subscription");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string snapshot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_snapshot(), ptr, ctx, "google.pubsub.v1.SeekRequest.snapshot");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SeekRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.SeekRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription = 1;
  if (this->subscription().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subscription().data(), static_cast<int>(this->_internal_subscription().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.SeekRequest.subscription");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subscription(), target);
  }

  // .google.protobuf.Timestamp time = 2;
  if (_internal_has_time()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::time(this), target, stream);
  }

  // string snapshot = 3;
  if (_internal_has_snapshot()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_snapshot().data(), static_cast<int>(this->_internal_snapshot().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.pubsub.v1.SeekRequest.snapshot");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_snapshot(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.SeekRequest)
  return target;
}

size_t SeekRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.SeekRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subscription = 1;
  if (this->subscription().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subscription());
  }

  switch (target_case()) {
    // .google.protobuf.Timestamp time = 2;
    case kTime: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *target_.time_);
      break;
    }
    // string snapshot = 3;
    case kSnapshot: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_snapshot());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SeekRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.SeekRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SeekRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SeekRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.SeekRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.SeekRequest)
    MergeFrom(*source);
  }
}

void SeekRequest::MergeFrom(const SeekRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.SeekRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.subscription().size() > 0) {
    _internal_set_subscription(from._internal_subscription());
  }
  switch (from.target_case()) {
    case kTime: {
      _internal_mutable_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time());
      break;
    }
    case kSnapshot: {
      _internal_set_snapshot(from._internal_snapshot());
      break;
    }
    case TARGET_NOT_SET: {
      break;
    }
  }
}

void SeekRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.SeekRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeekRequest::CopyFrom(const SeekRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.SeekRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeekRequest::IsInitialized() const {
  return true;
}

void SeekRequest::InternalSwap(SeekRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  subscription_.Swap(&other->subscription_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(target_, other->target_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SeekRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SeekResponse::InitAsDefaultInstance() {
}
class SeekResponse::_Internal {
 public:
};

SeekResponse::SeekResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.pubsub.v1.SeekResponse)
}
SeekResponse::SeekResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.pubsub.v1.SeekResponse)
}
SeekResponse::SeekResponse(const SeekResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.pubsub.v1.SeekResponse)
}

void SeekResponse::SharedCtor() {
}

SeekResponse::~SeekResponse() {
  // @@protoc_insertion_point(destructor:google.pubsub.v1.SeekResponse)
  SharedDtor();
}

void SeekResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void SeekResponse::ArenaDtor(void* object) {
  SeekResponse* _this = reinterpret_cast< SeekResponse* >(object);
  (void)_this;
}
void SeekResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SeekResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SeekResponse& SeekResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SeekResponse_google_2fpubsub_2fv1_2fpubsub_2eproto.base);
  return *internal_default_instance();
}


void SeekResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.pubsub.v1.SeekResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* SeekResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SeekResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.pubsub.v1.SeekResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.pubsub.v1.SeekResponse)
  return target;
}

size_t SeekResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.pubsub.v1.SeekResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SeekResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.pubsub.v1.SeekResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SeekResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SeekResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.pubsub.v1.SeekResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.pubsub.v1.SeekResponse)
    MergeFrom(*source);
  }
}

void SeekResponse::MergeFrom(const SeekResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.pubsub.v1.SeekResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SeekResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.pubsub.v1.SeekResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeekResponse::CopyFrom(const SeekResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.pubsub.v1.SeekResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeekResponse::IsInitialized() const {
  return true;
}

void SeekResponse::InternalSwap(SeekResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SeekResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace pubsub
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::MessageStoragePolicy* Arena::CreateMaybeMessage< ::google::pubsub::v1::MessageStoragePolicy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::MessageStoragePolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::Topic_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::google::pubsub::v1::Topic_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::Topic_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::Topic* Arena::CreateMaybeMessage< ::google::pubsub::v1::Topic >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::Topic >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::PubsubMessage_AttributesEntry_DoNotUse* Arena::CreateMaybeMessage< ::google::pubsub::v1::PubsubMessage_AttributesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::PubsubMessage_AttributesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::PubsubMessage* Arena::CreateMaybeMessage< ::google::pubsub::v1::PubsubMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::PubsubMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::GetTopicRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::GetTopicRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::GetTopicRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::UpdateTopicRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::UpdateTopicRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::UpdateTopicRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::PublishRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::PublishRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::PublishRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::PublishResponse* Arena::CreateMaybeMessage< ::google::pubsub::v1::PublishResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::PublishResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::ListTopicsRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::ListTopicsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::ListTopicsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::ListTopicsResponse* Arena::CreateMaybeMessage< ::google::pubsub::v1::ListTopicsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::ListTopicsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::ListTopicSubscriptionsRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::ListTopicSubscriptionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::ListTopicSubscriptionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::ListTopicSubscriptionsResponse* Arena::CreateMaybeMessage< ::google::pubsub::v1::ListTopicSubscriptionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::ListTopicSubscriptionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::ListTopicSnapshotsRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::ListTopicSnapshotsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::ListTopicSnapshotsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::ListTopicSnapshotsResponse* Arena::CreateMaybeMessage< ::google::pubsub::v1::ListTopicSnapshotsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::ListTopicSnapshotsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::DeleteTopicRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::DeleteTopicRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::DeleteTopicRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::Subscription_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::google::pubsub::v1::Subscription_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::Subscription_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::Subscription* Arena::CreateMaybeMessage< ::google::pubsub::v1::Subscription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::Subscription >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::DeadLetterPolicy* Arena::CreateMaybeMessage< ::google::pubsub::v1::DeadLetterPolicy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::DeadLetterPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::ExpirationPolicy* Arena::CreateMaybeMessage< ::google::pubsub::v1::ExpirationPolicy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::ExpirationPolicy >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::PushConfig_OidcToken* Arena::CreateMaybeMessage< ::google::pubsub::v1::PushConfig_OidcToken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::PushConfig_OidcToken >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::PushConfig_AttributesEntry_DoNotUse* Arena::CreateMaybeMessage< ::google::pubsub::v1::PushConfig_AttributesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::PushConfig_AttributesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::PushConfig* Arena::CreateMaybeMessage< ::google::pubsub::v1::PushConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::PushConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::ReceivedMessage* Arena::CreateMaybeMessage< ::google::pubsub::v1::ReceivedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::ReceivedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::GetSubscriptionRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::GetSubscriptionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::GetSubscriptionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::UpdateSubscriptionRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::UpdateSubscriptionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::UpdateSubscriptionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::ListSubscriptionsRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::ListSubscriptionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::ListSubscriptionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::ListSubscriptionsResponse* Arena::CreateMaybeMessage< ::google::pubsub::v1::ListSubscriptionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::ListSubscriptionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::DeleteSubscriptionRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::DeleteSubscriptionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::DeleteSubscriptionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::ModifyPushConfigRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::ModifyPushConfigRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::ModifyPushConfigRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::PullRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::PullRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::PullRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::PullResponse* Arena::CreateMaybeMessage< ::google::pubsub::v1::PullResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::PullResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::ModifyAckDeadlineRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::ModifyAckDeadlineRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::ModifyAckDeadlineRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::AcknowledgeRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::AcknowledgeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::AcknowledgeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::StreamingPullRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::StreamingPullRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::StreamingPullRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::StreamingPullResponse* Arena::CreateMaybeMessage< ::google::pubsub::v1::StreamingPullResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::StreamingPullResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::CreateSnapshotRequest_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::google::pubsub::v1::CreateSnapshotRequest_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::CreateSnapshotRequest_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::CreateSnapshotRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::CreateSnapshotRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::CreateSnapshotRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::UpdateSnapshotRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::UpdateSnapshotRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::UpdateSnapshotRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::Snapshot_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::google::pubsub::v1::Snapshot_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::Snapshot_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::Snapshot* Arena::CreateMaybeMessage< ::google::pubsub::v1::Snapshot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::Snapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::GetSnapshotRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::GetSnapshotRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::GetSnapshotRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::ListSnapshotsRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::ListSnapshotsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::ListSnapshotsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::ListSnapshotsResponse* Arena::CreateMaybeMessage< ::google::pubsub::v1::ListSnapshotsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::ListSnapshotsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::DeleteSnapshotRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::DeleteSnapshotRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::DeleteSnapshotRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::SeekRequest* Arena::CreateMaybeMessage< ::google::pubsub::v1::SeekRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::SeekRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::pubsub::v1::SeekResponse* Arena::CreateMaybeMessage< ::google::pubsub::v1::SeekResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::pubsub::v1::SeekResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
