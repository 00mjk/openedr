// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/servicecontrol/v1/distribution.proto

#include "google/api/servicecontrol/v1/distribution.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Distribution_ExplicitBuckets_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Distribution_ExponentialBuckets_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Distribution_LinearBuckets_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto;
namespace google {
namespace api {
namespace servicecontrol {
namespace v1 {
class Distribution_LinearBucketsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Distribution_LinearBuckets> _instance;
} _Distribution_LinearBuckets_default_instance_;
class Distribution_ExponentialBucketsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Distribution_ExponentialBuckets> _instance;
} _Distribution_ExponentialBuckets_default_instance_;
class Distribution_ExplicitBucketsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Distribution_ExplicitBuckets> _instance;
} _Distribution_ExplicitBuckets_default_instance_;
class DistributionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Distribution> _instance;
  const ::google::api::servicecontrol::v1::Distribution_LinearBuckets* linear_buckets_;
  const ::google::api::servicecontrol::v1::Distribution_ExponentialBuckets* exponential_buckets_;
  const ::google::api::servicecontrol::v1::Distribution_ExplicitBuckets* explicit_buckets_;
} _Distribution_default_instance_;
}  // namespace v1
}  // namespace servicecontrol
}  // namespace api
}  // namespace google
static void InitDefaultsscc_info_Distribution_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::api::servicecontrol::v1::_Distribution_default_instance_;
    new (ptr) ::google::api::servicecontrol::v1::Distribution();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::api::servicecontrol::v1::Distribution::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_Distribution_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_Distribution_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto}, {
      &scc_info_Distribution_LinearBuckets_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto.base,
      &scc_info_Distribution_ExponentialBuckets_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto.base,
      &scc_info_Distribution_ExplicitBuckets_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto.base,}};

static void InitDefaultsscc_info_Distribution_ExplicitBuckets_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::api::servicecontrol::v1::_Distribution_ExplicitBuckets_default_instance_;
    new (ptr) ::google::api::servicecontrol::v1::Distribution_ExplicitBuckets();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::api::servicecontrol::v1::Distribution_ExplicitBuckets::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Distribution_ExplicitBuckets_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Distribution_ExplicitBuckets_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto}, {}};

static void InitDefaultsscc_info_Distribution_ExponentialBuckets_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::api::servicecontrol::v1::_Distribution_ExponentialBuckets_default_instance_;
    new (ptr) ::google::api::servicecontrol::v1::Distribution_ExponentialBuckets();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::api::servicecontrol::v1::Distribution_ExponentialBuckets::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Distribution_ExponentialBuckets_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Distribution_ExponentialBuckets_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto}, {}};

static void InitDefaultsscc_info_Distribution_LinearBuckets_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::api::servicecontrol::v1::_Distribution_LinearBuckets_default_instance_;
    new (ptr) ::google::api::servicecontrol::v1::Distribution_LinearBuckets();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::api::servicecontrol::v1::Distribution_LinearBuckets::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Distribution_LinearBuckets_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Distribution_LinearBuckets_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::Distribution_LinearBuckets, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::Distribution_LinearBuckets, num_finite_buckets_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::Distribution_LinearBuckets, width_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::Distribution_LinearBuckets, offset_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::Distribution_ExponentialBuckets, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::Distribution_ExponentialBuckets, num_finite_buckets_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::Distribution_ExponentialBuckets, growth_factor_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::Distribution_ExponentialBuckets, scale_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::Distribution_ExplicitBuckets, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::Distribution_ExplicitBuckets, bounds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::Distribution, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::Distribution, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::Distribution, count_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::Distribution, mean_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::Distribution, minimum_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::Distribution, maximum_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::Distribution, sum_of_squared_deviation_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::Distribution, bucket_counts_),
  offsetof(::google::api::servicecontrol::v1::DistributionDefaultTypeInternal, linear_buckets_),
  offsetof(::google::api::servicecontrol::v1::DistributionDefaultTypeInternal, exponential_buckets_),
  offsetof(::google::api::servicecontrol::v1::DistributionDefaultTypeInternal, explicit_buckets_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::Distribution, bucket_option_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::api::servicecontrol::v1::Distribution_LinearBuckets)},
  { 8, -1, sizeof(::google::api::servicecontrol::v1::Distribution_ExponentialBuckets)},
  { 16, -1, sizeof(::google::api::servicecontrol::v1::Distribution_ExplicitBuckets)},
  { 22, -1, sizeof(::google::api::servicecontrol::v1::Distribution)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::servicecontrol::v1::_Distribution_LinearBuckets_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::servicecontrol::v1::_Distribution_ExponentialBuckets_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::servicecontrol::v1::_Distribution_ExplicitBuckets_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::servicecontrol::v1::_Distribution_default_instance_),
};

const char descriptor_table_protodef_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n/google/api/servicecontrol/v1/distribut"
  "ion.proto\022\034google.api.servicecontrol.v1\""
  "\350\004\n\014Distribution\022\r\n\005count\030\001 \001(\003\022\014\n\004mean\030"
  "\002 \001(\001\022\017\n\007minimum\030\003 \001(\001\022\017\n\007maximum\030\004 \001(\001\022"
  " \n\030sum_of_squared_deviation\030\005 \001(\001\022\025\n\rbuc"
  "ket_counts\030\006 \003(\003\022R\n\016linear_buckets\030\007 \001(\013"
  "28.google.api.servicecontrol.v1.Distribu"
  "tion.LinearBucketsH\000\022\\\n\023exponential_buck"
  "ets\030\010 \001(\0132=.google.api.servicecontrol.v1"
  ".Distribution.ExponentialBucketsH\000\022V\n\020ex"
  "plicit_buckets\030\t \001(\0132:.google.api.servic"
  "econtrol.v1.Distribution.ExplicitBuckets"
  "H\000\032J\n\rLinearBuckets\022\032\n\022num_finite_bucket"
  "s\030\001 \001(\005\022\r\n\005width\030\002 \001(\001\022\016\n\006offset\030\003 \001(\001\032V"
  "\n\022ExponentialBuckets\022\032\n\022num_finite_bucke"
  "ts\030\001 \001(\005\022\025\n\rgrowth_factor\030\002 \001(\001\022\r\n\005scale"
  "\030\003 \001(\001\032!\n\017ExplicitBuckets\022\016\n\006bounds\030\001 \003("
  "\001B\017\n\rbucket_optionB\206\001\n com.google.api.se"
  "rvicecontrol.v1B\021DistributionProtoP\001ZJgo"
  "ogle.golang.org/genproto/googleapis/api/"
  "servicecontrol/v1;servicecontrol\370\001\001b\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto_sccs[4] = {
  &scc_info_Distribution_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto.base,
  &scc_info_Distribution_ExplicitBuckets_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto.base,
  &scc_info_Distribution_ExponentialBuckets_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto.base,
  &scc_info_Distribution_LinearBuckets_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto_once;
static bool descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto = {
  &descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto_initialized, descriptor_table_protodef_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto, "google/api/servicecontrol/v1/distribution.proto", 843,
  &descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto_once, descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto_sccs, descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto::offsets,
  file_level_metadata_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto, 4, file_level_enum_descriptors_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto, file_level_service_descriptors_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto), true);
namespace google {
namespace api {
namespace servicecontrol {
namespace v1 {

// ===================================================================

void Distribution_LinearBuckets::InitAsDefaultInstance() {
}
class Distribution_LinearBuckets::_Internal {
 public:
};

Distribution_LinearBuckets::Distribution_LinearBuckets()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicecontrol.v1.Distribution.LinearBuckets)
}
Distribution_LinearBuckets::Distribution_LinearBuckets(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.api.servicecontrol.v1.Distribution.LinearBuckets)
}
Distribution_LinearBuckets::Distribution_LinearBuckets(const Distribution_LinearBuckets& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_finite_buckets_) -
    reinterpret_cast<char*>(&width_)) + sizeof(num_finite_buckets_));
  // @@protoc_insertion_point(copy_constructor:google.api.servicecontrol.v1.Distribution.LinearBuckets)
}

void Distribution_LinearBuckets::SharedCtor() {
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_finite_buckets_) -
      reinterpret_cast<char*>(&width_)) + sizeof(num_finite_buckets_));
}

Distribution_LinearBuckets::~Distribution_LinearBuckets() {
  // @@protoc_insertion_point(destructor:google.api.servicecontrol.v1.Distribution.LinearBuckets)
  SharedDtor();
}

void Distribution_LinearBuckets::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void Distribution_LinearBuckets::ArenaDtor(void* object) {
  Distribution_LinearBuckets* _this = reinterpret_cast< Distribution_LinearBuckets* >(object);
  (void)_this;
}
void Distribution_LinearBuckets::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Distribution_LinearBuckets::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Distribution_LinearBuckets& Distribution_LinearBuckets::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Distribution_LinearBuckets_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto.base);
  return *internal_default_instance();
}


void Distribution_LinearBuckets::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicecontrol.v1.Distribution.LinearBuckets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_finite_buckets_) -
      reinterpret_cast<char*>(&width_)) + sizeof(num_finite_buckets_));
  _internal_metadata_.Clear();
}

const char* Distribution_LinearBuckets::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 num_finite_buckets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_finite_buckets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          offset_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Distribution_LinearBuckets::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicecontrol.v1.Distribution.LinearBuckets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_finite_buckets = 1;
  if (this->num_finite_buckets() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num_finite_buckets(), target);
  }

  // double width = 2;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_width(), target);
  }

  // double offset = 3;
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_offset(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicecontrol.v1.Distribution.LinearBuckets)
  return target;
}

size_t Distribution_LinearBuckets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicecontrol.v1.Distribution.LinearBuckets)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double width = 2;
  if (!(this->width() <= 0 && this->width() >= 0)) {
    total_size += 1 + 8;
  }

  // double offset = 3;
  if (!(this->offset() <= 0 && this->offset() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 num_finite_buckets = 1;
  if (this->num_finite_buckets() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_finite_buckets());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Distribution_LinearBuckets::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicecontrol.v1.Distribution.LinearBuckets)
  GOOGLE_DCHECK_NE(&from, this);
  const Distribution_LinearBuckets* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Distribution_LinearBuckets>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicecontrol.v1.Distribution.LinearBuckets)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicecontrol.v1.Distribution.LinearBuckets)
    MergeFrom(*source);
  }
}

void Distribution_LinearBuckets::MergeFrom(const Distribution_LinearBuckets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicecontrol.v1.Distribution.LinearBuckets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.width() <= 0 && from.width() >= 0)) {
    _internal_set_width(from._internal_width());
  }
  if (!(from.offset() <= 0 && from.offset() >= 0)) {
    _internal_set_offset(from._internal_offset());
  }
  if (from.num_finite_buckets() != 0) {
    _internal_set_num_finite_buckets(from._internal_num_finite_buckets());
  }
}

void Distribution_LinearBuckets::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicecontrol.v1.Distribution.LinearBuckets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Distribution_LinearBuckets::CopyFrom(const Distribution_LinearBuckets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicecontrol.v1.Distribution.LinearBuckets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Distribution_LinearBuckets::IsInitialized() const {
  return true;
}

void Distribution_LinearBuckets::InternalSwap(Distribution_LinearBuckets* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(width_, other->width_);
  swap(offset_, other->offset_);
  swap(num_finite_buckets_, other->num_finite_buckets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Distribution_LinearBuckets::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Distribution_ExponentialBuckets::InitAsDefaultInstance() {
}
class Distribution_ExponentialBuckets::_Internal {
 public:
};

Distribution_ExponentialBuckets::Distribution_ExponentialBuckets()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicecontrol.v1.Distribution.ExponentialBuckets)
}
Distribution_ExponentialBuckets::Distribution_ExponentialBuckets(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.api.servicecontrol.v1.Distribution.ExponentialBuckets)
}
Distribution_ExponentialBuckets::Distribution_ExponentialBuckets(const Distribution_ExponentialBuckets& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&growth_factor_, &from.growth_factor_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_finite_buckets_) -
    reinterpret_cast<char*>(&growth_factor_)) + sizeof(num_finite_buckets_));
  // @@protoc_insertion_point(copy_constructor:google.api.servicecontrol.v1.Distribution.ExponentialBuckets)
}

void Distribution_ExponentialBuckets::SharedCtor() {
  ::memset(&growth_factor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_finite_buckets_) -
      reinterpret_cast<char*>(&growth_factor_)) + sizeof(num_finite_buckets_));
}

Distribution_ExponentialBuckets::~Distribution_ExponentialBuckets() {
  // @@protoc_insertion_point(destructor:google.api.servicecontrol.v1.Distribution.ExponentialBuckets)
  SharedDtor();
}

void Distribution_ExponentialBuckets::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void Distribution_ExponentialBuckets::ArenaDtor(void* object) {
  Distribution_ExponentialBuckets* _this = reinterpret_cast< Distribution_ExponentialBuckets* >(object);
  (void)_this;
}
void Distribution_ExponentialBuckets::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Distribution_ExponentialBuckets::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Distribution_ExponentialBuckets& Distribution_ExponentialBuckets::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Distribution_ExponentialBuckets_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto.base);
  return *internal_default_instance();
}


void Distribution_ExponentialBuckets::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicecontrol.v1.Distribution.ExponentialBuckets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&growth_factor_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_finite_buckets_) -
      reinterpret_cast<char*>(&growth_factor_)) + sizeof(num_finite_buckets_));
  _internal_metadata_.Clear();
}

const char* Distribution_ExponentialBuckets::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 num_finite_buckets = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          num_finite_buckets_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double growth_factor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          growth_factor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double scale = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Distribution_ExponentialBuckets::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicecontrol.v1.Distribution.ExponentialBuckets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 num_finite_buckets = 1;
  if (this->num_finite_buckets() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_num_finite_buckets(), target);
  }

  // double growth_factor = 2;
  if (!(this->growth_factor() <= 0 && this->growth_factor() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_growth_factor(), target);
  }

  // double scale = 3;
  if (!(this->scale() <= 0 && this->scale() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicecontrol.v1.Distribution.ExponentialBuckets)
  return target;
}

size_t Distribution_ExponentialBuckets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicecontrol.v1.Distribution.ExponentialBuckets)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double growth_factor = 2;
  if (!(this->growth_factor() <= 0 && this->growth_factor() >= 0)) {
    total_size += 1 + 8;
  }

  // double scale = 3;
  if (!(this->scale() <= 0 && this->scale() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 num_finite_buckets = 1;
  if (this->num_finite_buckets() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_num_finite_buckets());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Distribution_ExponentialBuckets::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicecontrol.v1.Distribution.ExponentialBuckets)
  GOOGLE_DCHECK_NE(&from, this);
  const Distribution_ExponentialBuckets* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Distribution_ExponentialBuckets>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicecontrol.v1.Distribution.ExponentialBuckets)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicecontrol.v1.Distribution.ExponentialBuckets)
    MergeFrom(*source);
  }
}

void Distribution_ExponentialBuckets::MergeFrom(const Distribution_ExponentialBuckets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicecontrol.v1.Distribution.ExponentialBuckets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.growth_factor() <= 0 && from.growth_factor() >= 0)) {
    _internal_set_growth_factor(from._internal_growth_factor());
  }
  if (!(from.scale() <= 0 && from.scale() >= 0)) {
    _internal_set_scale(from._internal_scale());
  }
  if (from.num_finite_buckets() != 0) {
    _internal_set_num_finite_buckets(from._internal_num_finite_buckets());
  }
}

void Distribution_ExponentialBuckets::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicecontrol.v1.Distribution.ExponentialBuckets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Distribution_ExponentialBuckets::CopyFrom(const Distribution_ExponentialBuckets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicecontrol.v1.Distribution.ExponentialBuckets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Distribution_ExponentialBuckets::IsInitialized() const {
  return true;
}

void Distribution_ExponentialBuckets::InternalSwap(Distribution_ExponentialBuckets* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(growth_factor_, other->growth_factor_);
  swap(scale_, other->scale_);
  swap(num_finite_buckets_, other->num_finite_buckets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Distribution_ExponentialBuckets::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Distribution_ExplicitBuckets::InitAsDefaultInstance() {
}
class Distribution_ExplicitBuckets::_Internal {
 public:
};

Distribution_ExplicitBuckets::Distribution_ExplicitBuckets()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicecontrol.v1.Distribution.ExplicitBuckets)
}
Distribution_ExplicitBuckets::Distribution_ExplicitBuckets(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  bounds_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.api.servicecontrol.v1.Distribution.ExplicitBuckets)
}
Distribution_ExplicitBuckets::Distribution_ExplicitBuckets(const Distribution_ExplicitBuckets& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      bounds_(from.bounds_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.api.servicecontrol.v1.Distribution.ExplicitBuckets)
}

void Distribution_ExplicitBuckets::SharedCtor() {
}

Distribution_ExplicitBuckets::~Distribution_ExplicitBuckets() {
  // @@protoc_insertion_point(destructor:google.api.servicecontrol.v1.Distribution.ExplicitBuckets)
  SharedDtor();
}

void Distribution_ExplicitBuckets::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void Distribution_ExplicitBuckets::ArenaDtor(void* object) {
  Distribution_ExplicitBuckets* _this = reinterpret_cast< Distribution_ExplicitBuckets* >(object);
  (void)_this;
}
void Distribution_ExplicitBuckets::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Distribution_ExplicitBuckets::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Distribution_ExplicitBuckets& Distribution_ExplicitBuckets::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Distribution_ExplicitBuckets_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto.base);
  return *internal_default_instance();
}


void Distribution_ExplicitBuckets::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicecontrol.v1.Distribution.ExplicitBuckets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bounds_.Clear();
  _internal_metadata_.Clear();
}

const char* Distribution_ExplicitBuckets::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated double bounds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_bounds(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9) {
          _internal_add_bounds(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Distribution_ExplicitBuckets::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicecontrol.v1.Distribution.ExplicitBuckets)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated double bounds = 1;
  if (this->_internal_bounds_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_bounds(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicecontrol.v1.Distribution.ExplicitBuckets)
  return target;
}

size_t Distribution_ExplicitBuckets::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicecontrol.v1.Distribution.ExplicitBuckets)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double bounds = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bounds_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bounds_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Distribution_ExplicitBuckets::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicecontrol.v1.Distribution.ExplicitBuckets)
  GOOGLE_DCHECK_NE(&from, this);
  const Distribution_ExplicitBuckets* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Distribution_ExplicitBuckets>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicecontrol.v1.Distribution.ExplicitBuckets)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicecontrol.v1.Distribution.ExplicitBuckets)
    MergeFrom(*source);
  }
}

void Distribution_ExplicitBuckets::MergeFrom(const Distribution_ExplicitBuckets& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicecontrol.v1.Distribution.ExplicitBuckets)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bounds_.MergeFrom(from.bounds_);
}

void Distribution_ExplicitBuckets::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicecontrol.v1.Distribution.ExplicitBuckets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Distribution_ExplicitBuckets::CopyFrom(const Distribution_ExplicitBuckets& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicecontrol.v1.Distribution.ExplicitBuckets)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Distribution_ExplicitBuckets::IsInitialized() const {
  return true;
}

void Distribution_ExplicitBuckets::InternalSwap(Distribution_ExplicitBuckets* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bounds_.InternalSwap(&other->bounds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Distribution_ExplicitBuckets::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Distribution::InitAsDefaultInstance() {
  ::google::api::servicecontrol::v1::_Distribution_default_instance_.linear_buckets_ = const_cast< ::google::api::servicecontrol::v1::Distribution_LinearBuckets*>(
      ::google::api::servicecontrol::v1::Distribution_LinearBuckets::internal_default_instance());
  ::google::api::servicecontrol::v1::_Distribution_default_instance_.exponential_buckets_ = const_cast< ::google::api::servicecontrol::v1::Distribution_ExponentialBuckets*>(
      ::google::api::servicecontrol::v1::Distribution_ExponentialBuckets::internal_default_instance());
  ::google::api::servicecontrol::v1::_Distribution_default_instance_.explicit_buckets_ = const_cast< ::google::api::servicecontrol::v1::Distribution_ExplicitBuckets*>(
      ::google::api::servicecontrol::v1::Distribution_ExplicitBuckets::internal_default_instance());
}
class Distribution::_Internal {
 public:
  static const ::google::api::servicecontrol::v1::Distribution_LinearBuckets& linear_buckets(const Distribution* msg);
  static const ::google::api::servicecontrol::v1::Distribution_ExponentialBuckets& exponential_buckets(const Distribution* msg);
  static const ::google::api::servicecontrol::v1::Distribution_ExplicitBuckets& explicit_buckets(const Distribution* msg);
};

const ::google::api::servicecontrol::v1::Distribution_LinearBuckets&
Distribution::_Internal::linear_buckets(const Distribution* msg) {
  return *msg->bucket_option_.linear_buckets_;
}
const ::google::api::servicecontrol::v1::Distribution_ExponentialBuckets&
Distribution::_Internal::exponential_buckets(const Distribution* msg) {
  return *msg->bucket_option_.exponential_buckets_;
}
const ::google::api::servicecontrol::v1::Distribution_ExplicitBuckets&
Distribution::_Internal::explicit_buckets(const Distribution* msg) {
  return *msg->bucket_option_.explicit_buckets_;
}
void Distribution::set_allocated_linear_buckets(::google::api::servicecontrol::v1::Distribution_LinearBuckets* linear_buckets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_bucket_option();
  if (linear_buckets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(linear_buckets);
    if (message_arena != submessage_arena) {
      linear_buckets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, linear_buckets, submessage_arena);
    }
    set_has_linear_buckets();
    bucket_option_.linear_buckets_ = linear_buckets;
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.Distribution.linear_buckets)
}
void Distribution::set_allocated_exponential_buckets(::google::api::servicecontrol::v1::Distribution_ExponentialBuckets* exponential_buckets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_bucket_option();
  if (exponential_buckets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(exponential_buckets);
    if (message_arena != submessage_arena) {
      exponential_buckets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exponential_buckets, submessage_arena);
    }
    set_has_exponential_buckets();
    bucket_option_.exponential_buckets_ = exponential_buckets;
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.Distribution.exponential_buckets)
}
void Distribution::set_allocated_explicit_buckets(::google::api::servicecontrol::v1::Distribution_ExplicitBuckets* explicit_buckets) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_bucket_option();
  if (explicit_buckets) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(explicit_buckets);
    if (message_arena != submessage_arena) {
      explicit_buckets = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, explicit_buckets, submessage_arena);
    }
    set_has_explicit_buckets();
    bucket_option_.explicit_buckets_ = explicit_buckets;
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.Distribution.explicit_buckets)
}
Distribution::Distribution()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicecontrol.v1.Distribution)
}
Distribution::Distribution(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  bucket_counts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.api.servicecontrol.v1.Distribution)
}
Distribution::Distribution(const Distribution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      bucket_counts_(from.bucket_counts_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&count_, &from.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&sum_of_squared_deviation_) -
    reinterpret_cast<char*>(&count_)) + sizeof(sum_of_squared_deviation_));
  clear_has_bucket_option();
  switch (from.bucket_option_case()) {
    case kLinearBuckets: {
      _internal_mutable_linear_buckets()->::google::api::servicecontrol::v1::Distribution_LinearBuckets::MergeFrom(from._internal_linear_buckets());
      break;
    }
    case kExponentialBuckets: {
      _internal_mutable_exponential_buckets()->::google::api::servicecontrol::v1::Distribution_ExponentialBuckets::MergeFrom(from._internal_exponential_buckets());
      break;
    }
    case kExplicitBuckets: {
      _internal_mutable_explicit_buckets()->::google::api::servicecontrol::v1::Distribution_ExplicitBuckets::MergeFrom(from._internal_explicit_buckets());
      break;
    }
    case BUCKET_OPTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.api.servicecontrol.v1.Distribution)
}

void Distribution::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Distribution_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto.base);
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sum_of_squared_deviation_) -
      reinterpret_cast<char*>(&count_)) + sizeof(sum_of_squared_deviation_));
  clear_has_bucket_option();
}

Distribution::~Distribution() {
  // @@protoc_insertion_point(destructor:google.api.servicecontrol.v1.Distribution)
  SharedDtor();
}

void Distribution::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (has_bucket_option()) {
    clear_bucket_option();
  }
}

void Distribution::ArenaDtor(void* object) {
  Distribution* _this = reinterpret_cast< Distribution* >(object);
  (void)_this;
}
void Distribution::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Distribution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Distribution& Distribution::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Distribution_google_2fapi_2fservicecontrol_2fv1_2fdistribution_2eproto.base);
  return *internal_default_instance();
}


void Distribution::clear_bucket_option() {
// @@protoc_insertion_point(one_of_clear_start:google.api.servicecontrol.v1.Distribution)
  switch (bucket_option_case()) {
    case kLinearBuckets: {
      if (GetArenaNoVirtual() == nullptr) {
        delete bucket_option_.linear_buckets_;
      }
      break;
    }
    case kExponentialBuckets: {
      if (GetArenaNoVirtual() == nullptr) {
        delete bucket_option_.exponential_buckets_;
      }
      break;
    }
    case kExplicitBuckets: {
      if (GetArenaNoVirtual() == nullptr) {
        delete bucket_option_.explicit_buckets_;
      }
      break;
    }
    case BUCKET_OPTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BUCKET_OPTION_NOT_SET;
}


void Distribution::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicecontrol.v1.Distribution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bucket_counts_.Clear();
  ::memset(&count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sum_of_squared_deviation_) -
      reinterpret_cast<char*>(&count_)) + sizeof(sum_of_squared_deviation_));
  clear_bucket_option();
  _internal_metadata_.Clear();
}

const char* Distribution::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double mean = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          mean_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double minimum = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          minimum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double maximum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          maximum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double sum_of_squared_deviation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          sum_of_squared_deviation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated int64 bucket_counts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_bucket_counts(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48) {
          _internal_add_bucket_counts(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.api.servicecontrol.v1.Distribution.LinearBuckets linear_buckets = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear_buckets(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.api.servicecontrol.v1.Distribution.ExponentialBuckets exponential_buckets = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_exponential_buckets(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.api.servicecontrol.v1.Distribution.ExplicitBuckets explicit_buckets = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_explicit_buckets(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Distribution::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicecontrol.v1.Distribution)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 count = 1;
  if (this->count() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_count(), target);
  }

  // double mean = 2;
  if (!(this->mean() <= 0 && this->mean() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_mean(), target);
  }

  // double minimum = 3;
  if (!(this->minimum() <= 0 && this->minimum() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_minimum(), target);
  }

  // double maximum = 4;
  if (!(this->maximum() <= 0 && this->maximum() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_maximum(), target);
  }

  // double sum_of_squared_deviation = 5;
  if (!(this->sum_of_squared_deviation() <= 0 && this->sum_of_squared_deviation() >= 0)) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_sum_of_squared_deviation(), target);
  }

  // repeated int64 bucket_counts = 6;
  {
    int byte_size = _bucket_counts_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          6, _internal_bucket_counts(), byte_size, target);
    }
  }

  // .google.api.servicecontrol.v1.Distribution.LinearBuckets linear_buckets = 7;
  if (_internal_has_linear_buckets()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::linear_buckets(this), target, stream);
  }

  // .google.api.servicecontrol.v1.Distribution.ExponentialBuckets exponential_buckets = 8;
  if (_internal_has_exponential_buckets()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::exponential_buckets(this), target, stream);
  }

  // .google.api.servicecontrol.v1.Distribution.ExplicitBuckets explicit_buckets = 9;
  if (_internal_has_explicit_buckets()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::explicit_buckets(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicecontrol.v1.Distribution)
  return target;
}

size_t Distribution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicecontrol.v1.Distribution)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 bucket_counts = 6;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int64Size(this->bucket_counts_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bucket_counts_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int64 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_count());
  }

  // double mean = 2;
  if (!(this->mean() <= 0 && this->mean() >= 0)) {
    total_size += 1 + 8;
  }

  // double minimum = 3;
  if (!(this->minimum() <= 0 && this->minimum() >= 0)) {
    total_size += 1 + 8;
  }

  // double maximum = 4;
  if (!(this->maximum() <= 0 && this->maximum() >= 0)) {
    total_size += 1 + 8;
  }

  // double sum_of_squared_deviation = 5;
  if (!(this->sum_of_squared_deviation() <= 0 && this->sum_of_squared_deviation() >= 0)) {
    total_size += 1 + 8;
  }

  switch (bucket_option_case()) {
    // .google.api.servicecontrol.v1.Distribution.LinearBuckets linear_buckets = 7;
    case kLinearBuckets: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bucket_option_.linear_buckets_);
      break;
    }
    // .google.api.servicecontrol.v1.Distribution.ExponentialBuckets exponential_buckets = 8;
    case kExponentialBuckets: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bucket_option_.exponential_buckets_);
      break;
    }
    // .google.api.servicecontrol.v1.Distribution.ExplicitBuckets explicit_buckets = 9;
    case kExplicitBuckets: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *bucket_option_.explicit_buckets_);
      break;
    }
    case BUCKET_OPTION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Distribution::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicecontrol.v1.Distribution)
  GOOGLE_DCHECK_NE(&from, this);
  const Distribution* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Distribution>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicecontrol.v1.Distribution)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicecontrol.v1.Distribution)
    MergeFrom(*source);
  }
}

void Distribution::MergeFrom(const Distribution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicecontrol.v1.Distribution)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bucket_counts_.MergeFrom(from.bucket_counts_);
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
  if (!(from.mean() <= 0 && from.mean() >= 0)) {
    _internal_set_mean(from._internal_mean());
  }
  if (!(from.minimum() <= 0 && from.minimum() >= 0)) {
    _internal_set_minimum(from._internal_minimum());
  }
  if (!(from.maximum() <= 0 && from.maximum() >= 0)) {
    _internal_set_maximum(from._internal_maximum());
  }
  if (!(from.sum_of_squared_deviation() <= 0 && from.sum_of_squared_deviation() >= 0)) {
    _internal_set_sum_of_squared_deviation(from._internal_sum_of_squared_deviation());
  }
  switch (from.bucket_option_case()) {
    case kLinearBuckets: {
      _internal_mutable_linear_buckets()->::google::api::servicecontrol::v1::Distribution_LinearBuckets::MergeFrom(from._internal_linear_buckets());
      break;
    }
    case kExponentialBuckets: {
      _internal_mutable_exponential_buckets()->::google::api::servicecontrol::v1::Distribution_ExponentialBuckets::MergeFrom(from._internal_exponential_buckets());
      break;
    }
    case kExplicitBuckets: {
      _internal_mutable_explicit_buckets()->::google::api::servicecontrol::v1::Distribution_ExplicitBuckets::MergeFrom(from._internal_explicit_buckets());
      break;
    }
    case BUCKET_OPTION_NOT_SET: {
      break;
    }
  }
}

void Distribution::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicecontrol.v1.Distribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Distribution::CopyFrom(const Distribution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicecontrol.v1.Distribution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Distribution::IsInitialized() const {
  return true;
}

void Distribution::InternalSwap(Distribution* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  bucket_counts_.InternalSwap(&other->bucket_counts_);
  swap(count_, other->count_);
  swap(mean_, other->mean_);
  swap(minimum_, other->minimum_);
  swap(maximum_, other->maximum_);
  swap(sum_of_squared_deviation_, other->sum_of_squared_deviation_);
  swap(bucket_option_, other->bucket_option_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Distribution::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace servicecontrol
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::google::api::servicecontrol::v1::Distribution_LinearBuckets* Arena::CreateMaybeMessage< ::google::api::servicecontrol::v1::Distribution_LinearBuckets >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::servicecontrol::v1::Distribution_LinearBuckets >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::servicecontrol::v1::Distribution_ExponentialBuckets* Arena::CreateMaybeMessage< ::google::api::servicecontrol::v1::Distribution_ExponentialBuckets >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::servicecontrol::v1::Distribution_ExponentialBuckets >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::servicecontrol::v1::Distribution_ExplicitBuckets* Arena::CreateMaybeMessage< ::google::api::servicecontrol::v1::Distribution_ExplicitBuckets >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::servicecontrol::v1::Distribution_ExplicitBuckets >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::servicecontrol::v1::Distribution* Arena::CreateMaybeMessage< ::google::api::servicecontrol::v1::Distribution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::servicecontrol::v1::Distribution >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
