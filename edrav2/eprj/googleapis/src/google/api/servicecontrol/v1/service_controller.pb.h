// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/servicecontrol/v1/service_controller.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/servicecontrol/v1/check_error.pb.h"
#include "google/api/servicecontrol/v1/operation.pb.h"
#include "google/rpc/status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto;
namespace google {
namespace api {
namespace servicecontrol {
namespace v1 {
class CheckRequest;
class CheckRequestDefaultTypeInternal;
extern CheckRequestDefaultTypeInternal _CheckRequest_default_instance_;
class CheckResponse;
class CheckResponseDefaultTypeInternal;
extern CheckResponseDefaultTypeInternal _CheckResponse_default_instance_;
class CheckResponse_CheckInfo;
class CheckResponse_CheckInfoDefaultTypeInternal;
extern CheckResponse_CheckInfoDefaultTypeInternal _CheckResponse_CheckInfo_default_instance_;
class CheckResponse_ConsumerInfo;
class CheckResponse_ConsumerInfoDefaultTypeInternal;
extern CheckResponse_ConsumerInfoDefaultTypeInternal _CheckResponse_ConsumerInfo_default_instance_;
class ReportRequest;
class ReportRequestDefaultTypeInternal;
extern ReportRequestDefaultTypeInternal _ReportRequest_default_instance_;
class ReportResponse;
class ReportResponseDefaultTypeInternal;
extern ReportResponseDefaultTypeInternal _ReportResponse_default_instance_;
class ReportResponse_ReportError;
class ReportResponse_ReportErrorDefaultTypeInternal;
extern ReportResponse_ReportErrorDefaultTypeInternal _ReportResponse_ReportError_default_instance_;
}  // namespace v1
}  // namespace servicecontrol
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::api::servicecontrol::v1::CheckRequest* Arena::CreateMaybeMessage<::google::api::servicecontrol::v1::CheckRequest>(Arena*);
template<> ::google::api::servicecontrol::v1::CheckResponse* Arena::CreateMaybeMessage<::google::api::servicecontrol::v1::CheckResponse>(Arena*);
template<> ::google::api::servicecontrol::v1::CheckResponse_CheckInfo* Arena::CreateMaybeMessage<::google::api::servicecontrol::v1::CheckResponse_CheckInfo>(Arena*);
template<> ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo* Arena::CreateMaybeMessage<::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo>(Arena*);
template<> ::google::api::servicecontrol::v1::ReportRequest* Arena::CreateMaybeMessage<::google::api::servicecontrol::v1::ReportRequest>(Arena*);
template<> ::google::api::servicecontrol::v1::ReportResponse* Arena::CreateMaybeMessage<::google::api::servicecontrol::v1::ReportResponse>(Arena*);
template<> ::google::api::servicecontrol::v1::ReportResponse_ReportError* Arena::CreateMaybeMessage<::google::api::servicecontrol::v1::ReportResponse_ReportError>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace api {
namespace servicecontrol {
namespace v1 {

// ===================================================================

class CheckRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.servicecontrol.v1.CheckRequest) */ {
 public:
  CheckRequest();
  virtual ~CheckRequest();

  CheckRequest(const CheckRequest& from);
  CheckRequest(CheckRequest&& from) noexcept
    : CheckRequest() {
    *this = ::std::move(from);
  }

  inline CheckRequest& operator=(const CheckRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckRequest& operator=(CheckRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckRequest* internal_default_instance() {
    return reinterpret_cast<const CheckRequest*>(
               &_CheckRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CheckRequest& a, CheckRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckRequest* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckRequest* New() const final {
    return CreateMaybeMessage<CheckRequest>(nullptr);
  }

  CheckRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckRequest& from);
  void MergeFrom(const CheckRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.servicecontrol.v1.CheckRequest";
  }
  protected:
  explicit CheckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto);
    return ::descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceNameFieldNumber = 1,
    kServiceConfigIdFieldNumber = 4,
    kOperationFieldNumber = 2,
  };
  // string service_name = 1;
  void clear_service_name();
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_service_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_service_name(
      std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // string service_config_id = 4;
  void clear_service_config_id();
  const std::string& service_config_id() const;
  void set_service_config_id(const std::string& value);
  void set_service_config_id(std::string&& value);
  void set_service_config_id(const char* value);
  void set_service_config_id(const char* value, size_t size);
  std::string* mutable_service_config_id();
  std::string* release_service_config_id();
  void set_allocated_service_config_id(std::string* service_config_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_service_config_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_service_config_id(
      std::string* service_config_id);
  private:
  const std::string& _internal_service_config_id() const;
  void _internal_set_service_config_id(const std::string& value);
  std::string* _internal_mutable_service_config_id();
  public:

  // .google.api.servicecontrol.v1.Operation operation = 2;
  bool has_operation() const;
  private:
  bool _internal_has_operation() const;
  public:
  void clear_operation();
  const ::google::api::servicecontrol::v1::Operation& operation() const;
  ::google::api::servicecontrol::v1::Operation* release_operation();
  ::google::api::servicecontrol::v1::Operation* mutable_operation();
  void set_allocated_operation(::google::api::servicecontrol::v1::Operation* operation);
  private:
  const ::google::api::servicecontrol::v1::Operation& _internal_operation() const;
  ::google::api::servicecontrol::v1::Operation* _internal_mutable_operation();
  public:
  void unsafe_arena_set_allocated_operation(
      ::google::api::servicecontrol::v1::Operation* operation);
  ::google::api::servicecontrol::v1::Operation* unsafe_arena_release_operation();

  // @@protoc_insertion_point(class_scope:google.api.servicecontrol.v1.CheckRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_config_id_;
  ::google::api::servicecontrol::v1::Operation* operation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class CheckResponse_CheckInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.servicecontrol.v1.CheckResponse.CheckInfo) */ {
 public:
  CheckResponse_CheckInfo();
  virtual ~CheckResponse_CheckInfo();

  CheckResponse_CheckInfo(const CheckResponse_CheckInfo& from);
  CheckResponse_CheckInfo(CheckResponse_CheckInfo&& from) noexcept
    : CheckResponse_CheckInfo() {
    *this = ::std::move(from);
  }

  inline CheckResponse_CheckInfo& operator=(const CheckResponse_CheckInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckResponse_CheckInfo& operator=(CheckResponse_CheckInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckResponse_CheckInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckResponse_CheckInfo* internal_default_instance() {
    return reinterpret_cast<const CheckResponse_CheckInfo*>(
               &_CheckResponse_CheckInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CheckResponse_CheckInfo& a, CheckResponse_CheckInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckResponse_CheckInfo* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckResponse_CheckInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckResponse_CheckInfo* New() const final {
    return CreateMaybeMessage<CheckResponse_CheckInfo>(nullptr);
  }

  CheckResponse_CheckInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckResponse_CheckInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckResponse_CheckInfo& from);
  void MergeFrom(const CheckResponse_CheckInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckResponse_CheckInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.servicecontrol.v1.CheckResponse.CheckInfo";
  }
  protected:
  explicit CheckResponse_CheckInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto);
    return ::descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsumerInfoFieldNumber = 2,
  };
  // .google.api.servicecontrol.v1.CheckResponse.ConsumerInfo consumer_info = 2;
  bool has_consumer_info() const;
  private:
  bool _internal_has_consumer_info() const;
  public:
  void clear_consumer_info();
  const ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo& consumer_info() const;
  ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo* release_consumer_info();
  ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo* mutable_consumer_info();
  void set_allocated_consumer_info(::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo* consumer_info);
  private:
  const ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo& _internal_consumer_info() const;
  ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo* _internal_mutable_consumer_info();
  public:
  void unsafe_arena_set_allocated_consumer_info(
      ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo* consumer_info);
  ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo* unsafe_arena_release_consumer_info();

  // @@protoc_insertion_point(class_scope:google.api.servicecontrol.v1.CheckResponse.CheckInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo* consumer_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class CheckResponse_ConsumerInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.servicecontrol.v1.CheckResponse.ConsumerInfo) */ {
 public:
  CheckResponse_ConsumerInfo();
  virtual ~CheckResponse_ConsumerInfo();

  CheckResponse_ConsumerInfo(const CheckResponse_ConsumerInfo& from);
  CheckResponse_ConsumerInfo(CheckResponse_ConsumerInfo&& from) noexcept
    : CheckResponse_ConsumerInfo() {
    *this = ::std::move(from);
  }

  inline CheckResponse_ConsumerInfo& operator=(const CheckResponse_ConsumerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckResponse_ConsumerInfo& operator=(CheckResponse_ConsumerInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckResponse_ConsumerInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckResponse_ConsumerInfo* internal_default_instance() {
    return reinterpret_cast<const CheckResponse_ConsumerInfo*>(
               &_CheckResponse_ConsumerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CheckResponse_ConsumerInfo& a, CheckResponse_ConsumerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckResponse_ConsumerInfo* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckResponse_ConsumerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckResponse_ConsumerInfo* New() const final {
    return CreateMaybeMessage<CheckResponse_ConsumerInfo>(nullptr);
  }

  CheckResponse_ConsumerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckResponse_ConsumerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckResponse_ConsumerInfo& from);
  void MergeFrom(const CheckResponse_ConsumerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckResponse_ConsumerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.servicecontrol.v1.CheckResponse.ConsumerInfo";
  }
  protected:
  explicit CheckResponse_ConsumerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto);
    return ::descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectNumberFieldNumber = 1,
  };
  // int64 project_number = 1;
  void clear_project_number();
  ::PROTOBUF_NAMESPACE_ID::int64 project_number() const;
  void set_project_number(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_project_number() const;
  void _internal_set_project_number(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:google.api.servicecontrol.v1.CheckResponse.ConsumerInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 project_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class CheckResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.servicecontrol.v1.CheckResponse) */ {
 public:
  CheckResponse();
  virtual ~CheckResponse();

  CheckResponse(const CheckResponse& from);
  CheckResponse(CheckResponse&& from) noexcept
    : CheckResponse() {
    *this = ::std::move(from);
  }

  inline CheckResponse& operator=(const CheckResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckResponse& operator=(CheckResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CheckResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CheckResponse* internal_default_instance() {
    return reinterpret_cast<const CheckResponse*>(
               &_CheckResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CheckResponse& a, CheckResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CheckResponse* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CheckResponse* New() const final {
    return CreateMaybeMessage<CheckResponse>(nullptr);
  }

  CheckResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CheckResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CheckResponse& from);
  void MergeFrom(const CheckResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CheckResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.servicecontrol.v1.CheckResponse";
  }
  protected:
  explicit CheckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto);
    return ::descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CheckResponse_CheckInfo CheckInfo;
  typedef CheckResponse_ConsumerInfo ConsumerInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kCheckErrorsFieldNumber = 2,
    kOperationIdFieldNumber = 1,
    kServiceConfigIdFieldNumber = 5,
    kServiceRolloutIdFieldNumber = 11,
    kCheckInfoFieldNumber = 6,
  };
  // repeated .google.api.servicecontrol.v1.CheckError check_errors = 2;
  int check_errors_size() const;
  private:
  int _internal_check_errors_size() const;
  public:
  void clear_check_errors();
  ::google::api::servicecontrol::v1::CheckError* mutable_check_errors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v1::CheckError >*
      mutable_check_errors();
  private:
  const ::google::api::servicecontrol::v1::CheckError& _internal_check_errors(int index) const;
  ::google::api::servicecontrol::v1::CheckError* _internal_add_check_errors();
  public:
  const ::google::api::servicecontrol::v1::CheckError& check_errors(int index) const;
  ::google::api::servicecontrol::v1::CheckError* add_check_errors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v1::CheckError >&
      check_errors() const;

  // string operation_id = 1;
  void clear_operation_id();
  const std::string& operation_id() const;
  void set_operation_id(const std::string& value);
  void set_operation_id(std::string&& value);
  void set_operation_id(const char* value);
  void set_operation_id(const char* value, size_t size);
  std::string* mutable_operation_id();
  std::string* release_operation_id();
  void set_allocated_operation_id(std::string* operation_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_operation_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_operation_id(
      std::string* operation_id);
  private:
  const std::string& _internal_operation_id() const;
  void _internal_set_operation_id(const std::string& value);
  std::string* _internal_mutable_operation_id();
  public:

  // string service_config_id = 5;
  void clear_service_config_id();
  const std::string& service_config_id() const;
  void set_service_config_id(const std::string& value);
  void set_service_config_id(std::string&& value);
  void set_service_config_id(const char* value);
  void set_service_config_id(const char* value, size_t size);
  std::string* mutable_service_config_id();
  std::string* release_service_config_id();
  void set_allocated_service_config_id(std::string* service_config_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_service_config_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_service_config_id(
      std::string* service_config_id);
  private:
  const std::string& _internal_service_config_id() const;
  void _internal_set_service_config_id(const std::string& value);
  std::string* _internal_mutable_service_config_id();
  public:

  // string service_rollout_id = 11;
  void clear_service_rollout_id();
  const std::string& service_rollout_id() const;
  void set_service_rollout_id(const std::string& value);
  void set_service_rollout_id(std::string&& value);
  void set_service_rollout_id(const char* value);
  void set_service_rollout_id(const char* value, size_t size);
  std::string* mutable_service_rollout_id();
  std::string* release_service_rollout_id();
  void set_allocated_service_rollout_id(std::string* service_rollout_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_service_rollout_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_service_rollout_id(
      std::string* service_rollout_id);
  private:
  const std::string& _internal_service_rollout_id() const;
  void _internal_set_service_rollout_id(const std::string& value);
  std::string* _internal_mutable_service_rollout_id();
  public:

  // .google.api.servicecontrol.v1.CheckResponse.CheckInfo check_info = 6;
  bool has_check_info() const;
  private:
  bool _internal_has_check_info() const;
  public:
  void clear_check_info();
  const ::google::api::servicecontrol::v1::CheckResponse_CheckInfo& check_info() const;
  ::google::api::servicecontrol::v1::CheckResponse_CheckInfo* release_check_info();
  ::google::api::servicecontrol::v1::CheckResponse_CheckInfo* mutable_check_info();
  void set_allocated_check_info(::google::api::servicecontrol::v1::CheckResponse_CheckInfo* check_info);
  private:
  const ::google::api::servicecontrol::v1::CheckResponse_CheckInfo& _internal_check_info() const;
  ::google::api::servicecontrol::v1::CheckResponse_CheckInfo* _internal_mutable_check_info();
  public:
  void unsafe_arena_set_allocated_check_info(
      ::google::api::servicecontrol::v1::CheckResponse_CheckInfo* check_info);
  ::google::api::servicecontrol::v1::CheckResponse_CheckInfo* unsafe_arena_release_check_info();

  // @@protoc_insertion_point(class_scope:google.api.servicecontrol.v1.CheckResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v1::CheckError > check_errors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operation_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_config_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_rollout_id_;
  ::google::api::servicecontrol::v1::CheckResponse_CheckInfo* check_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class ReportRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.servicecontrol.v1.ReportRequest) */ {
 public:
  ReportRequest();
  virtual ~ReportRequest();

  ReportRequest(const ReportRequest& from);
  ReportRequest(ReportRequest&& from) noexcept
    : ReportRequest() {
    *this = ::std::move(from);
  }

  inline ReportRequest& operator=(const ReportRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportRequest& operator=(ReportRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReportRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportRequest* internal_default_instance() {
    return reinterpret_cast<const ReportRequest*>(
               &_ReportRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ReportRequest& a, ReportRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportRequest* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReportRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReportRequest* New() const final {
    return CreateMaybeMessage<ReportRequest>(nullptr);
  }

  ReportRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReportRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReportRequest& from);
  void MergeFrom(const ReportRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.servicecontrol.v1.ReportRequest";
  }
  protected:
  explicit ReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto);
    return ::descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationsFieldNumber = 2,
    kServiceNameFieldNumber = 1,
    kServiceConfigIdFieldNumber = 3,
  };
  // repeated .google.api.servicecontrol.v1.Operation operations = 2;
  int operations_size() const;
  private:
  int _internal_operations_size() const;
  public:
  void clear_operations();
  ::google::api::servicecontrol::v1::Operation* mutable_operations(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v1::Operation >*
      mutable_operations();
  private:
  const ::google::api::servicecontrol::v1::Operation& _internal_operations(int index) const;
  ::google::api::servicecontrol::v1::Operation* _internal_add_operations();
  public:
  const ::google::api::servicecontrol::v1::Operation& operations(int index) const;
  ::google::api::servicecontrol::v1::Operation* add_operations();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v1::Operation >&
      operations() const;

  // string service_name = 1;
  void clear_service_name();
  const std::string& service_name() const;
  void set_service_name(const std::string& value);
  void set_service_name(std::string&& value);
  void set_service_name(const char* value);
  void set_service_name(const char* value, size_t size);
  std::string* mutable_service_name();
  std::string* release_service_name();
  void set_allocated_service_name(std::string* service_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_service_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_service_name(
      std::string* service_name);
  private:
  const std::string& _internal_service_name() const;
  void _internal_set_service_name(const std::string& value);
  std::string* _internal_mutable_service_name();
  public:

  // string service_config_id = 3;
  void clear_service_config_id();
  const std::string& service_config_id() const;
  void set_service_config_id(const std::string& value);
  void set_service_config_id(std::string&& value);
  void set_service_config_id(const char* value);
  void set_service_config_id(const char* value, size_t size);
  std::string* mutable_service_config_id();
  std::string* release_service_config_id();
  void set_allocated_service_config_id(std::string* service_config_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_service_config_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_service_config_id(
      std::string* service_config_id);
  private:
  const std::string& _internal_service_config_id() const;
  void _internal_set_service_config_id(const std::string& value);
  std::string* _internal_mutable_service_config_id();
  public:

  // @@protoc_insertion_point(class_scope:google.api.servicecontrol.v1.ReportRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v1::Operation > operations_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_config_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class ReportResponse_ReportError :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.servicecontrol.v1.ReportResponse.ReportError) */ {
 public:
  ReportResponse_ReportError();
  virtual ~ReportResponse_ReportError();

  ReportResponse_ReportError(const ReportResponse_ReportError& from);
  ReportResponse_ReportError(ReportResponse_ReportError&& from) noexcept
    : ReportResponse_ReportError() {
    *this = ::std::move(from);
  }

  inline ReportResponse_ReportError& operator=(const ReportResponse_ReportError& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportResponse_ReportError& operator=(ReportResponse_ReportError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReportResponse_ReportError& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportResponse_ReportError* internal_default_instance() {
    return reinterpret_cast<const ReportResponse_ReportError*>(
               &_ReportResponse_ReportError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ReportResponse_ReportError& a, ReportResponse_ReportError& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportResponse_ReportError* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReportResponse_ReportError* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReportResponse_ReportError* New() const final {
    return CreateMaybeMessage<ReportResponse_ReportError>(nullptr);
  }

  ReportResponse_ReportError* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReportResponse_ReportError>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReportResponse_ReportError& from);
  void MergeFrom(const ReportResponse_ReportError& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportResponse_ReportError* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.servicecontrol.v1.ReportResponse.ReportError";
  }
  protected:
  explicit ReportResponse_ReportError(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto);
    return ::descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperationIdFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string operation_id = 1;
  void clear_operation_id();
  const std::string& operation_id() const;
  void set_operation_id(const std::string& value);
  void set_operation_id(std::string&& value);
  void set_operation_id(const char* value);
  void set_operation_id(const char* value, size_t size);
  std::string* mutable_operation_id();
  std::string* release_operation_id();
  void set_allocated_operation_id(std::string* operation_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_operation_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_operation_id(
      std::string* operation_id);
  private:
  const std::string& _internal_operation_id() const;
  void _internal_set_operation_id(const std::string& value);
  std::string* _internal_mutable_operation_id();
  public:

  // .google.rpc.Status status = 2;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::google::rpc::Status& status() const;
  ::google::rpc::Status* release_status();
  ::google::rpc::Status* mutable_status();
  void set_allocated_status(::google::rpc::Status* status);
  private:
  const ::google::rpc::Status& _internal_status() const;
  ::google::rpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::google::rpc::Status* status);
  ::google::rpc::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:google.api.servicecontrol.v1.ReportResponse.ReportError)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr operation_id_;
  ::google::rpc::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class ReportResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.servicecontrol.v1.ReportResponse) */ {
 public:
  ReportResponse();
  virtual ~ReportResponse();

  ReportResponse(const ReportResponse& from);
  ReportResponse(ReportResponse&& from) noexcept
    : ReportResponse() {
    *this = ::std::move(from);
  }

  inline ReportResponse& operator=(const ReportResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReportResponse& operator=(ReportResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReportResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReportResponse* internal_default_instance() {
    return reinterpret_cast<const ReportResponse*>(
               &_ReportResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ReportResponse& a, ReportResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReportResponse* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReportResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReportResponse* New() const final {
    return CreateMaybeMessage<ReportResponse>(nullptr);
  }

  ReportResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReportResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReportResponse& from);
  void MergeFrom(const ReportResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReportResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.servicecontrol.v1.ReportResponse";
  }
  protected:
  explicit ReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto);
    return ::descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ReportResponse_ReportError ReportError;

  // accessors -------------------------------------------------------

  enum : int {
    kReportErrorsFieldNumber = 1,
    kServiceConfigIdFieldNumber = 2,
    kServiceRolloutIdFieldNumber = 4,
  };
  // repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;
  int report_errors_size() const;
  private:
  int _internal_report_errors_size() const;
  public:
  void clear_report_errors();
  ::google::api::servicecontrol::v1::ReportResponse_ReportError* mutable_report_errors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v1::ReportResponse_ReportError >*
      mutable_report_errors();
  private:
  const ::google::api::servicecontrol::v1::ReportResponse_ReportError& _internal_report_errors(int index) const;
  ::google::api::servicecontrol::v1::ReportResponse_ReportError* _internal_add_report_errors();
  public:
  const ::google::api::servicecontrol::v1::ReportResponse_ReportError& report_errors(int index) const;
  ::google::api::servicecontrol::v1::ReportResponse_ReportError* add_report_errors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v1::ReportResponse_ReportError >&
      report_errors() const;

  // string service_config_id = 2;
  void clear_service_config_id();
  const std::string& service_config_id() const;
  void set_service_config_id(const std::string& value);
  void set_service_config_id(std::string&& value);
  void set_service_config_id(const char* value);
  void set_service_config_id(const char* value, size_t size);
  std::string* mutable_service_config_id();
  std::string* release_service_config_id();
  void set_allocated_service_config_id(std::string* service_config_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_service_config_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_service_config_id(
      std::string* service_config_id);
  private:
  const std::string& _internal_service_config_id() const;
  void _internal_set_service_config_id(const std::string& value);
  std::string* _internal_mutable_service_config_id();
  public:

  // string service_rollout_id = 4;
  void clear_service_rollout_id();
  const std::string& service_rollout_id() const;
  void set_service_rollout_id(const std::string& value);
  void set_service_rollout_id(std::string&& value);
  void set_service_rollout_id(const char* value);
  void set_service_rollout_id(const char* value, size_t size);
  std::string* mutable_service_rollout_id();
  std::string* release_service_rollout_id();
  void set_allocated_service_rollout_id(std::string* service_rollout_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_service_rollout_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_service_rollout_id(
      std::string* service_rollout_id);
  private:
  const std::string& _internal_service_rollout_id() const;
  void _internal_set_service_rollout_id(const std::string& value);
  std::string* _internal_mutable_service_rollout_id();
  public:

  // @@protoc_insertion_point(class_scope:google.api.servicecontrol.v1.ReportResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v1::ReportResponse_ReportError > report_errors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_config_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_rollout_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CheckRequest

// string service_name = 1;
inline void CheckRequest::clear_service_name() {
  service_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& CheckRequest::service_name() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.CheckRequest.service_name)
  return _internal_service_name();
}
inline void CheckRequest::set_service_name(const std::string& value) {
  _internal_set_service_name(value);
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.CheckRequest.service_name)
}
inline std::string* CheckRequest::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.CheckRequest.service_name)
  return _internal_mutable_service_name();
}
inline const std::string& CheckRequest::_internal_service_name() const {
  return service_name_.Get();
}
inline void CheckRequest::_internal_set_service_name(const std::string& value) {
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void CheckRequest::set_service_name(std::string&& value) {
  
  service_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.servicecontrol.v1.CheckRequest.service_name)
}
inline void CheckRequest::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.servicecontrol.v1.CheckRequest.service_name)
}
inline void CheckRequest::set_service_name(const char* value,
    size_t size) {
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.servicecontrol.v1.CheckRequest.service_name)
}
inline std::string* CheckRequest::_internal_mutable_service_name() {
  
  return service_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* CheckRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.CheckRequest.service_name)
  
  return service_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void CheckRequest::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.CheckRequest.service_name)
}
inline std::string* CheckRequest::unsafe_arena_release_service_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.servicecontrol.v1.CheckRequest.service_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return service_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CheckRequest::unsafe_arena_set_allocated_service_name(
    std::string* service_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      service_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.CheckRequest.service_name)
}

// .google.api.servicecontrol.v1.Operation operation = 2;
inline bool CheckRequest::_internal_has_operation() const {
  return this != internal_default_instance() && operation_ != nullptr;
}
inline bool CheckRequest::has_operation() const {
  return _internal_has_operation();
}
inline const ::google::api::servicecontrol::v1::Operation& CheckRequest::_internal_operation() const {
  const ::google::api::servicecontrol::v1::Operation* p = operation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::google::api::servicecontrol::v1::Operation*>(
      &::google::api::servicecontrol::v1::_Operation_default_instance_);
}
inline const ::google::api::servicecontrol::v1::Operation& CheckRequest::operation() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.CheckRequest.operation)
  return _internal_operation();
}
inline ::google::api::servicecontrol::v1::Operation* CheckRequest::release_operation() {
  auto temp = unsafe_arena_release_operation();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::api::servicecontrol::v1::Operation* CheckRequest::unsafe_arena_release_operation() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.CheckRequest.operation)
  
  ::google::api::servicecontrol::v1::Operation* temp = operation_;
  operation_ = nullptr;
  return temp;
}
inline ::google::api::servicecontrol::v1::Operation* CheckRequest::_internal_mutable_operation() {
  
  if (operation_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::servicecontrol::v1::Operation>(GetArenaNoVirtual());
    operation_ = p;
  }
  return operation_;
}
inline ::google::api::servicecontrol::v1::Operation* CheckRequest::mutable_operation() {
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.CheckRequest.operation)
  return _internal_mutable_operation();
}
inline void CheckRequest::set_allocated_operation(::google::api::servicecontrol::v1::Operation* operation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(operation_);
  }
  if (operation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(operation)->GetArena();
    if (message_arena != submessage_arena) {
      operation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, operation, submessage_arena);
    }
    
  } else {
    
  }
  operation_ = operation;
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.CheckRequest.operation)
}

// string service_config_id = 4;
inline void CheckRequest::clear_service_config_id() {
  service_config_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& CheckRequest::service_config_id() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.CheckRequest.service_config_id)
  return _internal_service_config_id();
}
inline void CheckRequest::set_service_config_id(const std::string& value) {
  _internal_set_service_config_id(value);
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.CheckRequest.service_config_id)
}
inline std::string* CheckRequest::mutable_service_config_id() {
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.CheckRequest.service_config_id)
  return _internal_mutable_service_config_id();
}
inline const std::string& CheckRequest::_internal_service_config_id() const {
  return service_config_id_.Get();
}
inline void CheckRequest::_internal_set_service_config_id(const std::string& value) {
  
  service_config_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void CheckRequest::set_service_config_id(std::string&& value) {
  
  service_config_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.servicecontrol.v1.CheckRequest.service_config_id)
}
inline void CheckRequest::set_service_config_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_config_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.servicecontrol.v1.CheckRequest.service_config_id)
}
inline void CheckRequest::set_service_config_id(const char* value,
    size_t size) {
  
  service_config_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.servicecontrol.v1.CheckRequest.service_config_id)
}
inline std::string* CheckRequest::_internal_mutable_service_config_id() {
  
  return service_config_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* CheckRequest::release_service_config_id() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.CheckRequest.service_config_id)
  
  return service_config_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void CheckRequest::set_allocated_service_config_id(std::string* service_config_id) {
  if (service_config_id != nullptr) {
    
  } else {
    
  }
  service_config_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_config_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.CheckRequest.service_config_id)
}
inline std::string* CheckRequest::unsafe_arena_release_service_config_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.servicecontrol.v1.CheckRequest.service_config_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return service_config_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CheckRequest::unsafe_arena_set_allocated_service_config_id(
    std::string* service_config_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (service_config_id != nullptr) {
    
  } else {
    
  }
  service_config_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      service_config_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.CheckRequest.service_config_id)
}

// -------------------------------------------------------------------

// CheckResponse_CheckInfo

// .google.api.servicecontrol.v1.CheckResponse.ConsumerInfo consumer_info = 2;
inline bool CheckResponse_CheckInfo::_internal_has_consumer_info() const {
  return this != internal_default_instance() && consumer_info_ != nullptr;
}
inline bool CheckResponse_CheckInfo::has_consumer_info() const {
  return _internal_has_consumer_info();
}
inline void CheckResponse_CheckInfo::clear_consumer_info() {
  if (GetArenaNoVirtual() == nullptr && consumer_info_ != nullptr) {
    delete consumer_info_;
  }
  consumer_info_ = nullptr;
}
inline const ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo& CheckResponse_CheckInfo::_internal_consumer_info() const {
  const ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo* p = consumer_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo*>(
      &::google::api::servicecontrol::v1::_CheckResponse_ConsumerInfo_default_instance_);
}
inline const ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo& CheckResponse_CheckInfo::consumer_info() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.CheckResponse.CheckInfo.consumer_info)
  return _internal_consumer_info();
}
inline ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo* CheckResponse_CheckInfo::release_consumer_info() {
  auto temp = unsafe_arena_release_consumer_info();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo* CheckResponse_CheckInfo::unsafe_arena_release_consumer_info() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.CheckResponse.CheckInfo.consumer_info)
  
  ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo* temp = consumer_info_;
  consumer_info_ = nullptr;
  return temp;
}
inline ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo* CheckResponse_CheckInfo::_internal_mutable_consumer_info() {
  
  if (consumer_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo>(GetArenaNoVirtual());
    consumer_info_ = p;
  }
  return consumer_info_;
}
inline ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo* CheckResponse_CheckInfo::mutable_consumer_info() {
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.CheckResponse.CheckInfo.consumer_info)
  return _internal_mutable_consumer_info();
}
inline void CheckResponse_CheckInfo::set_allocated_consumer_info(::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo* consumer_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete consumer_info_;
  }
  if (consumer_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(consumer_info);
    if (message_arena != submessage_arena) {
      consumer_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consumer_info, submessage_arena);
    }
    
  } else {
    
  }
  consumer_info_ = consumer_info;
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.CheckResponse.CheckInfo.consumer_info)
}

// -------------------------------------------------------------------

// CheckResponse_ConsumerInfo

// int64 project_number = 1;
inline void CheckResponse_ConsumerInfo::clear_project_number() {
  project_number_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CheckResponse_ConsumerInfo::_internal_project_number() const {
  return project_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CheckResponse_ConsumerInfo::project_number() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.CheckResponse.ConsumerInfo.project_number)
  return _internal_project_number();
}
inline void CheckResponse_ConsumerInfo::_internal_set_project_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  project_number_ = value;
}
inline void CheckResponse_ConsumerInfo::set_project_number(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_project_number(value);
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.CheckResponse.ConsumerInfo.project_number)
}

// -------------------------------------------------------------------

// CheckResponse

// string operation_id = 1;
inline void CheckResponse::clear_operation_id() {
  operation_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& CheckResponse::operation_id() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.CheckResponse.operation_id)
  return _internal_operation_id();
}
inline void CheckResponse::set_operation_id(const std::string& value) {
  _internal_set_operation_id(value);
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.CheckResponse.operation_id)
}
inline std::string* CheckResponse::mutable_operation_id() {
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.CheckResponse.operation_id)
  return _internal_mutable_operation_id();
}
inline const std::string& CheckResponse::_internal_operation_id() const {
  return operation_id_.Get();
}
inline void CheckResponse::_internal_set_operation_id(const std::string& value) {
  
  operation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void CheckResponse::set_operation_id(std::string&& value) {
  
  operation_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.servicecontrol.v1.CheckResponse.operation_id)
}
inline void CheckResponse::set_operation_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  operation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.servicecontrol.v1.CheckResponse.operation_id)
}
inline void CheckResponse::set_operation_id(const char* value,
    size_t size) {
  
  operation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.servicecontrol.v1.CheckResponse.operation_id)
}
inline std::string* CheckResponse::_internal_mutable_operation_id() {
  
  return operation_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* CheckResponse::release_operation_id() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.CheckResponse.operation_id)
  
  return operation_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void CheckResponse::set_allocated_operation_id(std::string* operation_id) {
  if (operation_id != nullptr) {
    
  } else {
    
  }
  operation_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operation_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.CheckResponse.operation_id)
}
inline std::string* CheckResponse::unsafe_arena_release_operation_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.servicecontrol.v1.CheckResponse.operation_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return operation_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CheckResponse::unsafe_arena_set_allocated_operation_id(
    std::string* operation_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (operation_id != nullptr) {
    
  } else {
    
  }
  operation_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      operation_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.CheckResponse.operation_id)
}

// string service_rollout_id = 11;
inline void CheckResponse::clear_service_rollout_id() {
  service_rollout_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& CheckResponse::service_rollout_id() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.CheckResponse.service_rollout_id)
  return _internal_service_rollout_id();
}
inline void CheckResponse::set_service_rollout_id(const std::string& value) {
  _internal_set_service_rollout_id(value);
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.CheckResponse.service_rollout_id)
}
inline std::string* CheckResponse::mutable_service_rollout_id() {
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.CheckResponse.service_rollout_id)
  return _internal_mutable_service_rollout_id();
}
inline const std::string& CheckResponse::_internal_service_rollout_id() const {
  return service_rollout_id_.Get();
}
inline void CheckResponse::_internal_set_service_rollout_id(const std::string& value) {
  
  service_rollout_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void CheckResponse::set_service_rollout_id(std::string&& value) {
  
  service_rollout_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.servicecontrol.v1.CheckResponse.service_rollout_id)
}
inline void CheckResponse::set_service_rollout_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_rollout_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.servicecontrol.v1.CheckResponse.service_rollout_id)
}
inline void CheckResponse::set_service_rollout_id(const char* value,
    size_t size) {
  
  service_rollout_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.servicecontrol.v1.CheckResponse.service_rollout_id)
}
inline std::string* CheckResponse::_internal_mutable_service_rollout_id() {
  
  return service_rollout_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* CheckResponse::release_service_rollout_id() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.CheckResponse.service_rollout_id)
  
  return service_rollout_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void CheckResponse::set_allocated_service_rollout_id(std::string* service_rollout_id) {
  if (service_rollout_id != nullptr) {
    
  } else {
    
  }
  service_rollout_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_rollout_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.CheckResponse.service_rollout_id)
}
inline std::string* CheckResponse::unsafe_arena_release_service_rollout_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.servicecontrol.v1.CheckResponse.service_rollout_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return service_rollout_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CheckResponse::unsafe_arena_set_allocated_service_rollout_id(
    std::string* service_rollout_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (service_rollout_id != nullptr) {
    
  } else {
    
  }
  service_rollout_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      service_rollout_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.CheckResponse.service_rollout_id)
}

// repeated .google.api.servicecontrol.v1.CheckError check_errors = 2;
inline int CheckResponse::_internal_check_errors_size() const {
  return check_errors_.size();
}
inline int CheckResponse::check_errors_size() const {
  return _internal_check_errors_size();
}
inline ::google::api::servicecontrol::v1::CheckError* CheckResponse::mutable_check_errors(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.CheckResponse.check_errors)
  return check_errors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v1::CheckError >*
CheckResponse::mutable_check_errors() {
  // @@protoc_insertion_point(field_mutable_list:google.api.servicecontrol.v1.CheckResponse.check_errors)
  return &check_errors_;
}
inline const ::google::api::servicecontrol::v1::CheckError& CheckResponse::_internal_check_errors(int index) const {
  return check_errors_.Get(index);
}
inline const ::google::api::servicecontrol::v1::CheckError& CheckResponse::check_errors(int index) const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.CheckResponse.check_errors)
  return _internal_check_errors(index);
}
inline ::google::api::servicecontrol::v1::CheckError* CheckResponse::_internal_add_check_errors() {
  return check_errors_.Add();
}
inline ::google::api::servicecontrol::v1::CheckError* CheckResponse::add_check_errors() {
  // @@protoc_insertion_point(field_add:google.api.servicecontrol.v1.CheckResponse.check_errors)
  return _internal_add_check_errors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v1::CheckError >&
CheckResponse::check_errors() const {
  // @@protoc_insertion_point(field_list:google.api.servicecontrol.v1.CheckResponse.check_errors)
  return check_errors_;
}

// string service_config_id = 5;
inline void CheckResponse::clear_service_config_id() {
  service_config_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& CheckResponse::service_config_id() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.CheckResponse.service_config_id)
  return _internal_service_config_id();
}
inline void CheckResponse::set_service_config_id(const std::string& value) {
  _internal_set_service_config_id(value);
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.CheckResponse.service_config_id)
}
inline std::string* CheckResponse::mutable_service_config_id() {
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.CheckResponse.service_config_id)
  return _internal_mutable_service_config_id();
}
inline const std::string& CheckResponse::_internal_service_config_id() const {
  return service_config_id_.Get();
}
inline void CheckResponse::_internal_set_service_config_id(const std::string& value) {
  
  service_config_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void CheckResponse::set_service_config_id(std::string&& value) {
  
  service_config_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.servicecontrol.v1.CheckResponse.service_config_id)
}
inline void CheckResponse::set_service_config_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_config_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.servicecontrol.v1.CheckResponse.service_config_id)
}
inline void CheckResponse::set_service_config_id(const char* value,
    size_t size) {
  
  service_config_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.servicecontrol.v1.CheckResponse.service_config_id)
}
inline std::string* CheckResponse::_internal_mutable_service_config_id() {
  
  return service_config_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* CheckResponse::release_service_config_id() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.CheckResponse.service_config_id)
  
  return service_config_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void CheckResponse::set_allocated_service_config_id(std::string* service_config_id) {
  if (service_config_id != nullptr) {
    
  } else {
    
  }
  service_config_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_config_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.CheckResponse.service_config_id)
}
inline std::string* CheckResponse::unsafe_arena_release_service_config_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.servicecontrol.v1.CheckResponse.service_config_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return service_config_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CheckResponse::unsafe_arena_set_allocated_service_config_id(
    std::string* service_config_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (service_config_id != nullptr) {
    
  } else {
    
  }
  service_config_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      service_config_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.CheckResponse.service_config_id)
}

// .google.api.servicecontrol.v1.CheckResponse.CheckInfo check_info = 6;
inline bool CheckResponse::_internal_has_check_info() const {
  return this != internal_default_instance() && check_info_ != nullptr;
}
inline bool CheckResponse::has_check_info() const {
  return _internal_has_check_info();
}
inline void CheckResponse::clear_check_info() {
  if (GetArenaNoVirtual() == nullptr && check_info_ != nullptr) {
    delete check_info_;
  }
  check_info_ = nullptr;
}
inline const ::google::api::servicecontrol::v1::CheckResponse_CheckInfo& CheckResponse::_internal_check_info() const {
  const ::google::api::servicecontrol::v1::CheckResponse_CheckInfo* p = check_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::google::api::servicecontrol::v1::CheckResponse_CheckInfo*>(
      &::google::api::servicecontrol::v1::_CheckResponse_CheckInfo_default_instance_);
}
inline const ::google::api::servicecontrol::v1::CheckResponse_CheckInfo& CheckResponse::check_info() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.CheckResponse.check_info)
  return _internal_check_info();
}
inline ::google::api::servicecontrol::v1::CheckResponse_CheckInfo* CheckResponse::release_check_info() {
  auto temp = unsafe_arena_release_check_info();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::api::servicecontrol::v1::CheckResponse_CheckInfo* CheckResponse::unsafe_arena_release_check_info() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.CheckResponse.check_info)
  
  ::google::api::servicecontrol::v1::CheckResponse_CheckInfo* temp = check_info_;
  check_info_ = nullptr;
  return temp;
}
inline ::google::api::servicecontrol::v1::CheckResponse_CheckInfo* CheckResponse::_internal_mutable_check_info() {
  
  if (check_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::servicecontrol::v1::CheckResponse_CheckInfo>(GetArenaNoVirtual());
    check_info_ = p;
  }
  return check_info_;
}
inline ::google::api::servicecontrol::v1::CheckResponse_CheckInfo* CheckResponse::mutable_check_info() {
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.CheckResponse.check_info)
  return _internal_mutable_check_info();
}
inline void CheckResponse::set_allocated_check_info(::google::api::servicecontrol::v1::CheckResponse_CheckInfo* check_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete check_info_;
  }
  if (check_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(check_info);
    if (message_arena != submessage_arena) {
      check_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, check_info, submessage_arena);
    }
    
  } else {
    
  }
  check_info_ = check_info;
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.CheckResponse.check_info)
}

// -------------------------------------------------------------------

// ReportRequest

// string service_name = 1;
inline void ReportRequest::clear_service_name() {
  service_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& ReportRequest::service_name() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.ReportRequest.service_name)
  return _internal_service_name();
}
inline void ReportRequest::set_service_name(const std::string& value) {
  _internal_set_service_name(value);
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.ReportRequest.service_name)
}
inline std::string* ReportRequest::mutable_service_name() {
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.ReportRequest.service_name)
  return _internal_mutable_service_name();
}
inline const std::string& ReportRequest::_internal_service_name() const {
  return service_name_.Get();
}
inline void ReportRequest::_internal_set_service_name(const std::string& value) {
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void ReportRequest::set_service_name(std::string&& value) {
  
  service_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.servicecontrol.v1.ReportRequest.service_name)
}
inline void ReportRequest::set_service_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.servicecontrol.v1.ReportRequest.service_name)
}
inline void ReportRequest::set_service_name(const char* value,
    size_t size) {
  
  service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.servicecontrol.v1.ReportRequest.service_name)
}
inline std::string* ReportRequest::_internal_mutable_service_name() {
  
  return service_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* ReportRequest::release_service_name() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.ReportRequest.service_name)
  
  return service_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ReportRequest::set_allocated_service_name(std::string* service_name) {
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.ReportRequest.service_name)
}
inline std::string* ReportRequest::unsafe_arena_release_service_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.servicecontrol.v1.ReportRequest.service_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return service_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ReportRequest::unsafe_arena_set_allocated_service_name(
    std::string* service_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (service_name != nullptr) {
    
  } else {
    
  }
  service_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      service_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.ReportRequest.service_name)
}

// repeated .google.api.servicecontrol.v1.Operation operations = 2;
inline int ReportRequest::_internal_operations_size() const {
  return operations_.size();
}
inline int ReportRequest::operations_size() const {
  return _internal_operations_size();
}
inline ::google::api::servicecontrol::v1::Operation* ReportRequest::mutable_operations(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.ReportRequest.operations)
  return operations_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v1::Operation >*
ReportRequest::mutable_operations() {
  // @@protoc_insertion_point(field_mutable_list:google.api.servicecontrol.v1.ReportRequest.operations)
  return &operations_;
}
inline const ::google::api::servicecontrol::v1::Operation& ReportRequest::_internal_operations(int index) const {
  return operations_.Get(index);
}
inline const ::google::api::servicecontrol::v1::Operation& ReportRequest::operations(int index) const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.ReportRequest.operations)
  return _internal_operations(index);
}
inline ::google::api::servicecontrol::v1::Operation* ReportRequest::_internal_add_operations() {
  return operations_.Add();
}
inline ::google::api::servicecontrol::v1::Operation* ReportRequest::add_operations() {
  // @@protoc_insertion_point(field_add:google.api.servicecontrol.v1.ReportRequest.operations)
  return _internal_add_operations();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v1::Operation >&
ReportRequest::operations() const {
  // @@protoc_insertion_point(field_list:google.api.servicecontrol.v1.ReportRequest.operations)
  return operations_;
}

// string service_config_id = 3;
inline void ReportRequest::clear_service_config_id() {
  service_config_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& ReportRequest::service_config_id() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.ReportRequest.service_config_id)
  return _internal_service_config_id();
}
inline void ReportRequest::set_service_config_id(const std::string& value) {
  _internal_set_service_config_id(value);
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.ReportRequest.service_config_id)
}
inline std::string* ReportRequest::mutable_service_config_id() {
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.ReportRequest.service_config_id)
  return _internal_mutable_service_config_id();
}
inline const std::string& ReportRequest::_internal_service_config_id() const {
  return service_config_id_.Get();
}
inline void ReportRequest::_internal_set_service_config_id(const std::string& value) {
  
  service_config_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void ReportRequest::set_service_config_id(std::string&& value) {
  
  service_config_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.servicecontrol.v1.ReportRequest.service_config_id)
}
inline void ReportRequest::set_service_config_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_config_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.servicecontrol.v1.ReportRequest.service_config_id)
}
inline void ReportRequest::set_service_config_id(const char* value,
    size_t size) {
  
  service_config_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.servicecontrol.v1.ReportRequest.service_config_id)
}
inline std::string* ReportRequest::_internal_mutable_service_config_id() {
  
  return service_config_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* ReportRequest::release_service_config_id() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.ReportRequest.service_config_id)
  
  return service_config_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ReportRequest::set_allocated_service_config_id(std::string* service_config_id) {
  if (service_config_id != nullptr) {
    
  } else {
    
  }
  service_config_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_config_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.ReportRequest.service_config_id)
}
inline std::string* ReportRequest::unsafe_arena_release_service_config_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.servicecontrol.v1.ReportRequest.service_config_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return service_config_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ReportRequest::unsafe_arena_set_allocated_service_config_id(
    std::string* service_config_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (service_config_id != nullptr) {
    
  } else {
    
  }
  service_config_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      service_config_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.ReportRequest.service_config_id)
}

// -------------------------------------------------------------------

// ReportResponse_ReportError

// string operation_id = 1;
inline void ReportResponse_ReportError::clear_operation_id() {
  operation_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& ReportResponse_ReportError::operation_id() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.ReportResponse.ReportError.operation_id)
  return _internal_operation_id();
}
inline void ReportResponse_ReportError::set_operation_id(const std::string& value) {
  _internal_set_operation_id(value);
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.ReportResponse.ReportError.operation_id)
}
inline std::string* ReportResponse_ReportError::mutable_operation_id() {
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.ReportResponse.ReportError.operation_id)
  return _internal_mutable_operation_id();
}
inline const std::string& ReportResponse_ReportError::_internal_operation_id() const {
  return operation_id_.Get();
}
inline void ReportResponse_ReportError::_internal_set_operation_id(const std::string& value) {
  
  operation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void ReportResponse_ReportError::set_operation_id(std::string&& value) {
  
  operation_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.servicecontrol.v1.ReportResponse.ReportError.operation_id)
}
inline void ReportResponse_ReportError::set_operation_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  operation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.servicecontrol.v1.ReportResponse.ReportError.operation_id)
}
inline void ReportResponse_ReportError::set_operation_id(const char* value,
    size_t size) {
  
  operation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.servicecontrol.v1.ReportResponse.ReportError.operation_id)
}
inline std::string* ReportResponse_ReportError::_internal_mutable_operation_id() {
  
  return operation_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* ReportResponse_ReportError::release_operation_id() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.ReportResponse.ReportError.operation_id)
  
  return operation_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ReportResponse_ReportError::set_allocated_operation_id(std::string* operation_id) {
  if (operation_id != nullptr) {
    
  } else {
    
  }
  operation_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), operation_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.ReportResponse.ReportError.operation_id)
}
inline std::string* ReportResponse_ReportError::unsafe_arena_release_operation_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.servicecontrol.v1.ReportResponse.ReportError.operation_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return operation_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ReportResponse_ReportError::unsafe_arena_set_allocated_operation_id(
    std::string* operation_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (operation_id != nullptr) {
    
  } else {
    
  }
  operation_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      operation_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.ReportResponse.ReportError.operation_id)
}

// .google.rpc.Status status = 2;
inline bool ReportResponse_ReportError::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ReportResponse_ReportError::has_status() const {
  return _internal_has_status();
}
inline const ::google::rpc::Status& ReportResponse_ReportError::_internal_status() const {
  const ::google::rpc::Status* p = status_;
  return p != nullptr ? *p : *reinterpret_cast<const ::google::rpc::Status*>(
      &::google::rpc::_Status_default_instance_);
}
inline const ::google::rpc::Status& ReportResponse_ReportError::status() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.ReportResponse.ReportError.status)
  return _internal_status();
}
inline ::google::rpc::Status* ReportResponse_ReportError::release_status() {
  auto temp = unsafe_arena_release_status();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::rpc::Status* ReportResponse_ReportError::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.ReportResponse.ReportError.status)
  
  ::google::rpc::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* ReportResponse_ReportError::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  return status_;
}
inline ::google::rpc::Status* ReportResponse_ReportError::mutable_status() {
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.ReportResponse.ReportError.status)
  return _internal_mutable_status();
}
inline void ReportResponse_ReportError::set_allocated_status(::google::rpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.ReportResponse.ReportError.status)
}

// -------------------------------------------------------------------

// ReportResponse

// repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;
inline int ReportResponse::_internal_report_errors_size() const {
  return report_errors_.size();
}
inline int ReportResponse::report_errors_size() const {
  return _internal_report_errors_size();
}
inline void ReportResponse::clear_report_errors() {
  report_errors_.Clear();
}
inline ::google::api::servicecontrol::v1::ReportResponse_ReportError* ReportResponse::mutable_report_errors(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.ReportResponse.report_errors)
  return report_errors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v1::ReportResponse_ReportError >*
ReportResponse::mutable_report_errors() {
  // @@protoc_insertion_point(field_mutable_list:google.api.servicecontrol.v1.ReportResponse.report_errors)
  return &report_errors_;
}
inline const ::google::api::servicecontrol::v1::ReportResponse_ReportError& ReportResponse::_internal_report_errors(int index) const {
  return report_errors_.Get(index);
}
inline const ::google::api::servicecontrol::v1::ReportResponse_ReportError& ReportResponse::report_errors(int index) const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.ReportResponse.report_errors)
  return _internal_report_errors(index);
}
inline ::google::api::servicecontrol::v1::ReportResponse_ReportError* ReportResponse::_internal_add_report_errors() {
  return report_errors_.Add();
}
inline ::google::api::servicecontrol::v1::ReportResponse_ReportError* ReportResponse::add_report_errors() {
  // @@protoc_insertion_point(field_add:google.api.servicecontrol.v1.ReportResponse.report_errors)
  return _internal_add_report_errors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::servicecontrol::v1::ReportResponse_ReportError >&
ReportResponse::report_errors() const {
  // @@protoc_insertion_point(field_list:google.api.servicecontrol.v1.ReportResponse.report_errors)
  return report_errors_;
}

// string service_config_id = 2;
inline void ReportResponse::clear_service_config_id() {
  service_config_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& ReportResponse::service_config_id() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.ReportResponse.service_config_id)
  return _internal_service_config_id();
}
inline void ReportResponse::set_service_config_id(const std::string& value) {
  _internal_set_service_config_id(value);
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.ReportResponse.service_config_id)
}
inline std::string* ReportResponse::mutable_service_config_id() {
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.ReportResponse.service_config_id)
  return _internal_mutable_service_config_id();
}
inline const std::string& ReportResponse::_internal_service_config_id() const {
  return service_config_id_.Get();
}
inline void ReportResponse::_internal_set_service_config_id(const std::string& value) {
  
  service_config_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void ReportResponse::set_service_config_id(std::string&& value) {
  
  service_config_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.servicecontrol.v1.ReportResponse.service_config_id)
}
inline void ReportResponse::set_service_config_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_config_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.servicecontrol.v1.ReportResponse.service_config_id)
}
inline void ReportResponse::set_service_config_id(const char* value,
    size_t size) {
  
  service_config_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.servicecontrol.v1.ReportResponse.service_config_id)
}
inline std::string* ReportResponse::_internal_mutable_service_config_id() {
  
  return service_config_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* ReportResponse::release_service_config_id() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.ReportResponse.service_config_id)
  
  return service_config_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ReportResponse::set_allocated_service_config_id(std::string* service_config_id) {
  if (service_config_id != nullptr) {
    
  } else {
    
  }
  service_config_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_config_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.ReportResponse.service_config_id)
}
inline std::string* ReportResponse::unsafe_arena_release_service_config_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.servicecontrol.v1.ReportResponse.service_config_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return service_config_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ReportResponse::unsafe_arena_set_allocated_service_config_id(
    std::string* service_config_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (service_config_id != nullptr) {
    
  } else {
    
  }
  service_config_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      service_config_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.ReportResponse.service_config_id)
}

// string service_rollout_id = 4;
inline void ReportResponse::clear_service_rollout_id() {
  service_rollout_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& ReportResponse::service_rollout_id() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.ReportResponse.service_rollout_id)
  return _internal_service_rollout_id();
}
inline void ReportResponse::set_service_rollout_id(const std::string& value) {
  _internal_set_service_rollout_id(value);
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.ReportResponse.service_rollout_id)
}
inline std::string* ReportResponse::mutable_service_rollout_id() {
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.ReportResponse.service_rollout_id)
  return _internal_mutable_service_rollout_id();
}
inline const std::string& ReportResponse::_internal_service_rollout_id() const {
  return service_rollout_id_.Get();
}
inline void ReportResponse::_internal_set_service_rollout_id(const std::string& value) {
  
  service_rollout_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void ReportResponse::set_service_rollout_id(std::string&& value) {
  
  service_rollout_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.servicecontrol.v1.ReportResponse.service_rollout_id)
}
inline void ReportResponse::set_service_rollout_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_rollout_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.servicecontrol.v1.ReportResponse.service_rollout_id)
}
inline void ReportResponse::set_service_rollout_id(const char* value,
    size_t size) {
  
  service_rollout_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.servicecontrol.v1.ReportResponse.service_rollout_id)
}
inline std::string* ReportResponse::_internal_mutable_service_rollout_id() {
  
  return service_rollout_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* ReportResponse::release_service_rollout_id() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.ReportResponse.service_rollout_id)
  
  return service_rollout_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ReportResponse::set_allocated_service_rollout_id(std::string* service_rollout_id) {
  if (service_rollout_id != nullptr) {
    
  } else {
    
  }
  service_rollout_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), service_rollout_id,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.ReportResponse.service_rollout_id)
}
inline std::string* ReportResponse::unsafe_arena_release_service_rollout_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.servicecontrol.v1.ReportResponse.service_rollout_id)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return service_rollout_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ReportResponse::unsafe_arena_set_allocated_service_rollout_id(
    std::string* service_rollout_id) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (service_rollout_id != nullptr) {
    
  } else {
    
  }
  service_rollout_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      service_rollout_id, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.ReportResponse.service_rollout_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace servicecontrol
}  // namespace api
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto
