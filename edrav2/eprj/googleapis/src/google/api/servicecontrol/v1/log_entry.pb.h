// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/servicecontrol/v1/log_entry.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/logging/type/log_severity.pb.h"
#include <google/protobuf/any.pb.h>
#include <google/protobuf/struct.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto;
namespace google {
namespace api {
namespace servicecontrol {
namespace v1 {
class LogEntry;
class LogEntryDefaultTypeInternal;
extern LogEntryDefaultTypeInternal _LogEntry_default_instance_;
class LogEntry_LabelsEntry_DoNotUse;
class LogEntry_LabelsEntry_DoNotUseDefaultTypeInternal;
extern LogEntry_LabelsEntry_DoNotUseDefaultTypeInternal _LogEntry_LabelsEntry_DoNotUse_default_instance_;
}  // namespace v1
}  // namespace servicecontrol
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::api::servicecontrol::v1::LogEntry* Arena::CreateMaybeMessage<::google::api::servicecontrol::v1::LogEntry>(Arena*);
template<> ::google::api::servicecontrol::v1::LogEntry_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::api::servicecontrol::v1::LogEntry_LabelsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace api {
namespace servicecontrol {
namespace v1 {

// ===================================================================

class LogEntry_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LogEntry_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<LogEntry_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  LogEntry_LabelsEntry_DoNotUse();
  LogEntry_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const LogEntry_LabelsEntry_DoNotUse& other);
  static const LogEntry_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const LogEntry_LabelsEntry_DoNotUse*>(&_LogEntry_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.api.servicecontrol.v1.LogEntry.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.api.servicecontrol.v1.LogEntry.LabelsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto);
    return ::descriptor_table_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto.file_level_metadata[0];
  }

  public:
};

// -------------------------------------------------------------------

class LogEntry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.servicecontrol.v1.LogEntry) */ {
 public:
  LogEntry();
  virtual ~LogEntry();

  LogEntry(const LogEntry& from);
  LogEntry(LogEntry&& from) noexcept
    : LogEntry() {
    *this = ::std::move(from);
  }

  inline LogEntry& operator=(const LogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogEntry& operator=(LogEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogEntry& default_instance();

  enum PayloadCase {
    kProtoPayload = 2,
    kTextPayload = 3,
    kStructPayload = 6,
    PAYLOAD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogEntry* internal_default_instance() {
    return reinterpret_cast<const LogEntry*>(
               &_LogEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LogEntry& a, LogEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(LogEntry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogEntry* New() const final {
    return CreateMaybeMessage<LogEntry>(nullptr);
  }

  LogEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogEntry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogEntry& from);
  void MergeFrom(const LogEntry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogEntry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.servicecontrol.v1.LogEntry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto);
    return ::descriptor_table_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 13,
    kInsertIdFieldNumber = 4,
    kNameFieldNumber = 10,
    kTimestampFieldNumber = 11,
    kSeverityFieldNumber = 12,
    kProtoPayloadFieldNumber = 2,
    kTextPayloadFieldNumber = 3,
    kStructPayloadFieldNumber = 6,
  };
  // map<string, string> labels = 13;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // string insert_id = 4;
  void clear_insert_id();
  const std::string& insert_id() const;
  void set_insert_id(const std::string& value);
  void set_insert_id(std::string&& value);
  void set_insert_id(const char* value);
  void set_insert_id(const char* value, size_t size);
  std::string* mutable_insert_id();
  std::string* release_insert_id();
  void set_allocated_insert_id(std::string* insert_id);
  private:
  const std::string& _internal_insert_id() const;
  void _internal_set_insert_id(const std::string& value);
  std::string* _internal_mutable_insert_id();
  public:

  // string name = 10;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Timestamp timestamp = 11;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_timestamp();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_timestamp() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_timestamp();
  public:

  // .google.logging.type.LogSeverity severity = 12;
  void clear_severity();
  ::google::logging::type::LogSeverity severity() const;
  void set_severity(::google::logging::type::LogSeverity value);
  private:
  ::google::logging::type::LogSeverity _internal_severity() const;
  void _internal_set_severity(::google::logging::type::LogSeverity value);
  public:

  // .google.protobuf.Any proto_payload = 2;
  bool has_proto_payload() const;
  private:
  bool _internal_has_proto_payload() const;
  public:
  void clear_proto_payload();
  const PROTOBUF_NAMESPACE_ID::Any& proto_payload() const;
  PROTOBUF_NAMESPACE_ID::Any* release_proto_payload();
  PROTOBUF_NAMESPACE_ID::Any* mutable_proto_payload();
  void set_allocated_proto_payload(PROTOBUF_NAMESPACE_ID::Any* proto_payload);
  private:
  const PROTOBUF_NAMESPACE_ID::Any& _internal_proto_payload() const;
  PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_proto_payload();
  public:

  // string text_payload = 3;
  private:
  bool _internal_has_text_payload() const;
  public:
  void clear_text_payload();
  const std::string& text_payload() const;
  void set_text_payload(const std::string& value);
  void set_text_payload(std::string&& value);
  void set_text_payload(const char* value);
  void set_text_payload(const char* value, size_t size);
  std::string* mutable_text_payload();
  std::string* release_text_payload();
  void set_allocated_text_payload(std::string* text_payload);
  private:
  const std::string& _internal_text_payload() const;
  void _internal_set_text_payload(const std::string& value);
  std::string* _internal_mutable_text_payload();
  public:

  // .google.protobuf.Struct struct_payload = 6;
  bool has_struct_payload() const;
  private:
  bool _internal_has_struct_payload() const;
  public:
  void clear_struct_payload();
  const PROTOBUF_NAMESPACE_ID::Struct& struct_payload() const;
  PROTOBUF_NAMESPACE_ID::Struct* release_struct_payload();
  PROTOBUF_NAMESPACE_ID::Struct* mutable_struct_payload();
  void set_allocated_struct_payload(PROTOBUF_NAMESPACE_ID::Struct* struct_payload);
  private:
  const PROTOBUF_NAMESPACE_ID::Struct& _internal_struct_payload() const;
  PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_struct_payload();
  public:

  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:google.api.servicecontrol.v1.LogEntry)
 private:
  class _Internal;
  void set_has_proto_payload();
  void set_has_text_payload();
  void set_has_struct_payload();

  inline bool has_payload() const;
  inline void clear_has_payload();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      LogEntry_LabelsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr insert_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  PROTOBUF_NAMESPACE_ID::Timestamp* timestamp_;
  int severity_;
  union PayloadUnion {
    PayloadUnion() {}
    PROTOBUF_NAMESPACE_ID::Any* proto_payload_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_payload_;
    PROTOBUF_NAMESPACE_ID::Struct* struct_payload_;
  } payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// LogEntry

// string name = 10;
inline void LogEntry::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LogEntry::name() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.LogEntry.name)
  return _internal_name();
}
inline void LogEntry::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.LogEntry.name)
}
inline std::string* LogEntry::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.LogEntry.name)
  return _internal_mutable_name();
}
inline const std::string& LogEntry::_internal_name() const {
  return name_.GetNoArena();
}
inline void LogEntry::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LogEntry::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.servicecontrol.v1.LogEntry.name)
}
inline void LogEntry::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicecontrol.v1.LogEntry.name)
}
inline void LogEntry::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicecontrol.v1.LogEntry.name)
}
inline std::string* LogEntry::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogEntry::release_name() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.LogEntry.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogEntry::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.LogEntry.name)
}

// .google.protobuf.Timestamp timestamp = 11;
inline bool LogEntry::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool LogEntry::has_timestamp() const {
  return _internal_has_timestamp();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& LogEntry::_internal_timestamp() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = timestamp_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& LogEntry::timestamp() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.LogEntry.timestamp)
  return _internal_timestamp();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LogEntry::release_timestamp() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.LogEntry.timestamp)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LogEntry::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  return timestamp_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LogEntry::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.LogEntry.timestamp)
  return _internal_mutable_timestamp();
}
inline void LogEntry::set_allocated_timestamp(PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp)->GetArena();
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.LogEntry.timestamp)
}

// .google.logging.type.LogSeverity severity = 12;
inline void LogEntry::clear_severity() {
  severity_ = 0;
}
inline ::google::logging::type::LogSeverity LogEntry::_internal_severity() const {
  return static_cast< ::google::logging::type::LogSeverity >(severity_);
}
inline ::google::logging::type::LogSeverity LogEntry::severity() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.LogEntry.severity)
  return _internal_severity();
}
inline void LogEntry::_internal_set_severity(::google::logging::type::LogSeverity value) {
  
  severity_ = value;
}
inline void LogEntry::set_severity(::google::logging::type::LogSeverity value) {
  _internal_set_severity(value);
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.LogEntry.severity)
}

// string insert_id = 4;
inline void LogEntry::clear_insert_id() {
  insert_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LogEntry::insert_id() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.LogEntry.insert_id)
  return _internal_insert_id();
}
inline void LogEntry::set_insert_id(const std::string& value) {
  _internal_set_insert_id(value);
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.LogEntry.insert_id)
}
inline std::string* LogEntry::mutable_insert_id() {
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.LogEntry.insert_id)
  return _internal_mutable_insert_id();
}
inline const std::string& LogEntry::_internal_insert_id() const {
  return insert_id_.GetNoArena();
}
inline void LogEntry::_internal_set_insert_id(const std::string& value) {
  
  insert_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LogEntry::set_insert_id(std::string&& value) {
  
  insert_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.servicecontrol.v1.LogEntry.insert_id)
}
inline void LogEntry::set_insert_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  insert_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicecontrol.v1.LogEntry.insert_id)
}
inline void LogEntry::set_insert_id(const char* value, size_t size) {
  
  insert_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicecontrol.v1.LogEntry.insert_id)
}
inline std::string* LogEntry::_internal_mutable_insert_id() {
  
  return insert_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogEntry::release_insert_id() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.LogEntry.insert_id)
  
  return insert_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogEntry::set_allocated_insert_id(std::string* insert_id) {
  if (insert_id != nullptr) {
    
  } else {
    
  }
  insert_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), insert_id);
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.LogEntry.insert_id)
}

// map<string, string> labels = 13;
inline int LogEntry::_internal_labels_size() const {
  return labels_.size();
}
inline int LogEntry::labels_size() const {
  return _internal_labels_size();
}
inline void LogEntry::clear_labels() {
  labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
LogEntry::_internal_labels() const {
  return labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
LogEntry::labels() const {
  // @@protoc_insertion_point(field_map:google.api.servicecontrol.v1.LogEntry.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
LogEntry::_internal_mutable_labels() {
  return labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
LogEntry::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.api.servicecontrol.v1.LogEntry.labels)
  return _internal_mutable_labels();
}

// .google.protobuf.Any proto_payload = 2;
inline bool LogEntry::_internal_has_proto_payload() const {
  return payload_case() == kProtoPayload;
}
inline bool LogEntry::has_proto_payload() const {
  return _internal_has_proto_payload();
}
inline void LogEntry::set_has_proto_payload() {
  _oneof_case_[0] = kProtoPayload;
}
inline PROTOBUF_NAMESPACE_ID::Any* LogEntry::release_proto_payload() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.LogEntry.proto_payload)
  if (has_proto_payload()) {
    clear_has_payload();
      PROTOBUF_NAMESPACE_ID::Any* temp = payload_.proto_payload_;
    payload_.proto_payload_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Any& LogEntry::_internal_proto_payload() const {
  return _internal_has_proto_payload()
      ? *payload_.proto_payload_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Any*>(&PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Any& LogEntry::proto_payload() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.LogEntry.proto_payload)
  return _internal_proto_payload();
}
inline PROTOBUF_NAMESPACE_ID::Any* LogEntry::_internal_mutable_proto_payload() {
  if (!_internal_has_proto_payload()) {
    clear_payload();
    set_has_proto_payload();
    payload_.proto_payload_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Any >(
        GetArenaNoVirtual());
  }
  return payload_.proto_payload_;
}
inline PROTOBUF_NAMESPACE_ID::Any* LogEntry::mutable_proto_payload() {
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.LogEntry.proto_payload)
  return _internal_mutable_proto_payload();
}

// string text_payload = 3;
inline bool LogEntry::_internal_has_text_payload() const {
  return payload_case() == kTextPayload;
}
inline void LogEntry::set_has_text_payload() {
  _oneof_case_[0] = kTextPayload;
}
inline void LogEntry::clear_text_payload() {
  if (_internal_has_text_payload()) {
    payload_.text_payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_payload();
  }
}
inline const std::string& LogEntry::text_payload() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.LogEntry.text_payload)
  return _internal_text_payload();
}
inline void LogEntry::set_text_payload(const std::string& value) {
  _internal_set_text_payload(value);
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.LogEntry.text_payload)
}
inline std::string* LogEntry::mutable_text_payload() {
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.LogEntry.text_payload)
  return _internal_mutable_text_payload();
}
inline const std::string& LogEntry::_internal_text_payload() const {
  if (_internal_has_text_payload()) {
    return payload_.text_payload_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void LogEntry::_internal_set_text_payload(const std::string& value) {
  if (!_internal_has_text_payload()) {
    clear_payload();
    set_has_text_payload();
    payload_.text_payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.text_payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LogEntry::set_text_payload(std::string&& value) {
  // @@protoc_insertion_point(field_set:google.api.servicecontrol.v1.LogEntry.text_payload)
  if (!_internal_has_text_payload()) {
    clear_payload();
    set_has_text_payload();
    payload_.text_payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.text_payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.api.servicecontrol.v1.LogEntry.text_payload)
}
inline void LogEntry::set_text_payload(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_text_payload()) {
    clear_payload();
    set_has_text_payload();
    payload_.text_payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.text_payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.api.servicecontrol.v1.LogEntry.text_payload)
}
inline void LogEntry::set_text_payload(const char* value, size_t size) {
  if (!_internal_has_text_payload()) {
    clear_payload();
    set_has_text_payload();
    payload_.text_payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  payload_.text_payload_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.api.servicecontrol.v1.LogEntry.text_payload)
}
inline std::string* LogEntry::_internal_mutable_text_payload() {
  if (!_internal_has_text_payload()) {
    clear_payload();
    set_has_text_payload();
    payload_.text_payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return payload_.text_payload_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogEntry::release_text_payload() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.LogEntry.text_payload)
  if (_internal_has_text_payload()) {
    clear_has_payload();
    return payload_.text_payload_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void LogEntry::set_allocated_text_payload(std::string* text_payload) {
  if (has_payload()) {
    clear_payload();
  }
  if (text_payload != nullptr) {
    set_has_text_payload();
    payload_.text_payload_.UnsafeSetDefault(text_payload);
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.servicecontrol.v1.LogEntry.text_payload)
}

// .google.protobuf.Struct struct_payload = 6;
inline bool LogEntry::_internal_has_struct_payload() const {
  return payload_case() == kStructPayload;
}
inline bool LogEntry::has_struct_payload() const {
  return _internal_has_struct_payload();
}
inline void LogEntry::set_has_struct_payload() {
  _oneof_case_[0] = kStructPayload;
}
inline PROTOBUF_NAMESPACE_ID::Struct* LogEntry::release_struct_payload() {
  // @@protoc_insertion_point(field_release:google.api.servicecontrol.v1.LogEntry.struct_payload)
  if (has_struct_payload()) {
    clear_has_payload();
      PROTOBUF_NAMESPACE_ID::Struct* temp = payload_.struct_payload_;
    payload_.struct_payload_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const PROTOBUF_NAMESPACE_ID::Struct& LogEntry::_internal_struct_payload() const {
  return _internal_has_struct_payload()
      ? *payload_.struct_payload_
      : *reinterpret_cast< PROTOBUF_NAMESPACE_ID::Struct*>(&PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Struct& LogEntry::struct_payload() const {
  // @@protoc_insertion_point(field_get:google.api.servicecontrol.v1.LogEntry.struct_payload)
  return _internal_struct_payload();
}
inline PROTOBUF_NAMESPACE_ID::Struct* LogEntry::_internal_mutable_struct_payload() {
  if (!_internal_has_struct_payload()) {
    clear_payload();
    set_has_struct_payload();
    payload_.struct_payload_ = CreateMaybeMessage< PROTOBUF_NAMESPACE_ID::Struct >(
        GetArenaNoVirtual());
  }
  return payload_.struct_payload_;
}
inline PROTOBUF_NAMESPACE_ID::Struct* LogEntry::mutable_struct_payload() {
  // @@protoc_insertion_point(field_mutable:google.api.servicecontrol.v1.LogEntry.struct_payload)
  return _internal_mutable_struct_payload();
}

inline bool LogEntry::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void LogEntry::clear_has_payload() {
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline LogEntry::PayloadCase LogEntry::payload_case() const {
  return LogEntry::PayloadCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace servicecontrol
}  // namespace api
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fservicecontrol_2fv1_2flog_5fentry_2eproto
