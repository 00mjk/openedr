// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/servicecontrol/v1/quota_controller.proto

#include "google/api/servicecontrol/v1/quota_controller.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fservicecontrol_2fv1_2fmetric_5fvalue_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MetricValueSet_google_2fapi_2fservicecontrol_2fv1_2fmetric_5fvalue_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QuotaError_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_QuotaOperation_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QuotaOperation_LabelsEntry_DoNotUse_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto;
namespace google {
namespace api {
namespace servicecontrol {
namespace v1 {
class AllocateQuotaRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AllocateQuotaRequest> _instance;
} _AllocateQuotaRequest_default_instance_;
class QuotaOperation_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QuotaOperation_LabelsEntry_DoNotUse> _instance;
} _QuotaOperation_LabelsEntry_DoNotUse_default_instance_;
class QuotaOperationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QuotaOperation> _instance;
} _QuotaOperation_default_instance_;
class AllocateQuotaResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AllocateQuotaResponse> _instance;
} _AllocateQuotaResponse_default_instance_;
class QuotaErrorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<QuotaError> _instance;
} _QuotaError_default_instance_;
}  // namespace v1
}  // namespace servicecontrol
}  // namespace api
}  // namespace google
static void InitDefaultsscc_info_AllocateQuotaRequest_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::api::servicecontrol::v1::_AllocateQuotaRequest_default_instance_;
    new (ptr) ::google::api::servicecontrol::v1::AllocateQuotaRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::api::servicecontrol::v1::AllocateQuotaRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AllocateQuotaRequest_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AllocateQuotaRequest_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto}, {
      &scc_info_QuotaOperation_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto.base,}};

static void InitDefaultsscc_info_AllocateQuotaResponse_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::api::servicecontrol::v1::_AllocateQuotaResponse_default_instance_;
    new (ptr) ::google::api::servicecontrol::v1::AllocateQuotaResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::api::servicecontrol::v1::AllocateQuotaResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AllocateQuotaResponse_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AllocateQuotaResponse_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto}, {
      &scc_info_QuotaError_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto.base,
      &scc_info_MetricValueSet_google_2fapi_2fservicecontrol_2fv1_2fmetric_5fvalue_2eproto.base,}};

static void InitDefaultsscc_info_QuotaError_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::api::servicecontrol::v1::_QuotaError_default_instance_;
    new (ptr) ::google::api::servicecontrol::v1::QuotaError();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::api::servicecontrol::v1::QuotaError::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QuotaError_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QuotaError_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto}, {}};

static void InitDefaultsscc_info_QuotaOperation_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::api::servicecontrol::v1::_QuotaOperation_default_instance_;
    new (ptr) ::google::api::servicecontrol::v1::QuotaOperation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::api::servicecontrol::v1::QuotaOperation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_QuotaOperation_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_QuotaOperation_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto}, {
      &scc_info_QuotaOperation_LabelsEntry_DoNotUse_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto.base,
      &scc_info_MetricValueSet_google_2fapi_2fservicecontrol_2fv1_2fmetric_5fvalue_2eproto.base,}};

static void InitDefaultsscc_info_QuotaOperation_LabelsEntry_DoNotUse_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::api::servicecontrol::v1::_QuotaOperation_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::google::api::servicecontrol::v1::QuotaOperation_LabelsEntry_DoNotUse();
  }
  ::google::api::servicecontrol::v1::QuotaOperation_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_QuotaOperation_LabelsEntry_DoNotUse_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_QuotaOperation_LabelsEntry_DoNotUse_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::AllocateQuotaRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::AllocateQuotaRequest, service_name_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::AllocateQuotaRequest, allocate_operation_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::AllocateQuotaRequest, service_config_id_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::QuotaOperation_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::QuotaOperation_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::QuotaOperation_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::QuotaOperation_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::QuotaOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::QuotaOperation, operation_id_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::QuotaOperation, method_name_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::QuotaOperation, consumer_id_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::QuotaOperation, labels_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::QuotaOperation, quota_metrics_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::QuotaOperation, quota_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::AllocateQuotaResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::AllocateQuotaResponse, operation_id_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::AllocateQuotaResponse, allocate_errors_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::AllocateQuotaResponse, quota_metrics_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::AllocateQuotaResponse, service_config_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::QuotaError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::QuotaError, code_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::QuotaError, subject_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::QuotaError, description_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::api::servicecontrol::v1::AllocateQuotaRequest)},
  { 8, 15, sizeof(::google::api::servicecontrol::v1::QuotaOperation_LabelsEntry_DoNotUse)},
  { 17, -1, sizeof(::google::api::servicecontrol::v1::QuotaOperation)},
  { 28, -1, sizeof(::google::api::servicecontrol::v1::AllocateQuotaResponse)},
  { 37, -1, sizeof(::google::api::servicecontrol::v1::QuotaError)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::servicecontrol::v1::_AllocateQuotaRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::servicecontrol::v1::_QuotaOperation_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::servicecontrol::v1::_QuotaOperation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::servicecontrol::v1::_AllocateQuotaResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::servicecontrol::v1::_QuotaError_default_instance_),
};

const char descriptor_table_protodef_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n3google/api/servicecontrol/v1/quota_con"
  "troller.proto\022\034google.api.servicecontrol"
  ".v1\032\034google/api/annotations.proto\032/googl"
  "e/api/servicecontrol/v1/metric_value.pro"
  "to\"\221\001\n\024AllocateQuotaRequest\022\024\n\014service_n"
  "ame\030\001 \001(\t\022H\n\022allocate_operation\030\002 \001(\0132,."
  "google.api.servicecontrol.v1.QuotaOperat"
  "ion\022\031\n\021service_config_id\030\004 \001(\t\"\245\003\n\016Quota"
  "Operation\022\024\n\014operation_id\030\001 \001(\t\022\023\n\013metho"
  "d_name\030\002 \001(\t\022\023\n\013consumer_id\030\003 \001(\t\022H\n\006lab"
  "els\030\004 \003(\01328.google.api.servicecontrol.v1"
  ".QuotaOperation.LabelsEntry\022C\n\rquota_met"
  "rics\030\005 \003(\0132,.google.api.servicecontrol.v"
  "1.MetricValueSet\022J\n\nquota_mode\030\006 \001(\01626.g"
  "oogle.api.servicecontrol.v1.QuotaOperati"
  "on.QuotaMode\032-\n\013LabelsEntry\022\013\n\003key\030\001 \001(\t"
  "\022\r\n\005value\030\002 \001(\t:\0028\001\"I\n\tQuotaMode\022\017\n\013UNSP"
  "ECIFIED\020\000\022\n\n\006NORMAL\020\001\022\017\n\013BEST_EFFORT\020\002\022\016"
  "\n\nCHECK_ONLY\020\003\"\320\001\n\025AllocateQuotaResponse"
  "\022\024\n\014operation_id\030\001 \001(\t\022A\n\017allocate_error"
  "s\030\002 \003(\0132(.google.api.servicecontrol.v1.Q"
  "uotaError\022C\n\rquota_metrics\030\003 \003(\0132,.googl"
  "e.api.servicecontrol.v1.MetricValueSet\022\031"
  "\n\021service_config_id\030\004 \001(\t\"\370\001\n\nQuotaError"
  "\022;\n\004code\030\001 \001(\0162-.google.api.servicecontr"
  "ol.v1.QuotaError.Code\022\017\n\007subject\030\002 \001(\t\022\023"
  "\n\013description\030\003 \001(\t\"\206\001\n\004Code\022\017\n\013UNSPECIF"
  "IED\020\000\022\026\n\022RESOURCE_EXHAUSTED\020\010\022\026\n\022BILLING"
  "_NOT_ACTIVE\020k\022\023\n\017PROJECT_DELETED\020l\022\023\n\017AP"
  "I_KEY_INVALID\020i\022\023\n\017API_KEY_EXPIRED\020p2\302\001\n"
  "\017QuotaController\022\256\001\n\rAllocateQuota\0222.goo"
  "gle.api.servicecontrol.v1.AllocateQuotaR"
  "equest\0323.google.api.servicecontrol.v1.Al"
  "locateQuotaResponse\"4\202\323\344\223\002.\")/v1/service"
  "s/{service_name}:allocateQuota:\001*B\211\001\n co"
  "m.google.api.servicecontrol.v1B\024QuotaCon"
  "trollerProtoP\001ZJgoogle.golang.org/genpro"
  "to/googleapis/api/servicecontrol/v1;serv"
  "icecontrol\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto_deps[2] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fmetric_5fvalue_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto_sccs[5] = {
  &scc_info_AllocateQuotaRequest_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto.base,
  &scc_info_AllocateQuotaResponse_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto.base,
  &scc_info_QuotaError_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto.base,
  &scc_info_QuotaOperation_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto.base,
  &scc_info_QuotaOperation_LabelsEntry_DoNotUse_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto_once;
static bool descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto = {
  &descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto_initialized, descriptor_table_protodef_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto, "google/api/servicecontrol/v1/quota_controller.proto", 1541,
  &descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto_once, descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto_sccs, descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto_deps, 5, 2,
  schemas, file_default_instances, TableStruct_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto::offsets,
  file_level_metadata_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto, 5, file_level_enum_descriptors_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto, file_level_service_descriptors_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto), true);
namespace google {
namespace api {
namespace servicecontrol {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QuotaOperation_QuotaMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto);
  return file_level_enum_descriptors_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto[0];
}
bool QuotaOperation_QuotaMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr QuotaOperation_QuotaMode QuotaOperation::UNSPECIFIED;
constexpr QuotaOperation_QuotaMode QuotaOperation::NORMAL;
constexpr QuotaOperation_QuotaMode QuotaOperation::BEST_EFFORT;
constexpr QuotaOperation_QuotaMode QuotaOperation::CHECK_ONLY;
constexpr QuotaOperation_QuotaMode QuotaOperation::QuotaMode_MIN;
constexpr QuotaOperation_QuotaMode QuotaOperation::QuotaMode_MAX;
constexpr int QuotaOperation::QuotaMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* QuotaError_Code_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto);
  return file_level_enum_descriptors_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto[1];
}
bool QuotaError_Code_IsValid(int value) {
  switch (value) {
    case 0:
    case 8:
    case 105:
    case 107:
    case 108:
    case 112:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr QuotaError_Code QuotaError::UNSPECIFIED;
constexpr QuotaError_Code QuotaError::RESOURCE_EXHAUSTED;
constexpr QuotaError_Code QuotaError::BILLING_NOT_ACTIVE;
constexpr QuotaError_Code QuotaError::PROJECT_DELETED;
constexpr QuotaError_Code QuotaError::API_KEY_INVALID;
constexpr QuotaError_Code QuotaError::API_KEY_EXPIRED;
constexpr QuotaError_Code QuotaError::Code_MIN;
constexpr QuotaError_Code QuotaError::Code_MAX;
constexpr int QuotaError::Code_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void AllocateQuotaRequest::InitAsDefaultInstance() {
  ::google::api::servicecontrol::v1::_AllocateQuotaRequest_default_instance_._instance.get_mutable()->allocate_operation_ = const_cast< ::google::api::servicecontrol::v1::QuotaOperation*>(
      ::google::api::servicecontrol::v1::QuotaOperation::internal_default_instance());
}
class AllocateQuotaRequest::_Internal {
 public:
  static const ::google::api::servicecontrol::v1::QuotaOperation& allocate_operation(const AllocateQuotaRequest* msg);
};

const ::google::api::servicecontrol::v1::QuotaOperation&
AllocateQuotaRequest::_Internal::allocate_operation(const AllocateQuotaRequest* msg) {
  return *msg->allocate_operation_;
}
void AllocateQuotaRequest::unsafe_arena_set_allocated_allocate_operation(
    ::google::api::servicecontrol::v1::QuotaOperation* allocate_operation) {
  if (GetArenaNoVirtual() == nullptr) {
    delete allocate_operation_;
  }
  allocate_operation_ = allocate_operation;
  if (allocate_operation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.AllocateQuotaRequest.allocate_operation)
}
AllocateQuotaRequest::AllocateQuotaRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicecontrol.v1.AllocateQuotaRequest)
}
AllocateQuotaRequest::AllocateQuotaRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.api.servicecontrol.v1.AllocateQuotaRequest)
}
AllocateQuotaRequest::AllocateQuotaRequest(const AllocateQuotaRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_name().empty()) {
    service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_service_name(),
      GetArenaNoVirtual());
  }
  service_config_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_config_id().empty()) {
    service_config_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_service_config_id(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_allocate_operation()) {
    allocate_operation_ = new ::google::api::servicecontrol::v1::QuotaOperation(*from.allocate_operation_);
  } else {
    allocate_operation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.api.servicecontrol.v1.AllocateQuotaRequest)
}

void AllocateQuotaRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AllocateQuotaRequest_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto.base);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_config_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  allocate_operation_ = nullptr;
}

AllocateQuotaRequest::~AllocateQuotaRequest() {
  // @@protoc_insertion_point(destructor:google.api.servicecontrol.v1.AllocateQuotaRequest)
  SharedDtor();
}

void AllocateQuotaRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_config_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete allocate_operation_;
}

void AllocateQuotaRequest::ArenaDtor(void* object) {
  AllocateQuotaRequest* _this = reinterpret_cast< AllocateQuotaRequest* >(object);
  (void)_this;
}
void AllocateQuotaRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllocateQuotaRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllocateQuotaRequest& AllocateQuotaRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AllocateQuotaRequest_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void AllocateQuotaRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicecontrol.v1.AllocateQuotaRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  service_config_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && allocate_operation_ != nullptr) {
    delete allocate_operation_;
  }
  allocate_operation_ = nullptr;
  _internal_metadata_.Clear();
}

const char* AllocateQuotaRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_service_name(), ptr, ctx, "google.api.servicecontrol.v1.AllocateQuotaRequest.service_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.api.servicecontrol.v1.QuotaOperation allocate_operation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_allocate_operation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string service_config_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_service_config_id(), ptr, ctx, "google.api.servicecontrol.v1.AllocateQuotaRequest.service_config_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllocateQuotaRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicecontrol.v1.AllocateQuotaRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.servicecontrol.v1.AllocateQuotaRequest.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  // .google.api.servicecontrol.v1.QuotaOperation allocate_operation = 2;
  if (this->has_allocate_operation()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::allocate_operation(this), target, stream);
  }

  // string service_config_id = 4;
  if (this->service_config_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_config_id().data(), static_cast<int>(this->_internal_service_config_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.servicecontrol.v1.AllocateQuotaRequest.service_config_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_service_config_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicecontrol.v1.AllocateQuotaRequest)
  return target;
}

size_t AllocateQuotaRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicecontrol.v1.AllocateQuotaRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // string service_config_id = 4;
  if (this->service_config_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_config_id());
  }

  // .google.api.servicecontrol.v1.QuotaOperation allocate_operation = 2;
  if (this->has_allocate_operation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *allocate_operation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllocateQuotaRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicecontrol.v1.AllocateQuotaRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AllocateQuotaRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AllocateQuotaRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicecontrol.v1.AllocateQuotaRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicecontrol.v1.AllocateQuotaRequest)
    MergeFrom(*source);
  }
}

void AllocateQuotaRequest::MergeFrom(const AllocateQuotaRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicecontrol.v1.AllocateQuotaRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service_name().size() > 0) {
    _internal_set_service_name(from._internal_service_name());
  }
  if (from.service_config_id().size() > 0) {
    _internal_set_service_config_id(from._internal_service_config_id());
  }
  if (from.has_allocate_operation()) {
    _internal_mutable_allocate_operation()->::google::api::servicecontrol::v1::QuotaOperation::MergeFrom(from._internal_allocate_operation());
  }
}

void AllocateQuotaRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicecontrol.v1.AllocateQuotaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocateQuotaRequest::CopyFrom(const AllocateQuotaRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicecontrol.v1.AllocateQuotaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocateQuotaRequest::IsInitialized() const {
  return true;
}

void AllocateQuotaRequest::InternalSwap(AllocateQuotaRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  service_name_.Swap(&other->service_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  service_config_id_.Swap(&other->service_config_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(allocate_operation_, other->allocate_operation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AllocateQuotaRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

QuotaOperation_LabelsEntry_DoNotUse::QuotaOperation_LabelsEntry_DoNotUse() {}
QuotaOperation_LabelsEntry_DoNotUse::QuotaOperation_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void QuotaOperation_LabelsEntry_DoNotUse::MergeFrom(const QuotaOperation_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata QuotaOperation_LabelsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void QuotaOperation_LabelsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void QuotaOperation::InitAsDefaultInstance() {
}
class QuotaOperation::_Internal {
 public:
};

void QuotaOperation::clear_quota_metrics() {
  quota_metrics_.Clear();
}
QuotaOperation::QuotaOperation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicecontrol.v1.QuotaOperation)
}
QuotaOperation::QuotaOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  labels_(arena),
  quota_metrics_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.api.servicecontrol.v1.QuotaOperation)
}
QuotaOperation::QuotaOperation(const QuotaOperation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      quota_metrics_(from.quota_metrics_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  operation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_operation_id().empty()) {
    operation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_operation_id(),
      GetArenaNoVirtual());
  }
  method_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_method_name().empty()) {
    method_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_method_name(),
      GetArenaNoVirtual());
  }
  consumer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_consumer_id().empty()) {
    consumer_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_consumer_id(),
      GetArenaNoVirtual());
  }
  quota_mode_ = from.quota_mode_;
  // @@protoc_insertion_point(copy_constructor:google.api.servicecontrol.v1.QuotaOperation)
}

void QuotaOperation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QuotaOperation_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto.base);
  operation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  method_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  consumer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  quota_mode_ = 0;
}

QuotaOperation::~QuotaOperation() {
  // @@protoc_insertion_point(destructor:google.api.servicecontrol.v1.QuotaOperation)
  SharedDtor();
}

void QuotaOperation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  operation_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  method_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  consumer_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QuotaOperation::ArenaDtor(void* object) {
  QuotaOperation* _this = reinterpret_cast< QuotaOperation* >(object);
  (void)_this;
}
void QuotaOperation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QuotaOperation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuotaOperation& QuotaOperation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QuotaOperation_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void QuotaOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicecontrol.v1.QuotaOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  quota_metrics_.Clear();
  operation_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  method_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  consumer_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  quota_mode_ = 0;
  _internal_metadata_.Clear();
}

const char* QuotaOperation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string operation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_operation_id(), ptr, ctx, "google.api.servicecontrol.v1.QuotaOperation.operation_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string method_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_method_name(), ptr, ctx, "google.api.servicecontrol.v1.QuotaOperation.method_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string consumer_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_consumer_id(), ptr, ctx, "google.api.servicecontrol.v1.QuotaOperation.consumer_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> labels = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&labels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .google.api.servicecontrol.v1.MetricValueSet quota_metrics = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_quota_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.api.servicecontrol.v1.QuotaOperation.QuotaMode quota_mode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_quota_mode(static_cast<::google::api::servicecontrol::v1::QuotaOperation_QuotaMode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QuotaOperation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicecontrol.v1.QuotaOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string operation_id = 1;
  if (this->operation_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operation_id().data(), static_cast<int>(this->_internal_operation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.servicecontrol.v1.QuotaOperation.operation_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_operation_id(), target);
  }

  // string method_name = 2;
  if (this->method_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_method_name().data(), static_cast<int>(this->_internal_method_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.servicecontrol.v1.QuotaOperation.method_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_method_name(), target);
  }

  // string consumer_id = 3;
  if (this->consumer_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_consumer_id().data(), static_cast<int>(this->_internal_consumer_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.servicecontrol.v1.QuotaOperation.consumer_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_consumer_id(), target);
  }

  // map<string, string> labels = 4;
  if (!this->_internal_labels().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "google.api.servicecontrol.v1.QuotaOperation.LabelsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "google.api.servicecontrol.v1.QuotaOperation.LabelsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_labels().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = QuotaOperation_LabelsEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it) {
        target = QuotaOperation_LabelsEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .google.api.servicecontrol.v1.MetricValueSet quota_metrics = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_quota_metrics_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(5, this->_internal_quota_metrics(i), target, stream);
  }

  // .google.api.servicecontrol.v1.QuotaOperation.QuotaMode quota_mode = 6;
  if (this->quota_mode() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_quota_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicecontrol.v1.QuotaOperation)
  return target;
}

size_t QuotaOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicecontrol.v1.QuotaOperation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> labels = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_labels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_labels().begin();
      it != this->_internal_labels().end(); ++it) {
    total_size += QuotaOperation_LabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .google.api.servicecontrol.v1.MetricValueSet quota_metrics = 5;
  total_size += 1UL * this->_internal_quota_metrics_size();
  for (const auto& msg : this->quota_metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string operation_id = 1;
  if (this->operation_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operation_id());
  }

  // string method_name = 2;
  if (this->method_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_method_name());
  }

  // string consumer_id = 3;
  if (this->consumer_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_consumer_id());
  }

  // .google.api.servicecontrol.v1.QuotaOperation.QuotaMode quota_mode = 6;
  if (this->quota_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_quota_mode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuotaOperation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicecontrol.v1.QuotaOperation)
  GOOGLE_DCHECK_NE(&from, this);
  const QuotaOperation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QuotaOperation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicecontrol.v1.QuotaOperation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicecontrol.v1.QuotaOperation)
    MergeFrom(*source);
  }
}

void QuotaOperation::MergeFrom(const QuotaOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicecontrol.v1.QuotaOperation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  quota_metrics_.MergeFrom(from.quota_metrics_);
  if (from.operation_id().size() > 0) {
    _internal_set_operation_id(from._internal_operation_id());
  }
  if (from.method_name().size() > 0) {
    _internal_set_method_name(from._internal_method_name());
  }
  if (from.consumer_id().size() > 0) {
    _internal_set_consumer_id(from._internal_consumer_id());
  }
  if (from.quota_mode() != 0) {
    _internal_set_quota_mode(from._internal_quota_mode());
  }
}

void QuotaOperation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicecontrol.v1.QuotaOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuotaOperation::CopyFrom(const QuotaOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicecontrol.v1.QuotaOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuotaOperation::IsInitialized() const {
  return true;
}

void QuotaOperation::InternalSwap(QuotaOperation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  labels_.Swap(&other->labels_);
  quota_metrics_.InternalSwap(&other->quota_metrics_);
  operation_id_.Swap(&other->operation_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  method_name_.Swap(&other->method_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  consumer_id_.Swap(&other->consumer_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(quota_mode_, other->quota_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuotaOperation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AllocateQuotaResponse::InitAsDefaultInstance() {
}
class AllocateQuotaResponse::_Internal {
 public:
};

void AllocateQuotaResponse::clear_quota_metrics() {
  quota_metrics_.Clear();
}
AllocateQuotaResponse::AllocateQuotaResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicecontrol.v1.AllocateQuotaResponse)
}
AllocateQuotaResponse::AllocateQuotaResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  allocate_errors_(arena),
  quota_metrics_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.api.servicecontrol.v1.AllocateQuotaResponse)
}
AllocateQuotaResponse::AllocateQuotaResponse(const AllocateQuotaResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      allocate_errors_(from.allocate_errors_),
      quota_metrics_(from.quota_metrics_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  operation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_operation_id().empty()) {
    operation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_operation_id(),
      GetArenaNoVirtual());
  }
  service_config_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_config_id().empty()) {
    service_config_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_service_config_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.api.servicecontrol.v1.AllocateQuotaResponse)
}

void AllocateQuotaResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AllocateQuotaResponse_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto.base);
  operation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_config_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AllocateQuotaResponse::~AllocateQuotaResponse() {
  // @@protoc_insertion_point(destructor:google.api.servicecontrol.v1.AllocateQuotaResponse)
  SharedDtor();
}

void AllocateQuotaResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  operation_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_config_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AllocateQuotaResponse::ArenaDtor(void* object) {
  AllocateQuotaResponse* _this = reinterpret_cast< AllocateQuotaResponse* >(object);
  (void)_this;
}
void AllocateQuotaResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AllocateQuotaResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AllocateQuotaResponse& AllocateQuotaResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AllocateQuotaResponse_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void AllocateQuotaResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicecontrol.v1.AllocateQuotaResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  allocate_errors_.Clear();
  quota_metrics_.Clear();
  operation_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  service_config_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

const char* AllocateQuotaResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string operation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_operation_id(), ptr, ctx, "google.api.servicecontrol.v1.AllocateQuotaResponse.operation_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .google.api.servicecontrol.v1.QuotaError allocate_errors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_allocate_errors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .google.api.servicecontrol.v1.MetricValueSet quota_metrics = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_quota_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string service_config_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_service_config_id(), ptr, ctx, "google.api.servicecontrol.v1.AllocateQuotaResponse.service_config_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AllocateQuotaResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicecontrol.v1.AllocateQuotaResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string operation_id = 1;
  if (this->operation_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operation_id().data(), static_cast<int>(this->_internal_operation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.servicecontrol.v1.AllocateQuotaResponse.operation_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_operation_id(), target);
  }

  // repeated .google.api.servicecontrol.v1.QuotaError allocate_errors = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_allocate_errors_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_allocate_errors(i), target, stream);
  }

  // repeated .google.api.servicecontrol.v1.MetricValueSet quota_metrics = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_quota_metrics_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_quota_metrics(i), target, stream);
  }

  // string service_config_id = 4;
  if (this->service_config_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_config_id().data(), static_cast<int>(this->_internal_service_config_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.servicecontrol.v1.AllocateQuotaResponse.service_config_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_service_config_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicecontrol.v1.AllocateQuotaResponse)
  return target;
}

size_t AllocateQuotaResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicecontrol.v1.AllocateQuotaResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.api.servicecontrol.v1.QuotaError allocate_errors = 2;
  total_size += 1UL * this->_internal_allocate_errors_size();
  for (const auto& msg : this->allocate_errors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .google.api.servicecontrol.v1.MetricValueSet quota_metrics = 3;
  total_size += 1UL * this->_internal_quota_metrics_size();
  for (const auto& msg : this->quota_metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string operation_id = 1;
  if (this->operation_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operation_id());
  }

  // string service_config_id = 4;
  if (this->service_config_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_config_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AllocateQuotaResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicecontrol.v1.AllocateQuotaResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AllocateQuotaResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AllocateQuotaResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicecontrol.v1.AllocateQuotaResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicecontrol.v1.AllocateQuotaResponse)
    MergeFrom(*source);
  }
}

void AllocateQuotaResponse::MergeFrom(const AllocateQuotaResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicecontrol.v1.AllocateQuotaResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  allocate_errors_.MergeFrom(from.allocate_errors_);
  quota_metrics_.MergeFrom(from.quota_metrics_);
  if (from.operation_id().size() > 0) {
    _internal_set_operation_id(from._internal_operation_id());
  }
  if (from.service_config_id().size() > 0) {
    _internal_set_service_config_id(from._internal_service_config_id());
  }
}

void AllocateQuotaResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicecontrol.v1.AllocateQuotaResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllocateQuotaResponse::CopyFrom(const AllocateQuotaResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicecontrol.v1.AllocateQuotaResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocateQuotaResponse::IsInitialized() const {
  return true;
}

void AllocateQuotaResponse::InternalSwap(AllocateQuotaResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  allocate_errors_.InternalSwap(&other->allocate_errors_);
  quota_metrics_.InternalSwap(&other->quota_metrics_);
  operation_id_.Swap(&other->operation_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  service_config_id_.Swap(&other->service_config_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata AllocateQuotaResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void QuotaError::InitAsDefaultInstance() {
}
class QuotaError::_Internal {
 public:
};

QuotaError::QuotaError()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicecontrol.v1.QuotaError)
}
QuotaError::QuotaError(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.api.servicecontrol.v1.QuotaError)
}
QuotaError::QuotaError(const QuotaError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_subject().empty()) {
    subject_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_subject(),
      GetArenaNoVirtual());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArenaNoVirtual());
  }
  code_ = from.code_;
  // @@protoc_insertion_point(copy_constructor:google.api.servicecontrol.v1.QuotaError)
}

void QuotaError::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_QuotaError_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto.base);
  subject_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  code_ = 0;
}

QuotaError::~QuotaError() {
  // @@protoc_insertion_point(destructor:google.api.servicecontrol.v1.QuotaError)
  SharedDtor();
}

void QuotaError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  subject_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void QuotaError::ArenaDtor(void* object) {
  QuotaError* _this = reinterpret_cast< QuotaError* >(object);
  (void)_this;
}
void QuotaError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QuotaError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const QuotaError& QuotaError::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_QuotaError_google_2fapi_2fservicecontrol_2fv1_2fquota_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void QuotaError::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicecontrol.v1.QuotaError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subject_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  code_ = 0;
  _internal_metadata_.Clear();
}

const char* QuotaError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.api.servicecontrol.v1.QuotaError.Code code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_code(static_cast<::google::api::servicecontrol::v1::QuotaError_Code>(val));
        } else goto handle_unusual;
        continue;
      // string subject = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_subject(), ptr, ctx, "google.api.servicecontrol.v1.QuotaError.subject");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_description(), ptr, ctx, "google.api.servicecontrol.v1.QuotaError.description");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* QuotaError::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicecontrol.v1.QuotaError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.api.servicecontrol.v1.QuotaError.Code code = 1;
  if (this->code() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_code(), target);
  }

  // string subject = 2;
  if (this->subject().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subject().data(), static_cast<int>(this->_internal_subject().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.servicecontrol.v1.QuotaError.subject");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_subject(), target);
  }

  // string description = 3;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.servicecontrol.v1.QuotaError.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicecontrol.v1.QuotaError)
  return target;
}

size_t QuotaError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicecontrol.v1.QuotaError)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subject = 2;
  if (this->subject().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subject());
  }

  // string description = 3;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .google.api.servicecontrol.v1.QuotaError.Code code = 1;
  if (this->code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void QuotaError::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicecontrol.v1.QuotaError)
  GOOGLE_DCHECK_NE(&from, this);
  const QuotaError* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<QuotaError>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicecontrol.v1.QuotaError)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicecontrol.v1.QuotaError)
    MergeFrom(*source);
  }
}

void QuotaError::MergeFrom(const QuotaError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicecontrol.v1.QuotaError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.subject().size() > 0) {
    _internal_set_subject(from._internal_subject());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.code() != 0) {
    _internal_set_code(from._internal_code());
  }
}

void QuotaError::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicecontrol.v1.QuotaError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuotaError::CopyFrom(const QuotaError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicecontrol.v1.QuotaError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuotaError::IsInitialized() const {
  return true;
}

void QuotaError::InternalSwap(QuotaError* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  subject_.Swap(&other->subject_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(code_, other->code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QuotaError::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace servicecontrol
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::google::api::servicecontrol::v1::AllocateQuotaRequest* Arena::CreateMaybeMessage< ::google::api::servicecontrol::v1::AllocateQuotaRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::servicecontrol::v1::AllocateQuotaRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::servicecontrol::v1::QuotaOperation_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::google::api::servicecontrol::v1::QuotaOperation_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::servicecontrol::v1::QuotaOperation_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::servicecontrol::v1::QuotaOperation* Arena::CreateMaybeMessage< ::google::api::servicecontrol::v1::QuotaOperation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::servicecontrol::v1::QuotaOperation >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::servicecontrol::v1::AllocateQuotaResponse* Arena::CreateMaybeMessage< ::google::api::servicecontrol::v1::AllocateQuotaResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::servicecontrol::v1::AllocateQuotaResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::servicecontrol::v1::QuotaError* Arena::CreateMaybeMessage< ::google::api::servicecontrol::v1::QuotaError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::servicecontrol::v1::QuotaError >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
