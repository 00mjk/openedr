// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/servicecontrol/v1/service_controller.proto

#include "google/api/servicecontrol/v1/service_controller.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fservicecontrol_2fv1_2fcheck_5ferror_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckError_google_2fapi_2fservicecontrol_2fv1_2fcheck_5ferror_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CheckResponse_CheckInfo_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckResponse_ConsumerInfo_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fservicecontrol_2fv1_2foperation_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Operation_google_2fapi_2fservicecontrol_2fv1_2foperation_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReportResponse_ReportError_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2frpc_2fstatus_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Status_google_2frpc_2fstatus_2eproto;
namespace google {
namespace api {
namespace servicecontrol {
namespace v1 {
class CheckRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckRequest> _instance;
} _CheckRequest_default_instance_;
class CheckResponse_CheckInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckResponse_CheckInfo> _instance;
} _CheckResponse_CheckInfo_default_instance_;
class CheckResponse_ConsumerInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckResponse_ConsumerInfo> _instance;
} _CheckResponse_ConsumerInfo_default_instance_;
class CheckResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckResponse> _instance;
} _CheckResponse_default_instance_;
class ReportRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReportRequest> _instance;
} _ReportRequest_default_instance_;
class ReportResponse_ReportErrorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReportResponse_ReportError> _instance;
} _ReportResponse_ReportError_default_instance_;
class ReportResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReportResponse> _instance;
} _ReportResponse_default_instance_;
}  // namespace v1
}  // namespace servicecontrol
}  // namespace api
}  // namespace google
static void InitDefaultsscc_info_CheckRequest_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::api::servicecontrol::v1::_CheckRequest_default_instance_;
    new (ptr) ::google::api::servicecontrol::v1::CheckRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::api::servicecontrol::v1::CheckRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CheckRequest_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CheckRequest_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto}, {
      &scc_info_Operation_google_2fapi_2fservicecontrol_2fv1_2foperation_2eproto.base,}};

static void InitDefaultsscc_info_CheckResponse_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::api::servicecontrol::v1::_CheckResponse_default_instance_;
    new (ptr) ::google::api::servicecontrol::v1::CheckResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::api::servicecontrol::v1::CheckResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CheckResponse_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CheckResponse_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto}, {
      &scc_info_CheckError_google_2fapi_2fservicecontrol_2fv1_2fcheck_5ferror_2eproto.base,
      &scc_info_CheckResponse_CheckInfo_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto.base,}};

static void InitDefaultsscc_info_CheckResponse_CheckInfo_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::api::servicecontrol::v1::_CheckResponse_CheckInfo_default_instance_;
    new (ptr) ::google::api::servicecontrol::v1::CheckResponse_CheckInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::api::servicecontrol::v1::CheckResponse_CheckInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CheckResponse_CheckInfo_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CheckResponse_CheckInfo_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto}, {
      &scc_info_CheckResponse_ConsumerInfo_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto.base,}};

static void InitDefaultsscc_info_CheckResponse_ConsumerInfo_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::api::servicecontrol::v1::_CheckResponse_ConsumerInfo_default_instance_;
    new (ptr) ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CheckResponse_ConsumerInfo_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CheckResponse_ConsumerInfo_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto}, {}};

static void InitDefaultsscc_info_ReportRequest_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::api::servicecontrol::v1::_ReportRequest_default_instance_;
    new (ptr) ::google::api::servicecontrol::v1::ReportRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::api::servicecontrol::v1::ReportRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReportRequest_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReportRequest_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto}, {
      &scc_info_Operation_google_2fapi_2fservicecontrol_2fv1_2foperation_2eproto.base,}};

static void InitDefaultsscc_info_ReportResponse_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::api::servicecontrol::v1::_ReportResponse_default_instance_;
    new (ptr) ::google::api::servicecontrol::v1::ReportResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::api::servicecontrol::v1::ReportResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReportResponse_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReportResponse_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto}, {
      &scc_info_ReportResponse_ReportError_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto.base,}};

static void InitDefaultsscc_info_ReportResponse_ReportError_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::api::servicecontrol::v1::_ReportResponse_ReportError_default_instance_;
    new (ptr) ::google::api::servicecontrol::v1::ReportResponse_ReportError();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::api::servicecontrol::v1::ReportResponse_ReportError::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReportResponse_ReportError_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReportResponse_ReportError_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto}, {
      &scc_info_Status_google_2frpc_2fstatus_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto[7];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::CheckRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::CheckRequest, service_name_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::CheckRequest, operation_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::CheckRequest, service_config_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::CheckResponse_CheckInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::CheckResponse_CheckInfo, consumer_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo, project_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::CheckResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::CheckResponse, operation_id_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::CheckResponse, service_rollout_id_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::CheckResponse, check_errors_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::CheckResponse, service_config_id_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::CheckResponse, check_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::ReportRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::ReportRequest, service_name_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::ReportRequest, operations_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::ReportRequest, service_config_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::ReportResponse_ReportError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::ReportResponse_ReportError, operation_id_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::ReportResponse_ReportError, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::ReportResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::ReportResponse, report_errors_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::ReportResponse, service_config_id_),
  PROTOBUF_FIELD_OFFSET(::google::api::servicecontrol::v1::ReportResponse, service_rollout_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::api::servicecontrol::v1::CheckRequest)},
  { 8, -1, sizeof(::google::api::servicecontrol::v1::CheckResponse_CheckInfo)},
  { 14, -1, sizeof(::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo)},
  { 20, -1, sizeof(::google::api::servicecontrol::v1::CheckResponse)},
  { 30, -1, sizeof(::google::api::servicecontrol::v1::ReportRequest)},
  { 38, -1, sizeof(::google::api::servicecontrol::v1::ReportResponse_ReportError)},
  { 45, -1, sizeof(::google::api::servicecontrol::v1::ReportResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::servicecontrol::v1::_CheckRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::servicecontrol::v1::_CheckResponse_CheckInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::servicecontrol::v1::_CheckResponse_ConsumerInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::servicecontrol::v1::_CheckResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::servicecontrol::v1::_ReportRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::servicecontrol::v1::_ReportResponse_ReportError_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::servicecontrol::v1::_ReportResponse_default_instance_),
};

const char descriptor_table_protodef_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n5google/api/servicecontrol/v1/service_c"
  "ontroller.proto\022\034google.api.servicecontr"
  "ol.v1\032\034google/api/annotations.proto\032.goo"
  "gle/api/servicecontrol/v1/check_error.pr"
  "oto\032,google/api/servicecontrol/v1/operat"
  "ion.proto\032\027google/rpc/status.proto\"{\n\014Ch"
  "eckRequest\022\024\n\014service_name\030\001 \001(\t\022:\n\toper"
  "ation\030\002 \001(\0132\'.google.api.servicecontrol."
  "v1.Operation\022\031\n\021service_config_id\030\004 \001(\t\""
  "\355\002\n\rCheckResponse\022\024\n\014operation_id\030\001 \001(\t\022"
  "\032\n\022service_rollout_id\030\013 \001(\t\022>\n\014check_err"
  "ors\030\002 \003(\0132(.google.api.servicecontrol.v1"
  ".CheckError\022\031\n\021service_config_id\030\005 \001(\t\022I"
  "\n\ncheck_info\030\006 \001(\01325.google.api.servicec"
  "ontrol.v1.CheckResponse.CheckInfo\032\\\n\tChe"
  "ckInfo\022O\n\rconsumer_info\030\002 \001(\01328.google.a"
  "pi.servicecontrol.v1.CheckResponse.Consu"
  "merInfo\032&\n\014ConsumerInfo\022\026\n\016project_numbe"
  "r\030\001 \001(\003\"}\n\rReportRequest\022\024\n\014service_name"
  "\030\001 \001(\t\022;\n\noperations\030\002 \003(\0132\'.google.api."
  "servicecontrol.v1.Operation\022\031\n\021service_c"
  "onfig_id\030\003 \001(\t\"\341\001\n\016ReportResponse\022O\n\rrep"
  "ort_errors\030\001 \003(\01328.google.api.servicecon"
  "trol.v1.ReportResponse.ReportError\022\031\n\021se"
  "rvice_config_id\030\002 \001(\t\022\032\n\022service_rollout"
  "_id\030\004 \001(\t\032G\n\013ReportError\022\024\n\014operation_id"
  "\030\001 \001(\t\022\"\n\006status\030\002 \001(\0132\022.google.rpc.Stat"
  "us2\271\002\n\021ServiceController\022\216\001\n\005Check\022*.goo"
  "gle.api.servicecontrol.v1.CheckRequest\032+"
  ".google.api.servicecontrol.v1.CheckRespo"
  "nse\",\202\323\344\223\002&\"!/v1/services/{service_name}"
  ":check:\001*\022\222\001\n\006Report\022+.google.api.servic"
  "econtrol.v1.ReportRequest\032,.google.api.s"
  "ervicecontrol.v1.ReportResponse\"-\202\323\344\223\002\'\""
  "\"/v1/services/{service_name}:report:\001*B\222"
  "\001\n com.google.api.servicecontrol.v1B\026Ser"
  "viceControllerProtoP\001ZJgoogle.golang.org"
  "/genproto/googleapis/api/servicecontrol/"
  "v1;servicecontrol\370\001\001\242\002\004GASCb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto_deps[4] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fcheck_5ferror_2eproto,
  &::descriptor_table_google_2fapi_2fservicecontrol_2fv1_2foperation_2eproto,
  &::descriptor_table_google_2frpc_2fstatus_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto_sccs[7] = {
  &scc_info_CheckRequest_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto.base,
  &scc_info_CheckResponse_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto.base,
  &scc_info_CheckResponse_CheckInfo_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto.base,
  &scc_info_CheckResponse_ConsumerInfo_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto.base,
  &scc_info_ReportRequest_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto.base,
  &scc_info_ReportResponse_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto.base,
  &scc_info_ReportResponse_ReportError_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto_once;
static bool descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto = {
  &descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto_initialized, descriptor_table_protodef_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto, "google/api/servicecontrol/v1/service_controller.proto", 1555,
  &descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto_once, descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto_sccs, descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto_deps, 7, 4,
  schemas, file_default_instances, TableStruct_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto::offsets,
  file_level_metadata_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto, 7, file_level_enum_descriptors_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto, file_level_service_descriptors_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto), true);
namespace google {
namespace api {
namespace servicecontrol {
namespace v1 {

// ===================================================================

void CheckRequest::InitAsDefaultInstance() {
  ::google::api::servicecontrol::v1::_CheckRequest_default_instance_._instance.get_mutable()->operation_ = const_cast< ::google::api::servicecontrol::v1::Operation*>(
      ::google::api::servicecontrol::v1::Operation::internal_default_instance());
}
class CheckRequest::_Internal {
 public:
  static const ::google::api::servicecontrol::v1::Operation& operation(const CheckRequest* msg);
};

const ::google::api::servicecontrol::v1::Operation&
CheckRequest::_Internal::operation(const CheckRequest* msg) {
  return *msg->operation_;
}
void CheckRequest::unsafe_arena_set_allocated_operation(
    ::google::api::servicecontrol::v1::Operation* operation) {
  if (GetArenaNoVirtual() == nullptr) {
    delete operation_;
  }
  operation_ = operation;
  if (operation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.CheckRequest.operation)
}
void CheckRequest::clear_operation() {
  if (GetArenaNoVirtual() == nullptr && operation_ != nullptr) {
    delete operation_;
  }
  operation_ = nullptr;
}
CheckRequest::CheckRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicecontrol.v1.CheckRequest)
}
CheckRequest::CheckRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.api.servicecontrol.v1.CheckRequest)
}
CheckRequest::CheckRequest(const CheckRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_name().empty()) {
    service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_service_name(),
      GetArenaNoVirtual());
  }
  service_config_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_config_id().empty()) {
    service_config_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_service_config_id(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_operation()) {
    operation_ = new ::google::api::servicecontrol::v1::Operation(*from.operation_);
  } else {
    operation_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.api.servicecontrol.v1.CheckRequest)
}

void CheckRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CheckRequest_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto.base);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_config_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operation_ = nullptr;
}

CheckRequest::~CheckRequest() {
  // @@protoc_insertion_point(destructor:google.api.servicecontrol.v1.CheckRequest)
  SharedDtor();
}

void CheckRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_config_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete operation_;
}

void CheckRequest::ArenaDtor(void* object) {
  CheckRequest* _this = reinterpret_cast< CheckRequest* >(object);
  (void)_this;
}
void CheckRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckRequest& CheckRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckRequest_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void CheckRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicecontrol.v1.CheckRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  service_config_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && operation_ != nullptr) {
    delete operation_;
  }
  operation_ = nullptr;
  _internal_metadata_.Clear();
}

const char* CheckRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_service_name(), ptr, ctx, "google.api.servicecontrol.v1.CheckRequest.service_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.api.servicecontrol.v1.Operation operation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_operation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string service_config_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_service_config_id(), ptr, ctx, "google.api.servicecontrol.v1.CheckRequest.service_config_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicecontrol.v1.CheckRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.servicecontrol.v1.CheckRequest.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  // .google.api.servicecontrol.v1.Operation operation = 2;
  if (this->has_operation()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::operation(this), target, stream);
  }

  // string service_config_id = 4;
  if (this->service_config_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_config_id().data(), static_cast<int>(this->_internal_service_config_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.servicecontrol.v1.CheckRequest.service_config_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_service_config_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicecontrol.v1.CheckRequest)
  return target;
}

size_t CheckRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicecontrol.v1.CheckRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // string service_config_id = 4;
  if (this->service_config_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_config_id());
  }

  // .google.api.servicecontrol.v1.Operation operation = 2;
  if (this->has_operation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *operation_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicecontrol.v1.CheckRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicecontrol.v1.CheckRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicecontrol.v1.CheckRequest)
    MergeFrom(*source);
  }
}

void CheckRequest::MergeFrom(const CheckRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicecontrol.v1.CheckRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.service_name().size() > 0) {
    _internal_set_service_name(from._internal_service_name());
  }
  if (from.service_config_id().size() > 0) {
    _internal_set_service_config_id(from._internal_service_config_id());
  }
  if (from.has_operation()) {
    _internal_mutable_operation()->::google::api::servicecontrol::v1::Operation::MergeFrom(from._internal_operation());
  }
}

void CheckRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicecontrol.v1.CheckRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckRequest::CopyFrom(const CheckRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicecontrol.v1.CheckRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckRequest::IsInitialized() const {
  return true;
}

void CheckRequest::InternalSwap(CheckRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  service_name_.Swap(&other->service_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  service_config_id_.Swap(&other->service_config_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(operation_, other->operation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CheckResponse_CheckInfo::InitAsDefaultInstance() {
  ::google::api::servicecontrol::v1::_CheckResponse_CheckInfo_default_instance_._instance.get_mutable()->consumer_info_ = const_cast< ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo*>(
      ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo::internal_default_instance());
}
class CheckResponse_CheckInfo::_Internal {
 public:
  static const ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo& consumer_info(const CheckResponse_CheckInfo* msg);
};

const ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo&
CheckResponse_CheckInfo::_Internal::consumer_info(const CheckResponse_CheckInfo* msg) {
  return *msg->consumer_info_;
}
void CheckResponse_CheckInfo::unsafe_arena_set_allocated_consumer_info(
    ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo* consumer_info) {
  if (GetArenaNoVirtual() == nullptr) {
    delete consumer_info_;
  }
  consumer_info_ = consumer_info;
  if (consumer_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.CheckResponse.CheckInfo.consumer_info)
}
CheckResponse_CheckInfo::CheckResponse_CheckInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicecontrol.v1.CheckResponse.CheckInfo)
}
CheckResponse_CheckInfo::CheckResponse_CheckInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.api.servicecontrol.v1.CheckResponse.CheckInfo)
}
CheckResponse_CheckInfo::CheckResponse_CheckInfo(const CheckResponse_CheckInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_consumer_info()) {
    consumer_info_ = new ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo(*from.consumer_info_);
  } else {
    consumer_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.api.servicecontrol.v1.CheckResponse.CheckInfo)
}

void CheckResponse_CheckInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CheckResponse_CheckInfo_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto.base);
  consumer_info_ = nullptr;
}

CheckResponse_CheckInfo::~CheckResponse_CheckInfo() {
  // @@protoc_insertion_point(destructor:google.api.servicecontrol.v1.CheckResponse.CheckInfo)
  SharedDtor();
}

void CheckResponse_CheckInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete consumer_info_;
}

void CheckResponse_CheckInfo::ArenaDtor(void* object) {
  CheckResponse_CheckInfo* _this = reinterpret_cast< CheckResponse_CheckInfo* >(object);
  (void)_this;
}
void CheckResponse_CheckInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckResponse_CheckInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckResponse_CheckInfo& CheckResponse_CheckInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckResponse_CheckInfo_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void CheckResponse_CheckInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicecontrol.v1.CheckResponse.CheckInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && consumer_info_ != nullptr) {
    delete consumer_info_;
  }
  consumer_info_ = nullptr;
  _internal_metadata_.Clear();
}

const char* CheckResponse_CheckInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.api.servicecontrol.v1.CheckResponse.ConsumerInfo consumer_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_consumer_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckResponse_CheckInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicecontrol.v1.CheckResponse.CheckInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.api.servicecontrol.v1.CheckResponse.ConsumerInfo consumer_info = 2;
  if (this->has_consumer_info()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::consumer_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicecontrol.v1.CheckResponse.CheckInfo)
  return target;
}

size_t CheckResponse_CheckInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicecontrol.v1.CheckResponse.CheckInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.api.servicecontrol.v1.CheckResponse.ConsumerInfo consumer_info = 2;
  if (this->has_consumer_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *consumer_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckResponse_CheckInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicecontrol.v1.CheckResponse.CheckInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckResponse_CheckInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckResponse_CheckInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicecontrol.v1.CheckResponse.CheckInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicecontrol.v1.CheckResponse.CheckInfo)
    MergeFrom(*source);
  }
}

void CheckResponse_CheckInfo::MergeFrom(const CheckResponse_CheckInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicecontrol.v1.CheckResponse.CheckInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_consumer_info()) {
    _internal_mutable_consumer_info()->::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo::MergeFrom(from._internal_consumer_info());
  }
}

void CheckResponse_CheckInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicecontrol.v1.CheckResponse.CheckInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckResponse_CheckInfo::CopyFrom(const CheckResponse_CheckInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicecontrol.v1.CheckResponse.CheckInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckResponse_CheckInfo::IsInitialized() const {
  return true;
}

void CheckResponse_CheckInfo::InternalSwap(CheckResponse_CheckInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(consumer_info_, other->consumer_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckResponse_CheckInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CheckResponse_ConsumerInfo::InitAsDefaultInstance() {
}
class CheckResponse_ConsumerInfo::_Internal {
 public:
};

CheckResponse_ConsumerInfo::CheckResponse_ConsumerInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicecontrol.v1.CheckResponse.ConsumerInfo)
}
CheckResponse_ConsumerInfo::CheckResponse_ConsumerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.api.servicecontrol.v1.CheckResponse.ConsumerInfo)
}
CheckResponse_ConsumerInfo::CheckResponse_ConsumerInfo(const CheckResponse_ConsumerInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  project_number_ = from.project_number_;
  // @@protoc_insertion_point(copy_constructor:google.api.servicecontrol.v1.CheckResponse.ConsumerInfo)
}

void CheckResponse_ConsumerInfo::SharedCtor() {
  project_number_ = PROTOBUF_LONGLONG(0);
}

CheckResponse_ConsumerInfo::~CheckResponse_ConsumerInfo() {
  // @@protoc_insertion_point(destructor:google.api.servicecontrol.v1.CheckResponse.ConsumerInfo)
  SharedDtor();
}

void CheckResponse_ConsumerInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void CheckResponse_ConsumerInfo::ArenaDtor(void* object) {
  CheckResponse_ConsumerInfo* _this = reinterpret_cast< CheckResponse_ConsumerInfo* >(object);
  (void)_this;
}
void CheckResponse_ConsumerInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckResponse_ConsumerInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckResponse_ConsumerInfo& CheckResponse_ConsumerInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckResponse_ConsumerInfo_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void CheckResponse_ConsumerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicecontrol.v1.CheckResponse.ConsumerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_number_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* CheckResponse_ConsumerInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int64 project_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          project_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckResponse_ConsumerInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicecontrol.v1.CheckResponse.ConsumerInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 project_number = 1;
  if (this->project_number() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_project_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicecontrol.v1.CheckResponse.ConsumerInfo)
  return target;
}

size_t CheckResponse_ConsumerInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicecontrol.v1.CheckResponse.ConsumerInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 project_number = 1;
  if (this->project_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_project_number());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckResponse_ConsumerInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicecontrol.v1.CheckResponse.ConsumerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckResponse_ConsumerInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckResponse_ConsumerInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicecontrol.v1.CheckResponse.ConsumerInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicecontrol.v1.CheckResponse.ConsumerInfo)
    MergeFrom(*source);
  }
}

void CheckResponse_ConsumerInfo::MergeFrom(const CheckResponse_ConsumerInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicecontrol.v1.CheckResponse.ConsumerInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.project_number() != 0) {
    _internal_set_project_number(from._internal_project_number());
  }
}

void CheckResponse_ConsumerInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicecontrol.v1.CheckResponse.ConsumerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckResponse_ConsumerInfo::CopyFrom(const CheckResponse_ConsumerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicecontrol.v1.CheckResponse.ConsumerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckResponse_ConsumerInfo::IsInitialized() const {
  return true;
}

void CheckResponse_ConsumerInfo::InternalSwap(CheckResponse_ConsumerInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(project_number_, other->project_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckResponse_ConsumerInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CheckResponse::InitAsDefaultInstance() {
  ::google::api::servicecontrol::v1::_CheckResponse_default_instance_._instance.get_mutable()->check_info_ = const_cast< ::google::api::servicecontrol::v1::CheckResponse_CheckInfo*>(
      ::google::api::servicecontrol::v1::CheckResponse_CheckInfo::internal_default_instance());
}
class CheckResponse::_Internal {
 public:
  static const ::google::api::servicecontrol::v1::CheckResponse_CheckInfo& check_info(const CheckResponse* msg);
};

const ::google::api::servicecontrol::v1::CheckResponse_CheckInfo&
CheckResponse::_Internal::check_info(const CheckResponse* msg) {
  return *msg->check_info_;
}
void CheckResponse::clear_check_errors() {
  check_errors_.Clear();
}
void CheckResponse::unsafe_arena_set_allocated_check_info(
    ::google::api::servicecontrol::v1::CheckResponse_CheckInfo* check_info) {
  if (GetArenaNoVirtual() == nullptr) {
    delete check_info_;
  }
  check_info_ = check_info;
  if (check_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.CheckResponse.check_info)
}
CheckResponse::CheckResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicecontrol.v1.CheckResponse)
}
CheckResponse::CheckResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  check_errors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.api.servicecontrol.v1.CheckResponse)
}
CheckResponse::CheckResponse(const CheckResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      check_errors_(from.check_errors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  operation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_operation_id().empty()) {
    operation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_operation_id(),
      GetArenaNoVirtual());
  }
  service_config_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_config_id().empty()) {
    service_config_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_service_config_id(),
      GetArenaNoVirtual());
  }
  service_rollout_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_rollout_id().empty()) {
    service_rollout_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_service_rollout_id(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_check_info()) {
    check_info_ = new ::google::api::servicecontrol::v1::CheckResponse_CheckInfo(*from.check_info_);
  } else {
    check_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.api.servicecontrol.v1.CheckResponse)
}

void CheckResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CheckResponse_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto.base);
  operation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_config_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_rollout_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  check_info_ = nullptr;
}

CheckResponse::~CheckResponse() {
  // @@protoc_insertion_point(destructor:google.api.servicecontrol.v1.CheckResponse)
  SharedDtor();
}

void CheckResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  operation_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_config_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_rollout_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete check_info_;
}

void CheckResponse::ArenaDtor(void* object) {
  CheckResponse* _this = reinterpret_cast< CheckResponse* >(object);
  (void)_this;
}
void CheckResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckResponse& CheckResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckResponse_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void CheckResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicecontrol.v1.CheckResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  check_errors_.Clear();
  operation_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  service_config_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  service_rollout_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && check_info_ != nullptr) {
    delete check_info_;
  }
  check_info_ = nullptr;
  _internal_metadata_.Clear();
}

const char* CheckResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string operation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_operation_id(), ptr, ctx, "google.api.servicecontrol.v1.CheckResponse.operation_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .google.api.servicecontrol.v1.CheckError check_errors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_check_errors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string service_config_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_service_config_id(), ptr, ctx, "google.api.servicecontrol.v1.CheckResponse.service_config_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.api.servicecontrol.v1.CheckResponse.CheckInfo check_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_check_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string service_rollout_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_service_rollout_id(), ptr, ctx, "google.api.servicecontrol.v1.CheckResponse.service_rollout_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicecontrol.v1.CheckResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string operation_id = 1;
  if (this->operation_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operation_id().data(), static_cast<int>(this->_internal_operation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.servicecontrol.v1.CheckResponse.operation_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_operation_id(), target);
  }

  // repeated .google.api.servicecontrol.v1.CheckError check_errors = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_check_errors_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_check_errors(i), target, stream);
  }

  // string service_config_id = 5;
  if (this->service_config_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_config_id().data(), static_cast<int>(this->_internal_service_config_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.servicecontrol.v1.CheckResponse.service_config_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_service_config_id(), target);
  }

  // .google.api.servicecontrol.v1.CheckResponse.CheckInfo check_info = 6;
  if (this->has_check_info()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::check_info(this), target, stream);
  }

  // string service_rollout_id = 11;
  if (this->service_rollout_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_rollout_id().data(), static_cast<int>(this->_internal_service_rollout_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.servicecontrol.v1.CheckResponse.service_rollout_id");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_service_rollout_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicecontrol.v1.CheckResponse)
  return target;
}

size_t CheckResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicecontrol.v1.CheckResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.api.servicecontrol.v1.CheckError check_errors = 2;
  total_size += 1UL * this->_internal_check_errors_size();
  for (const auto& msg : this->check_errors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string operation_id = 1;
  if (this->operation_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operation_id());
  }

  // string service_config_id = 5;
  if (this->service_config_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_config_id());
  }

  // string service_rollout_id = 11;
  if (this->service_rollout_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_rollout_id());
  }

  // .google.api.servicecontrol.v1.CheckResponse.CheckInfo check_info = 6;
  if (this->has_check_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *check_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicecontrol.v1.CheckResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicecontrol.v1.CheckResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicecontrol.v1.CheckResponse)
    MergeFrom(*source);
  }
}

void CheckResponse::MergeFrom(const CheckResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicecontrol.v1.CheckResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  check_errors_.MergeFrom(from.check_errors_);
  if (from.operation_id().size() > 0) {
    _internal_set_operation_id(from._internal_operation_id());
  }
  if (from.service_config_id().size() > 0) {
    _internal_set_service_config_id(from._internal_service_config_id());
  }
  if (from.service_rollout_id().size() > 0) {
    _internal_set_service_rollout_id(from._internal_service_rollout_id());
  }
  if (from.has_check_info()) {
    _internal_mutable_check_info()->::google::api::servicecontrol::v1::CheckResponse_CheckInfo::MergeFrom(from._internal_check_info());
  }
}

void CheckResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicecontrol.v1.CheckResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckResponse::CopyFrom(const CheckResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicecontrol.v1.CheckResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckResponse::IsInitialized() const {
  return true;
}

void CheckResponse::InternalSwap(CheckResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  check_errors_.InternalSwap(&other->check_errors_);
  operation_id_.Swap(&other->operation_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  service_config_id_.Swap(&other->service_config_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  service_rollout_id_.Swap(&other->service_rollout_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(check_info_, other->check_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReportRequest::InitAsDefaultInstance() {
}
class ReportRequest::_Internal {
 public:
};

void ReportRequest::clear_operations() {
  operations_.Clear();
}
ReportRequest::ReportRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicecontrol.v1.ReportRequest)
}
ReportRequest::ReportRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  operations_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.api.servicecontrol.v1.ReportRequest)
}
ReportRequest::ReportRequest(const ReportRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      operations_(from.operations_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_name().empty()) {
    service_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_service_name(),
      GetArenaNoVirtual());
  }
  service_config_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_config_id().empty()) {
    service_config_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_service_config_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.api.servicecontrol.v1.ReportRequest)
}

void ReportRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReportRequest_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto.base);
  service_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_config_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReportRequest::~ReportRequest() {
  // @@protoc_insertion_point(destructor:google.api.servicecontrol.v1.ReportRequest)
  SharedDtor();
}

void ReportRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  service_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_config_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReportRequest::ArenaDtor(void* object) {
  ReportRequest* _this = reinterpret_cast< ReportRequest* >(object);
  (void)_this;
}
void ReportRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReportRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReportRequest& ReportRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReportRequest_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void ReportRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicecontrol.v1.ReportRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operations_.Clear();
  service_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  service_config_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

const char* ReportRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string service_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_service_name(), ptr, ctx, "google.api.servicecontrol.v1.ReportRequest.service_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .google.api.servicecontrol.v1.Operation operations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_operations(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string service_config_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_service_config_id(), ptr, ctx, "google.api.servicecontrol.v1.ReportRequest.service_config_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReportRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicecontrol.v1.ReportRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_name().data(), static_cast<int>(this->_internal_service_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.servicecontrol.v1.ReportRequest.service_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_name(), target);
  }

  // repeated .google.api.servicecontrol.v1.Operation operations = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_operations_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_operations(i), target, stream);
  }

  // string service_config_id = 3;
  if (this->service_config_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_config_id().data(), static_cast<int>(this->_internal_service_config_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.servicecontrol.v1.ReportRequest.service_config_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_service_config_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicecontrol.v1.ReportRequest)
  return target;
}

size_t ReportRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicecontrol.v1.ReportRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.api.servicecontrol.v1.Operation operations = 2;
  total_size += 1UL * this->_internal_operations_size();
  for (const auto& msg : this->operations_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string service_name = 1;
  if (this->service_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_name());
  }

  // string service_config_id = 3;
  if (this->service_config_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_config_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicecontrol.v1.ReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReportRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicecontrol.v1.ReportRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicecontrol.v1.ReportRequest)
    MergeFrom(*source);
  }
}

void ReportRequest::MergeFrom(const ReportRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicecontrol.v1.ReportRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  operations_.MergeFrom(from.operations_);
  if (from.service_name().size() > 0) {
    _internal_set_service_name(from._internal_service_name());
  }
  if (from.service_config_id().size() > 0) {
    _internal_set_service_config_id(from._internal_service_config_id());
  }
}

void ReportRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicecontrol.v1.ReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportRequest::CopyFrom(const ReportRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicecontrol.v1.ReportRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportRequest::IsInitialized() const {
  return true;
}

void ReportRequest::InternalSwap(ReportRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  operations_.InternalSwap(&other->operations_);
  service_name_.Swap(&other->service_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  service_config_id_.Swap(&other->service_config_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReportResponse_ReportError::InitAsDefaultInstance() {
  ::google::api::servicecontrol::v1::_ReportResponse_ReportError_default_instance_._instance.get_mutable()->status_ = const_cast< ::google::rpc::Status*>(
      ::google::rpc::Status::internal_default_instance());
}
class ReportResponse_ReportError::_Internal {
 public:
  static const ::google::rpc::Status& status(const ReportResponse_ReportError* msg);
};

const ::google::rpc::Status&
ReportResponse_ReportError::_Internal::status(const ReportResponse_ReportError* msg) {
  return *msg->status_;
}
void ReportResponse_ReportError::unsafe_arena_set_allocated_status(
    ::google::rpc::Status* status) {
  if (GetArenaNoVirtual() == nullptr) {
    delete status_;
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.servicecontrol.v1.ReportResponse.ReportError.status)
}
void ReportResponse_ReportError::clear_status() {
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
ReportResponse_ReportError::ReportResponse_ReportError()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicecontrol.v1.ReportResponse.ReportError)
}
ReportResponse_ReportError::ReportResponse_ReportError(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.api.servicecontrol.v1.ReportResponse.ReportError)
}
ReportResponse_ReportError::ReportResponse_ReportError(const ReportResponse_ReportError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  operation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_operation_id().empty()) {
    operation_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_operation_id(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_status()) {
    status_ = new ::google::rpc::Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.api.servicecontrol.v1.ReportResponse.ReportError)
}

void ReportResponse_ReportError::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReportResponse_ReportError_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto.base);
  operation_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = nullptr;
}

ReportResponse_ReportError::~ReportResponse_ReportError() {
  // @@protoc_insertion_point(destructor:google.api.servicecontrol.v1.ReportResponse.ReportError)
  SharedDtor();
}

void ReportResponse_ReportError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  operation_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete status_;
}

void ReportResponse_ReportError::ArenaDtor(void* object) {
  ReportResponse_ReportError* _this = reinterpret_cast< ReportResponse_ReportError* >(object);
  (void)_this;
}
void ReportResponse_ReportError::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReportResponse_ReportError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReportResponse_ReportError& ReportResponse_ReportError::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReportResponse_ReportError_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void ReportResponse_ReportError::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicecontrol.v1.ReportResponse.ReportError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  operation_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear();
}

const char* ReportResponse_ReportError::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string operation_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_operation_id(), ptr, ctx, "google.api.servicecontrol.v1.ReportResponse.ReportError.operation_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.rpc.Status status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReportResponse_ReportError::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicecontrol.v1.ReportResponse.ReportError)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string operation_id = 1;
  if (this->operation_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_operation_id().data(), static_cast<int>(this->_internal_operation_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.servicecontrol.v1.ReportResponse.ReportError.operation_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_operation_id(), target);
  }

  // .google.rpc.Status status = 2;
  if (this->has_status()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicecontrol.v1.ReportResponse.ReportError)
  return target;
}

size_t ReportResponse_ReportError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicecontrol.v1.ReportResponse.ReportError)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string operation_id = 1;
  if (this->operation_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_operation_id());
  }

  // .google.rpc.Status status = 2;
  if (this->has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportResponse_ReportError::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicecontrol.v1.ReportResponse.ReportError)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportResponse_ReportError* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReportResponse_ReportError>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicecontrol.v1.ReportResponse.ReportError)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicecontrol.v1.ReportResponse.ReportError)
    MergeFrom(*source);
  }
}

void ReportResponse_ReportError::MergeFrom(const ReportResponse_ReportError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicecontrol.v1.ReportResponse.ReportError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.operation_id().size() > 0) {
    _internal_set_operation_id(from._internal_operation_id());
  }
  if (from.has_status()) {
    _internal_mutable_status()->::google::rpc::Status::MergeFrom(from._internal_status());
  }
}

void ReportResponse_ReportError::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicecontrol.v1.ReportResponse.ReportError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportResponse_ReportError::CopyFrom(const ReportResponse_ReportError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicecontrol.v1.ReportResponse.ReportError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportResponse_ReportError::IsInitialized() const {
  return true;
}

void ReportResponse_ReportError::InternalSwap(ReportResponse_ReportError* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  operation_id_.Swap(&other->operation_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportResponse_ReportError::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReportResponse::InitAsDefaultInstance() {
}
class ReportResponse::_Internal {
 public:
};

ReportResponse::ReportResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.servicecontrol.v1.ReportResponse)
}
ReportResponse::ReportResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  report_errors_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.api.servicecontrol.v1.ReportResponse)
}
ReportResponse::ReportResponse(const ReportResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      report_errors_(from.report_errors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  service_config_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_config_id().empty()) {
    service_config_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_service_config_id(),
      GetArenaNoVirtual());
  }
  service_rollout_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_service_rollout_id().empty()) {
    service_rollout_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_service_rollout_id(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.api.servicecontrol.v1.ReportResponse)
}

void ReportResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReportResponse_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto.base);
  service_config_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_rollout_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ReportResponse::~ReportResponse() {
  // @@protoc_insertion_point(destructor:google.api.servicecontrol.v1.ReportResponse)
  SharedDtor();
}

void ReportResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  service_config_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  service_rollout_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReportResponse::ArenaDtor(void* object) {
  ReportResponse* _this = reinterpret_cast< ReportResponse* >(object);
  (void)_this;
}
void ReportResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReportResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReportResponse& ReportResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReportResponse_google_2fapi_2fservicecontrol_2fv1_2fservice_5fcontroller_2eproto.base);
  return *internal_default_instance();
}


void ReportResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.servicecontrol.v1.ReportResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  report_errors_.Clear();
  service_config_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  service_rollout_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

const char* ReportResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_report_errors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string service_config_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_service_config_id(), ptr, ctx, "google.api.servicecontrol.v1.ReportResponse.service_config_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string service_rollout_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_service_rollout_id(), ptr, ctx, "google.api.servicecontrol.v1.ReportResponse.service_rollout_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReportResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.servicecontrol.v1.ReportResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_report_errors_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_report_errors(i), target, stream);
  }

  // string service_config_id = 2;
  if (this->service_config_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_config_id().data(), static_cast<int>(this->_internal_service_config_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.servicecontrol.v1.ReportResponse.service_config_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_service_config_id(), target);
  }

  // string service_rollout_id = 4;
  if (this->service_rollout_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_rollout_id().data(), static_cast<int>(this->_internal_service_rollout_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.servicecontrol.v1.ReportResponse.service_rollout_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_service_rollout_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.servicecontrol.v1.ReportResponse)
  return target;
}

size_t ReportResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.servicecontrol.v1.ReportResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.api.servicecontrol.v1.ReportResponse.ReportError report_errors = 1;
  total_size += 1UL * this->_internal_report_errors_size();
  for (const auto& msg : this->report_errors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string service_config_id = 2;
  if (this->service_config_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_config_id());
  }

  // string service_rollout_id = 4;
  if (this->service_rollout_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_rollout_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReportResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.servicecontrol.v1.ReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ReportResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReportResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.servicecontrol.v1.ReportResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.servicecontrol.v1.ReportResponse)
    MergeFrom(*source);
  }
}

void ReportResponse::MergeFrom(const ReportResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.servicecontrol.v1.ReportResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  report_errors_.MergeFrom(from.report_errors_);
  if (from.service_config_id().size() > 0) {
    _internal_set_service_config_id(from._internal_service_config_id());
  }
  if (from.service_rollout_id().size() > 0) {
    _internal_set_service_rollout_id(from._internal_service_rollout_id());
  }
}

void ReportResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.servicecontrol.v1.ReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReportResponse::CopyFrom(const ReportResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.servicecontrol.v1.ReportResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportResponse::IsInitialized() const {
  return true;
}

void ReportResponse::InternalSwap(ReportResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  report_errors_.InternalSwap(&other->report_errors_);
  service_config_id_.Swap(&other->service_config_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  service_rollout_id_.Swap(&other->service_rollout_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace servicecontrol
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::google::api::servicecontrol::v1::CheckRequest* Arena::CreateMaybeMessage< ::google::api::servicecontrol::v1::CheckRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::servicecontrol::v1::CheckRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::servicecontrol::v1::CheckResponse_CheckInfo* Arena::CreateMaybeMessage< ::google::api::servicecontrol::v1::CheckResponse_CheckInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::servicecontrol::v1::CheckResponse_CheckInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo* Arena::CreateMaybeMessage< ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::servicecontrol::v1::CheckResponse_ConsumerInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::servicecontrol::v1::CheckResponse* Arena::CreateMaybeMessage< ::google::api::servicecontrol::v1::CheckResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::servicecontrol::v1::CheckResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::servicecontrol::v1::ReportRequest* Arena::CreateMaybeMessage< ::google::api::servicecontrol::v1::ReportRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::servicecontrol::v1::ReportRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::servicecontrol::v1::ReportResponse_ReportError* Arena::CreateMaybeMessage< ::google::api::servicecontrol::v1::ReportResponse_ReportError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::servicecontrol::v1::ReportResponse_ReportError >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::servicecontrol::v1::ReportResponse* Arena::CreateMaybeMessage< ::google::api::servicecontrol::v1::ReportResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::servicecontrol::v1::ReportResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
