// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/expr/v1beta1/decl.proto

#include "google/api/expr/v1beta1/decl.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeclType_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fexpr_2fv1beta1_2fexpr_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Expr_google_2fapi_2fexpr_2fv1beta1_2fexpr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FunctionDecl_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_IdentDecl_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto;
namespace google {
namespace api {
namespace expr {
namespace v1beta1 {
class DeclDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Decl> _instance;
  const ::google::api::expr::v1beta1::IdentDecl* ident_;
  const ::google::api::expr::v1beta1::FunctionDecl* function_;
} _Decl_default_instance_;
class DeclTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeclType> _instance;
} _DeclType_default_instance_;
class IdentDeclDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IdentDecl> _instance;
} _IdentDecl_default_instance_;
class FunctionDeclDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FunctionDecl> _instance;
} _FunctionDecl_default_instance_;
}  // namespace v1beta1
}  // namespace expr
}  // namespace api
}  // namespace google
static void InitDefaultsscc_info_Decl_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::api::expr::v1beta1::_Decl_default_instance_;
    new (ptr) ::google::api::expr::v1beta1::Decl();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::api::expr::v1beta1::Decl::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Decl_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Decl_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto}, {
      &scc_info_IdentDecl_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto.base,
      &scc_info_FunctionDecl_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto.base,}};

static void InitDefaultsscc_info_DeclType_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::api::expr::v1beta1::_DeclType_default_instance_;
    new (ptr) ::google::api::expr::v1beta1::DeclType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::api::expr::v1beta1::DeclType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeclType_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeclType_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto}, {}};

static void InitDefaultsscc_info_FunctionDecl_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::api::expr::v1beta1::_FunctionDecl_default_instance_;
    new (ptr) ::google::api::expr::v1beta1::FunctionDecl();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::api::expr::v1beta1::FunctionDecl::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FunctionDecl_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FunctionDecl_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto}, {
      &scc_info_IdentDecl_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto.base,
      &scc_info_DeclType_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto.base,}};

static void InitDefaultsscc_info_IdentDecl_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::api::expr::v1beta1::_IdentDecl_default_instance_;
    new (ptr) ::google::api::expr::v1beta1::IdentDecl();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::api::expr::v1beta1::IdentDecl::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_IdentDecl_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_IdentDecl_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto}, {
      &scc_info_DeclType_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto.base,
      &scc_info_Expr_google_2fapi_2fexpr_2fv1beta1_2fexpr_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1beta1::Decl, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1beta1::Decl, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1beta1::Decl, id_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1beta1::Decl, name_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1beta1::Decl, doc_),
  offsetof(::google::api::expr::v1beta1::DeclDefaultTypeInternal, ident_),
  offsetof(::google::api::expr::v1beta1::DeclDefaultTypeInternal, function_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1beta1::Decl, kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1beta1::DeclType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1beta1::DeclType, id_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1beta1::DeclType, type_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1beta1::DeclType, type_params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1beta1::IdentDecl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1beta1::IdentDecl, type_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1beta1::IdentDecl, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1beta1::FunctionDecl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1beta1::FunctionDecl, args_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1beta1::FunctionDecl, return_type_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1beta1::FunctionDecl, receiver_function_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::api::expr::v1beta1::Decl)},
  { 11, -1, sizeof(::google::api::expr::v1beta1::DeclType)},
  { 19, -1, sizeof(::google::api::expr::v1beta1::IdentDecl)},
  { 26, -1, sizeof(::google::api::expr::v1beta1::FunctionDecl)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::expr::v1beta1::_Decl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::expr::v1beta1::_DeclType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::expr::v1beta1::_IdentDecl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::expr::v1beta1::_FunctionDecl_default_instance_),
};

const char descriptor_table_protodef_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"google/api/expr/v1beta1/decl.proto\022\027go"
  "ogle.api.expr.v1beta1\032\"google/api/expr/v"
  "1beta1/expr.proto\"\245\001\n\004Decl\022\n\n\002id\030\001 \001(\005\022\014"
  "\n\004name\030\002 \001(\t\022\013\n\003doc\030\003 \001(\t\0223\n\005ident\030\004 \001(\013"
  "2\".google.api.expr.v1beta1.IdentDeclH\000\0229"
  "\n\010function\030\005 \001(\0132%.google.api.expr.v1bet"
  "a1.FunctionDeclH\000B\006\n\004kind\"\\\n\010DeclType\022\n\n"
  "\002id\030\001 \001(\005\022\014\n\004type\030\002 \001(\t\0226\n\013type_params\030\004"
  " \003(\0132!.google.api.expr.v1beta1.DeclType\""
  "j\n\tIdentDecl\022/\n\004type\030\003 \001(\0132!.google.api."
  "expr.v1beta1.DeclType\022,\n\005value\030\004 \001(\0132\035.g"
  "oogle.api.expr.v1beta1.Expr\"\223\001\n\014Function"
  "Decl\0220\n\004args\030\001 \003(\0132\".google.api.expr.v1b"
  "eta1.IdentDecl\0226\n\013return_type\030\002 \001(\0132!.go"
  "ogle.api.expr.v1beta1.DeclType\022\031\n\021receiv"
  "er_function\030\003 \001(\010Bj\n\033com.google.api.expr"
  ".v1beta1B\tDeclProtoP\001Z;google.golang.org"
  "/genproto/googleapis/api/expr/v1beta1;ex"
  "pr\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto_deps[1] = {
  &::descriptor_table_google_2fapi_2fexpr_2fv1beta1_2fexpr_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto_sccs[4] = {
  &scc_info_Decl_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto.base,
  &scc_info_DeclType_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto.base,
  &scc_info_FunctionDecl_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto.base,
  &scc_info_IdentDecl_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto_once;
static bool descriptor_table_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto = {
  &descriptor_table_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto_initialized, descriptor_table_protodef_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto, "google/api/expr/v1beta1/decl.proto", 733,
  &descriptor_table_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto_once, descriptor_table_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto_sccs, descriptor_table_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto_deps, 4, 1,
  schemas, file_default_instances, TableStruct_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto::offsets,
  file_level_metadata_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto, 4, file_level_enum_descriptors_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto, file_level_service_descriptors_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto), true);
namespace google {
namespace api {
namespace expr {
namespace v1beta1 {

// ===================================================================

void Decl::InitAsDefaultInstance() {
  ::google::api::expr::v1beta1::_Decl_default_instance_.ident_ = const_cast< ::google::api::expr::v1beta1::IdentDecl*>(
      ::google::api::expr::v1beta1::IdentDecl::internal_default_instance());
  ::google::api::expr::v1beta1::_Decl_default_instance_.function_ = const_cast< ::google::api::expr::v1beta1::FunctionDecl*>(
      ::google::api::expr::v1beta1::FunctionDecl::internal_default_instance());
}
class Decl::_Internal {
 public:
  static const ::google::api::expr::v1beta1::IdentDecl& ident(const Decl* msg);
  static const ::google::api::expr::v1beta1::FunctionDecl& function(const Decl* msg);
};

const ::google::api::expr::v1beta1::IdentDecl&
Decl::_Internal::ident(const Decl* msg) {
  return *msg->kind_.ident_;
}
const ::google::api::expr::v1beta1::FunctionDecl&
Decl::_Internal::function(const Decl* msg) {
  return *msg->kind_.function_;
}
void Decl::set_allocated_ident(::google::api::expr::v1beta1::IdentDecl* ident) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_kind();
  if (ident) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ident);
    if (message_arena != submessage_arena) {
      ident = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ident, submessage_arena);
    }
    set_has_ident();
    kind_.ident_ = ident;
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1beta1.Decl.ident)
}
void Decl::set_allocated_function(::google::api::expr::v1beta1::FunctionDecl* function) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_kind();
  if (function) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(function);
    if (message_arena != submessage_arena) {
      function = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, function, submessage_arena);
    }
    set_has_function();
    kind_.function_ = function;
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1beta1.Decl.function)
}
Decl::Decl()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.expr.v1beta1.Decl)
}
Decl::Decl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1beta1.Decl)
}
Decl::Decl(const Decl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArenaNoVirtual());
  }
  doc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_doc().empty()) {
    doc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_doc(),
      GetArenaNoVirtual());
  }
  id_ = from.id_;
  clear_has_kind();
  switch (from.kind_case()) {
    case kIdent: {
      _internal_mutable_ident()->::google::api::expr::v1beta1::IdentDecl::MergeFrom(from._internal_ident());
      break;
    }
    case kFunction: {
      _internal_mutable_function()->::google::api::expr::v1beta1::FunctionDecl::MergeFrom(from._internal_function());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1beta1.Decl)
}

void Decl::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Decl_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
  clear_has_kind();
}

Decl::~Decl() {
  // @@protoc_insertion_point(destructor:google.api.expr.v1beta1.Decl)
  SharedDtor();
}

void Decl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_kind()) {
    clear_kind();
  }
}

void Decl::ArenaDtor(void* object) {
  Decl* _this = reinterpret_cast< Decl* >(object);
  (void)_this;
}
void Decl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Decl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Decl& Decl::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Decl_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto.base);
  return *internal_default_instance();
}


void Decl::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:google.api.expr.v1beta1.Decl)
  switch (kind_case()) {
    case kIdent: {
      if (GetArenaNoVirtual() == nullptr) {
        delete kind_.ident_;
      }
      break;
    }
    case kFunction: {
      if (GetArenaNoVirtual() == nullptr) {
        delete kind_.function_;
      }
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = KIND_NOT_SET;
}


void Decl::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.expr.v1beta1.Decl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  doc_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  id_ = 0;
  clear_kind();
  _internal_metadata_.Clear();
}

const char* Decl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "google.api.expr.v1beta1.Decl.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string doc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_doc(), ptr, ctx, "google.api.expr.v1beta1.Decl.doc");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.api.expr.v1beta1.IdentDecl ident = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ident(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.api.expr.v1beta1.FunctionDecl function = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_function(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Decl::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1beta1.Decl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.expr.v1beta1.Decl.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string doc = 3;
  if (this->doc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_doc().data(), static_cast<int>(this->_internal_doc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.expr.v1beta1.Decl.doc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_doc(), target);
  }

  // .google.api.expr.v1beta1.IdentDecl ident = 4;
  if (_internal_has_ident()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::ident(this), target, stream);
  }

  // .google.api.expr.v1beta1.FunctionDecl function = 5;
  if (_internal_has_function()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::function(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1beta1.Decl)
  return target;
}

size_t Decl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1beta1.Decl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string doc = 3;
  if (this->doc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_doc());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  switch (kind_case()) {
    // .google.api.expr.v1beta1.IdentDecl ident = 4;
    case kIdent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.ident_);
      break;
    }
    // .google.api.expr.v1beta1.FunctionDecl function = 5;
    case kFunction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *kind_.function_);
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Decl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.expr.v1beta1.Decl)
  GOOGLE_DCHECK_NE(&from, this);
  const Decl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Decl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.expr.v1beta1.Decl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.expr.v1beta1.Decl)
    MergeFrom(*source);
  }
}

void Decl::MergeFrom(const Decl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1beta1.Decl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.doc().size() > 0) {
    _internal_set_doc(from._internal_doc());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
  switch (from.kind_case()) {
    case kIdent: {
      _internal_mutable_ident()->::google::api::expr::v1beta1::IdentDecl::MergeFrom(from._internal_ident());
      break;
    }
    case kFunction: {
      _internal_mutable_function()->::google::api::expr::v1beta1::FunctionDecl::MergeFrom(from._internal_function());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
}

void Decl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.expr.v1beta1.Decl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Decl::CopyFrom(const Decl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1beta1.Decl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Decl::IsInitialized() const {
  return true;
}

void Decl::InternalSwap(Decl* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  doc_.Swap(&other->doc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(kind_, other->kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Decl::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeclType::InitAsDefaultInstance() {
}
class DeclType::_Internal {
 public:
};

DeclType::DeclType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.expr.v1beta1.DeclType)
}
DeclType::DeclType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  type_params_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1beta1.DeclType)
}
DeclType::DeclType(const DeclType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      type_params_(from.type_params_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_type().empty()) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_type(),
      GetArenaNoVirtual());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1beta1.DeclType)
}

void DeclType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeclType_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto.base);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

DeclType::~DeclType() {
  // @@protoc_insertion_point(destructor:google.api.expr.v1beta1.DeclType)
  SharedDtor();
}

void DeclType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeclType::ArenaDtor(void* object) {
  DeclType* _this = reinterpret_cast< DeclType* >(object);
  (void)_this;
}
void DeclType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeclType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeclType& DeclType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeclType_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto.base);
  return *internal_default_instance();
}


void DeclType::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.expr.v1beta1.DeclType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_params_.Clear();
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  id_ = 0;
  _internal_metadata_.Clear();
}

const char* DeclType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_type(), ptr, ctx, "google.api.expr.v1beta1.DeclType.type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .google.api.expr.v1beta1.DeclType type_params = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_type_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeclType::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1beta1.DeclType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1;
  if (this->id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.expr.v1beta1.DeclType.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // repeated .google.api.expr.v1beta1.DeclType type_params = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_type_params_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(4, this->_internal_type_params(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1beta1.DeclType)
  return target;
}

size_t DeclType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1beta1.DeclType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.api.expr.v1beta1.DeclType type_params = 4;
  total_size += 1UL * this->_internal_type_params_size();
  for (const auto& msg : this->type_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string type = 2;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // int32 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeclType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.expr.v1beta1.DeclType)
  GOOGLE_DCHECK_NE(&from, this);
  const DeclType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeclType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.expr.v1beta1.DeclType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.expr.v1beta1.DeclType)
    MergeFrom(*source);
  }
}

void DeclType::MergeFrom(const DeclType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1beta1.DeclType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  type_params_.MergeFrom(from.type_params_);
  if (from.type().size() > 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void DeclType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.expr.v1beta1.DeclType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeclType::CopyFrom(const DeclType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1beta1.DeclType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeclType::IsInitialized() const {
  return true;
}

void DeclType::InternalSwap(DeclType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  type_params_.InternalSwap(&other->type_params_);
  type_.Swap(&other->type_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeclType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IdentDecl::InitAsDefaultInstance() {
  ::google::api::expr::v1beta1::_IdentDecl_default_instance_._instance.get_mutable()->type_ = const_cast< ::google::api::expr::v1beta1::DeclType*>(
      ::google::api::expr::v1beta1::DeclType::internal_default_instance());
  ::google::api::expr::v1beta1::_IdentDecl_default_instance_._instance.get_mutable()->value_ = const_cast< ::google::api::expr::v1beta1::Expr*>(
      ::google::api::expr::v1beta1::Expr::internal_default_instance());
}
class IdentDecl::_Internal {
 public:
  static const ::google::api::expr::v1beta1::DeclType& type(const IdentDecl* msg);
  static const ::google::api::expr::v1beta1::Expr& value(const IdentDecl* msg);
};

const ::google::api::expr::v1beta1::DeclType&
IdentDecl::_Internal::type(const IdentDecl* msg) {
  return *msg->type_;
}
const ::google::api::expr::v1beta1::Expr&
IdentDecl::_Internal::value(const IdentDecl* msg) {
  return *msg->value_;
}
void IdentDecl::unsafe_arena_set_allocated_type(
    ::google::api::expr::v1beta1::DeclType* type) {
  if (GetArenaNoVirtual() == nullptr) {
    delete type_;
  }
  type_ = type;
  if (type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1beta1.IdentDecl.type)
}
void IdentDecl::unsafe_arena_set_allocated_value(
    ::google::api::expr::v1beta1::Expr* value) {
  if (GetArenaNoVirtual() == nullptr) {
    delete value_;
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1beta1.IdentDecl.value)
}
void IdentDecl::clear_value() {
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
IdentDecl::IdentDecl()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.expr.v1beta1.IdentDecl)
}
IdentDecl::IdentDecl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1beta1.IdentDecl)
}
IdentDecl::IdentDecl(const IdentDecl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_type()) {
    type_ = new ::google::api::expr::v1beta1::DeclType(*from.type_);
  } else {
    type_ = nullptr;
  }
  if (from._internal_has_value()) {
    value_ = new ::google::api::expr::v1beta1::Expr(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1beta1.IdentDecl)
}

void IdentDecl::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IdentDecl_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto.base);
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&type_)) + sizeof(value_));
}

IdentDecl::~IdentDecl() {
  // @@protoc_insertion_point(destructor:google.api.expr.v1beta1.IdentDecl)
  SharedDtor();
}

void IdentDecl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete type_;
  if (this != internal_default_instance()) delete value_;
}

void IdentDecl::ArenaDtor(void* object) {
  IdentDecl* _this = reinterpret_cast< IdentDecl* >(object);
  (void)_this;
}
void IdentDecl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IdentDecl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IdentDecl& IdentDecl::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IdentDecl_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto.base);
  return *internal_default_instance();
}


void IdentDecl::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.expr.v1beta1.IdentDecl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear();
}

const char* IdentDecl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.api.expr.v1beta1.DeclType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.api.expr.v1beta1.Expr value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IdentDecl::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1beta1.IdentDecl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.api.expr.v1beta1.DeclType type = 3;
  if (this->has_type()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::type(this), target, stream);
  }

  // .google.api.expr.v1beta1.Expr value = 4;
  if (this->has_value()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1beta1.IdentDecl)
  return target;
}

size_t IdentDecl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1beta1.IdentDecl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.api.expr.v1beta1.DeclType type = 3;
  if (this->has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_);
  }

  // .google.api.expr.v1beta1.Expr value = 4;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IdentDecl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.expr.v1beta1.IdentDecl)
  GOOGLE_DCHECK_NE(&from, this);
  const IdentDecl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IdentDecl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.expr.v1beta1.IdentDecl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.expr.v1beta1.IdentDecl)
    MergeFrom(*source);
  }
}

void IdentDecl::MergeFrom(const IdentDecl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1beta1.IdentDecl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_type()) {
    _internal_mutable_type()->::google::api::expr::v1beta1::DeclType::MergeFrom(from._internal_type());
  }
  if (from.has_value()) {
    _internal_mutable_value()->::google::api::expr::v1beta1::Expr::MergeFrom(from._internal_value());
  }
}

void IdentDecl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.expr.v1beta1.IdentDecl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IdentDecl::CopyFrom(const IdentDecl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1beta1.IdentDecl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IdentDecl::IsInitialized() const {
  return true;
}

void IdentDecl::InternalSwap(IdentDecl* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IdentDecl::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FunctionDecl::InitAsDefaultInstance() {
  ::google::api::expr::v1beta1::_FunctionDecl_default_instance_._instance.get_mutable()->return_type_ = const_cast< ::google::api::expr::v1beta1::DeclType*>(
      ::google::api::expr::v1beta1::DeclType::internal_default_instance());
}
class FunctionDecl::_Internal {
 public:
  static const ::google::api::expr::v1beta1::DeclType& return_type(const FunctionDecl* msg);
};

const ::google::api::expr::v1beta1::DeclType&
FunctionDecl::_Internal::return_type(const FunctionDecl* msg) {
  return *msg->return_type_;
}
void FunctionDecl::unsafe_arena_set_allocated_return_type(
    ::google::api::expr::v1beta1::DeclType* return_type) {
  if (GetArenaNoVirtual() == nullptr) {
    delete return_type_;
  }
  return_type_ = return_type;
  if (return_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1beta1.FunctionDecl.return_type)
}
FunctionDecl::FunctionDecl()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.expr.v1beta1.FunctionDecl)
}
FunctionDecl::FunctionDecl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  args_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1beta1.FunctionDecl)
}
FunctionDecl::FunctionDecl(const FunctionDecl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      args_(from.args_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_return_type()) {
    return_type_ = new ::google::api::expr::v1beta1::DeclType(*from.return_type_);
  } else {
    return_type_ = nullptr;
  }
  receiver_function_ = from.receiver_function_;
  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1beta1.FunctionDecl)
}

void FunctionDecl::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FunctionDecl_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto.base);
  ::memset(&return_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&receiver_function_) -
      reinterpret_cast<char*>(&return_type_)) + sizeof(receiver_function_));
}

FunctionDecl::~FunctionDecl() {
  // @@protoc_insertion_point(destructor:google.api.expr.v1beta1.FunctionDecl)
  SharedDtor();
}

void FunctionDecl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete return_type_;
}

void FunctionDecl::ArenaDtor(void* object) {
  FunctionDecl* _this = reinterpret_cast< FunctionDecl* >(object);
  (void)_this;
}
void FunctionDecl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FunctionDecl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FunctionDecl& FunctionDecl::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FunctionDecl_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto.base);
  return *internal_default_instance();
}


void FunctionDecl::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.expr.v1beta1.FunctionDecl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.Clear();
  if (GetArenaNoVirtual() == nullptr && return_type_ != nullptr) {
    delete return_type_;
  }
  return_type_ = nullptr;
  receiver_function_ = false;
  _internal_metadata_.Clear();
}

const char* FunctionDecl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .google.api.expr.v1beta1.IdentDecl args = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_args(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.api.expr.v1beta1.DeclType return_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_return_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool receiver_function = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          receiver_function_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FunctionDecl::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1beta1.FunctionDecl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.api.expr.v1beta1.IdentDecl args = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_args_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_args(i), target, stream);
  }

  // .google.api.expr.v1beta1.DeclType return_type = 2;
  if (this->has_return_type()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::return_type(this), target, stream);
  }

  // bool receiver_function = 3;
  if (this->receiver_function() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_receiver_function(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1beta1.FunctionDecl)
  return target;
}

size_t FunctionDecl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1beta1.FunctionDecl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.api.expr.v1beta1.IdentDecl args = 1;
  total_size += 1UL * this->_internal_args_size();
  for (const auto& msg : this->args_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.api.expr.v1beta1.DeclType return_type = 2;
  if (this->has_return_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *return_type_);
  }

  // bool receiver_function = 3;
  if (this->receiver_function() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FunctionDecl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.expr.v1beta1.FunctionDecl)
  GOOGLE_DCHECK_NE(&from, this);
  const FunctionDecl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FunctionDecl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.expr.v1beta1.FunctionDecl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.expr.v1beta1.FunctionDecl)
    MergeFrom(*source);
  }
}

void FunctionDecl::MergeFrom(const FunctionDecl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1beta1.FunctionDecl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  args_.MergeFrom(from.args_);
  if (from.has_return_type()) {
    _internal_mutable_return_type()->::google::api::expr::v1beta1::DeclType::MergeFrom(from._internal_return_type());
  }
  if (from.receiver_function() != 0) {
    _internal_set_receiver_function(from._internal_receiver_function());
  }
}

void FunctionDecl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.expr.v1beta1.FunctionDecl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FunctionDecl::CopyFrom(const FunctionDecl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1beta1.FunctionDecl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FunctionDecl::IsInitialized() const {
  return true;
}

void FunctionDecl::InternalSwap(FunctionDecl* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  args_.InternalSwap(&other->args_);
  swap(return_type_, other->return_type_);
  swap(receiver_function_, other->receiver_function_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FunctionDecl::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace expr
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::google::api::expr::v1beta1::Decl* Arena::CreateMaybeMessage< ::google::api::expr::v1beta1::Decl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::expr::v1beta1::Decl >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::expr::v1beta1::DeclType* Arena::CreateMaybeMessage< ::google::api::expr::v1beta1::DeclType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::expr::v1beta1::DeclType >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::expr::v1beta1::IdentDecl* Arena::CreateMaybeMessage< ::google::api::expr::v1beta1::IdentDecl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::expr::v1beta1::IdentDecl >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::expr::v1beta1::FunctionDecl* Arena::CreateMaybeMessage< ::google::api::expr::v1beta1::FunctionDecl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::expr::v1beta1::FunctionDecl >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
