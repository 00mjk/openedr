// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/expr/v1beta1/decl.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/api/expr/v1beta1/expr.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto;
namespace google {
namespace api {
namespace expr {
namespace v1beta1 {
class Decl;
class DeclDefaultTypeInternal;
extern DeclDefaultTypeInternal _Decl_default_instance_;
class DeclType;
class DeclTypeDefaultTypeInternal;
extern DeclTypeDefaultTypeInternal _DeclType_default_instance_;
class FunctionDecl;
class FunctionDeclDefaultTypeInternal;
extern FunctionDeclDefaultTypeInternal _FunctionDecl_default_instance_;
class IdentDecl;
class IdentDeclDefaultTypeInternal;
extern IdentDeclDefaultTypeInternal _IdentDecl_default_instance_;
}  // namespace v1beta1
}  // namespace expr
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::api::expr::v1beta1::Decl* Arena::CreateMaybeMessage<::google::api::expr::v1beta1::Decl>(Arena*);
template<> ::google::api::expr::v1beta1::DeclType* Arena::CreateMaybeMessage<::google::api::expr::v1beta1::DeclType>(Arena*);
template<> ::google::api::expr::v1beta1::FunctionDecl* Arena::CreateMaybeMessage<::google::api::expr::v1beta1::FunctionDecl>(Arena*);
template<> ::google::api::expr::v1beta1::IdentDecl* Arena::CreateMaybeMessage<::google::api::expr::v1beta1::IdentDecl>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace api {
namespace expr {
namespace v1beta1 {

// ===================================================================

class Decl :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1beta1.Decl) */ {
 public:
  Decl();
  virtual ~Decl();

  Decl(const Decl& from);
  Decl(Decl&& from) noexcept
    : Decl() {
    *this = ::std::move(from);
  }

  inline Decl& operator=(const Decl& from) {
    CopyFrom(from);
    return *this;
  }
  inline Decl& operator=(Decl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Decl& default_instance();

  enum KindCase {
    kIdent = 4,
    kFunction = 5,
    KIND_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Decl* internal_default_instance() {
    return reinterpret_cast<const Decl*>(
               &_Decl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Decl& a, Decl& b) {
    a.Swap(&b);
  }
  inline void Swap(Decl* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Decl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Decl* New() const final {
    return CreateMaybeMessage<Decl>(nullptr);
  }

  Decl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Decl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Decl& from);
  void MergeFrom(const Decl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Decl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.expr.v1beta1.Decl";
  }
  protected:
  explicit Decl(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto);
    return ::descriptor_table_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kDocFieldNumber = 3,
    kIdFieldNumber = 1,
    kIdentFieldNumber = 4,
    kFunctionFieldNumber = 5,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string doc = 3;
  void clear_doc();
  const std::string& doc() const;
  void set_doc(const std::string& value);
  void set_doc(std::string&& value);
  void set_doc(const char* value);
  void set_doc(const char* value, size_t size);
  std::string* mutable_doc();
  std::string* release_doc();
  void set_allocated_doc(std::string* doc);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_doc();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_doc(
      std::string* doc);
  private:
  const std::string& _internal_doc() const;
  void _internal_set_doc(const std::string& value);
  std::string* _internal_mutable_doc();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .google.api.expr.v1beta1.IdentDecl ident = 4;
  bool has_ident() const;
  private:
  bool _internal_has_ident() const;
  public:
  void clear_ident();
  const ::google::api::expr::v1beta1::IdentDecl& ident() const;
  ::google::api::expr::v1beta1::IdentDecl* release_ident();
  ::google::api::expr::v1beta1::IdentDecl* mutable_ident();
  void set_allocated_ident(::google::api::expr::v1beta1::IdentDecl* ident);
  private:
  const ::google::api::expr::v1beta1::IdentDecl& _internal_ident() const;
  ::google::api::expr::v1beta1::IdentDecl* _internal_mutable_ident();
  public:
  void unsafe_arena_set_allocated_ident(
      ::google::api::expr::v1beta1::IdentDecl* ident);
  ::google::api::expr::v1beta1::IdentDecl* unsafe_arena_release_ident();

  // .google.api.expr.v1beta1.FunctionDecl function = 5;
  bool has_function() const;
  private:
  bool _internal_has_function() const;
  public:
  void clear_function();
  const ::google::api::expr::v1beta1::FunctionDecl& function() const;
  ::google::api::expr::v1beta1::FunctionDecl* release_function();
  ::google::api::expr::v1beta1::FunctionDecl* mutable_function();
  void set_allocated_function(::google::api::expr::v1beta1::FunctionDecl* function);
  private:
  const ::google::api::expr::v1beta1::FunctionDecl& _internal_function() const;
  ::google::api::expr::v1beta1::FunctionDecl* _internal_mutable_function();
  public:
  void unsafe_arena_set_allocated_function(
      ::google::api::expr::v1beta1::FunctionDecl* function);
  ::google::api::expr::v1beta1::FunctionDecl* unsafe_arena_release_function();

  void clear_kind();
  KindCase kind_case() const;
  // @@protoc_insertion_point(class_scope:google.api.expr.v1beta1.Decl)
 private:
  class _Internal;
  void set_has_ident();
  void set_has_function();

  inline bool has_kind() const;
  inline void clear_has_kind();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr doc_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  union KindUnion {
    KindUnion() {}
    ::google::api::expr::v1beta1::IdentDecl* ident_;
    ::google::api::expr::v1beta1::FunctionDecl* function_;
  } kind_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto;
};
// -------------------------------------------------------------------

class DeclType :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1beta1.DeclType) */ {
 public:
  DeclType();
  virtual ~DeclType();

  DeclType(const DeclType& from);
  DeclType(DeclType&& from) noexcept
    : DeclType() {
    *this = ::std::move(from);
  }

  inline DeclType& operator=(const DeclType& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeclType& operator=(DeclType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeclType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeclType* internal_default_instance() {
    return reinterpret_cast<const DeclType*>(
               &_DeclType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DeclType& a, DeclType& b) {
    a.Swap(&b);
  }
  inline void Swap(DeclType* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeclType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeclType* New() const final {
    return CreateMaybeMessage<DeclType>(nullptr);
  }

  DeclType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeclType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeclType& from);
  void MergeFrom(const DeclType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeclType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.expr.v1beta1.DeclType";
  }
  protected:
  explicit DeclType(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto);
    return ::descriptor_table_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeParamsFieldNumber = 4,
    kTypeFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .google.api.expr.v1beta1.DeclType type_params = 4;
  int type_params_size() const;
  private:
  int _internal_type_params_size() const;
  public:
  void clear_type_params();
  ::google::api::expr::v1beta1::DeclType* mutable_type_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1beta1::DeclType >*
      mutable_type_params();
  private:
  const ::google::api::expr::v1beta1::DeclType& _internal_type_params(int index) const;
  ::google::api::expr::v1beta1::DeclType* _internal_add_type_params();
  public:
  const ::google::api::expr::v1beta1::DeclType& type_params(int index) const;
  ::google::api::expr::v1beta1::DeclType* add_type_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1beta1::DeclType >&
      type_params() const;

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.api.expr.v1beta1.DeclType)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1beta1::DeclType > type_params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto;
};
// -------------------------------------------------------------------

class IdentDecl :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1beta1.IdentDecl) */ {
 public:
  IdentDecl();
  virtual ~IdentDecl();

  IdentDecl(const IdentDecl& from);
  IdentDecl(IdentDecl&& from) noexcept
    : IdentDecl() {
    *this = ::std::move(from);
  }

  inline IdentDecl& operator=(const IdentDecl& from) {
    CopyFrom(from);
    return *this;
  }
  inline IdentDecl& operator=(IdentDecl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IdentDecl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IdentDecl* internal_default_instance() {
    return reinterpret_cast<const IdentDecl*>(
               &_IdentDecl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(IdentDecl& a, IdentDecl& b) {
    a.Swap(&b);
  }
  inline void Swap(IdentDecl* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IdentDecl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IdentDecl* New() const final {
    return CreateMaybeMessage<IdentDecl>(nullptr);
  }

  IdentDecl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IdentDecl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IdentDecl& from);
  void MergeFrom(const IdentDecl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IdentDecl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.expr.v1beta1.IdentDecl";
  }
  protected:
  explicit IdentDecl(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto);
    return ::descriptor_table_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 3,
    kValueFieldNumber = 4,
  };
  // .google.api.expr.v1beta1.DeclType type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::google::api::expr::v1beta1::DeclType& type() const;
  ::google::api::expr::v1beta1::DeclType* release_type();
  ::google::api::expr::v1beta1::DeclType* mutable_type();
  void set_allocated_type(::google::api::expr::v1beta1::DeclType* type);
  private:
  const ::google::api::expr::v1beta1::DeclType& _internal_type() const;
  ::google::api::expr::v1beta1::DeclType* _internal_mutable_type();
  public:
  void unsafe_arena_set_allocated_type(
      ::google::api::expr::v1beta1::DeclType* type);
  ::google::api::expr::v1beta1::DeclType* unsafe_arena_release_type();

  // .google.api.expr.v1beta1.Expr value = 4;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::google::api::expr::v1beta1::Expr& value() const;
  ::google::api::expr::v1beta1::Expr* release_value();
  ::google::api::expr::v1beta1::Expr* mutable_value();
  void set_allocated_value(::google::api::expr::v1beta1::Expr* value);
  private:
  const ::google::api::expr::v1beta1::Expr& _internal_value() const;
  ::google::api::expr::v1beta1::Expr* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::google::api::expr::v1beta1::Expr* value);
  ::google::api::expr::v1beta1::Expr* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:google.api.expr.v1beta1.IdentDecl)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::google::api::expr::v1beta1::DeclType* type_;
  ::google::api::expr::v1beta1::Expr* value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto;
};
// -------------------------------------------------------------------

class FunctionDecl :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.api.expr.v1beta1.FunctionDecl) */ {
 public:
  FunctionDecl();
  virtual ~FunctionDecl();

  FunctionDecl(const FunctionDecl& from);
  FunctionDecl(FunctionDecl&& from) noexcept
    : FunctionDecl() {
    *this = ::std::move(from);
  }

  inline FunctionDecl& operator=(const FunctionDecl& from) {
    CopyFrom(from);
    return *this;
  }
  inline FunctionDecl& operator=(FunctionDecl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FunctionDecl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FunctionDecl* internal_default_instance() {
    return reinterpret_cast<const FunctionDecl*>(
               &_FunctionDecl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FunctionDecl& a, FunctionDecl& b) {
    a.Swap(&b);
  }
  inline void Swap(FunctionDecl* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FunctionDecl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FunctionDecl* New() const final {
    return CreateMaybeMessage<FunctionDecl>(nullptr);
  }

  FunctionDecl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FunctionDecl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FunctionDecl& from);
  void MergeFrom(const FunctionDecl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FunctionDecl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.api.expr.v1beta1.FunctionDecl";
  }
  protected:
  explicit FunctionDecl(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto);
    return ::descriptor_table_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 1,
    kReturnTypeFieldNumber = 2,
    kReceiverFunctionFieldNumber = 3,
  };
  // repeated .google.api.expr.v1beta1.IdentDecl args = 1;
  int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  void clear_args();
  ::google::api::expr::v1beta1::IdentDecl* mutable_args(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1beta1::IdentDecl >*
      mutable_args();
  private:
  const ::google::api::expr::v1beta1::IdentDecl& _internal_args(int index) const;
  ::google::api::expr::v1beta1::IdentDecl* _internal_add_args();
  public:
  const ::google::api::expr::v1beta1::IdentDecl& args(int index) const;
  ::google::api::expr::v1beta1::IdentDecl* add_args();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1beta1::IdentDecl >&
      args() const;

  // .google.api.expr.v1beta1.DeclType return_type = 2;
  bool has_return_type() const;
  private:
  bool _internal_has_return_type() const;
  public:
  void clear_return_type();
  const ::google::api::expr::v1beta1::DeclType& return_type() const;
  ::google::api::expr::v1beta1::DeclType* release_return_type();
  ::google::api::expr::v1beta1::DeclType* mutable_return_type();
  void set_allocated_return_type(::google::api::expr::v1beta1::DeclType* return_type);
  private:
  const ::google::api::expr::v1beta1::DeclType& _internal_return_type() const;
  ::google::api::expr::v1beta1::DeclType* _internal_mutable_return_type();
  public:
  void unsafe_arena_set_allocated_return_type(
      ::google::api::expr::v1beta1::DeclType* return_type);
  ::google::api::expr::v1beta1::DeclType* unsafe_arena_release_return_type();

  // bool receiver_function = 3;
  void clear_receiver_function();
  bool receiver_function() const;
  void set_receiver_function(bool value);
  private:
  bool _internal_receiver_function() const;
  void _internal_set_receiver_function(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.api.expr.v1beta1.FunctionDecl)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1beta1::IdentDecl > args_;
  ::google::api::expr::v1beta1::DeclType* return_type_;
  bool receiver_function_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Decl

// int32 id = 1;
inline void Decl::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Decl::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Decl::id() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1beta1.Decl.id)
  return _internal_id();
}
inline void Decl::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Decl::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:google.api.expr.v1beta1.Decl.id)
}

// string name = 2;
inline void Decl::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Decl::name() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1beta1.Decl.name)
  return _internal_name();
}
inline void Decl::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.api.expr.v1beta1.Decl.name)
}
inline std::string* Decl::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1beta1.Decl.name)
  return _internal_mutable_name();
}
inline const std::string& Decl::_internal_name() const {
  return name_.Get();
}
inline void Decl::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void Decl::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.expr.v1beta1.Decl.name)
}
inline void Decl::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.expr.v1beta1.Decl.name)
}
inline void Decl::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.expr.v1beta1.Decl.name)
}
inline std::string* Decl::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Decl::release_name() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1beta1.Decl.name)
  
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Decl::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1beta1.Decl.name)
}
inline std::string* Decl::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1beta1.Decl.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Decl::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1beta1.Decl.name)
}

// string doc = 3;
inline void Decl::clear_doc() {
  doc_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& Decl::doc() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1beta1.Decl.doc)
  return _internal_doc();
}
inline void Decl::set_doc(const std::string& value) {
  _internal_set_doc(value);
  // @@protoc_insertion_point(field_set:google.api.expr.v1beta1.Decl.doc)
}
inline std::string* Decl::mutable_doc() {
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1beta1.Decl.doc)
  return _internal_mutable_doc();
}
inline const std::string& Decl::_internal_doc() const {
  return doc_.Get();
}
inline void Decl::_internal_set_doc(const std::string& value) {
  
  doc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void Decl::set_doc(std::string&& value) {
  
  doc_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.expr.v1beta1.Decl.doc)
}
inline void Decl::set_doc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  doc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.expr.v1beta1.Decl.doc)
}
inline void Decl::set_doc(const char* value,
    size_t size) {
  
  doc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.expr.v1beta1.Decl.doc)
}
inline std::string* Decl::_internal_mutable_doc() {
  
  return doc_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* Decl::release_doc() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1beta1.Decl.doc)
  
  return doc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void Decl::set_allocated_doc(std::string* doc) {
  if (doc != nullptr) {
    
  } else {
    
  }
  doc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), doc,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1beta1.Decl.doc)
}
inline std::string* Decl::unsafe_arena_release_doc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1beta1.Decl.doc)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return doc_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void Decl::unsafe_arena_set_allocated_doc(
    std::string* doc) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (doc != nullptr) {
    
  } else {
    
  }
  doc_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      doc, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1beta1.Decl.doc)
}

// .google.api.expr.v1beta1.IdentDecl ident = 4;
inline bool Decl::_internal_has_ident() const {
  return kind_case() == kIdent;
}
inline bool Decl::has_ident() const {
  return _internal_has_ident();
}
inline void Decl::set_has_ident() {
  _oneof_case_[0] = kIdent;
}
inline void Decl::clear_ident() {
  if (_internal_has_ident()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete kind_.ident_;
    }
    clear_has_kind();
  }
}
inline ::google::api::expr::v1beta1::IdentDecl* Decl::release_ident() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1beta1.Decl.ident)
  if (has_ident()) {
    clear_has_kind();
      ::google::api::expr::v1beta1::IdentDecl* temp = kind_.ident_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.ident_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::api::expr::v1beta1::IdentDecl& Decl::_internal_ident() const {
  return _internal_has_ident()
      ? *kind_.ident_
      : *reinterpret_cast< ::google::api::expr::v1beta1::IdentDecl*>(&::google::api::expr::v1beta1::_IdentDecl_default_instance_);
}
inline const ::google::api::expr::v1beta1::IdentDecl& Decl::ident() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1beta1.Decl.ident)
  return _internal_ident();
}
inline ::google::api::expr::v1beta1::IdentDecl* Decl::unsafe_arena_release_ident() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1beta1.Decl.ident)
  if (has_ident()) {
    clear_has_kind();
    ::google::api::expr::v1beta1::IdentDecl* temp = kind_.ident_;
    kind_.ident_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Decl::unsafe_arena_set_allocated_ident(::google::api::expr::v1beta1::IdentDecl* ident) {
  clear_kind();
  if (ident) {
    set_has_ident();
    kind_.ident_ = ident;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1beta1.Decl.ident)
}
inline ::google::api::expr::v1beta1::IdentDecl* Decl::_internal_mutable_ident() {
  if (!_internal_has_ident()) {
    clear_kind();
    set_has_ident();
    kind_.ident_ = CreateMaybeMessage< ::google::api::expr::v1beta1::IdentDecl >(
        GetArenaNoVirtual());
  }
  return kind_.ident_;
}
inline ::google::api::expr::v1beta1::IdentDecl* Decl::mutable_ident() {
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1beta1.Decl.ident)
  return _internal_mutable_ident();
}

// .google.api.expr.v1beta1.FunctionDecl function = 5;
inline bool Decl::_internal_has_function() const {
  return kind_case() == kFunction;
}
inline bool Decl::has_function() const {
  return _internal_has_function();
}
inline void Decl::set_has_function() {
  _oneof_case_[0] = kFunction;
}
inline void Decl::clear_function() {
  if (_internal_has_function()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete kind_.function_;
    }
    clear_has_kind();
  }
}
inline ::google::api::expr::v1beta1::FunctionDecl* Decl::release_function() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1beta1.Decl.function)
  if (has_function()) {
    clear_has_kind();
      ::google::api::expr::v1beta1::FunctionDecl* temp = kind_.function_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    kind_.function_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::api::expr::v1beta1::FunctionDecl& Decl::_internal_function() const {
  return _internal_has_function()
      ? *kind_.function_
      : *reinterpret_cast< ::google::api::expr::v1beta1::FunctionDecl*>(&::google::api::expr::v1beta1::_FunctionDecl_default_instance_);
}
inline const ::google::api::expr::v1beta1::FunctionDecl& Decl::function() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1beta1.Decl.function)
  return _internal_function();
}
inline ::google::api::expr::v1beta1::FunctionDecl* Decl::unsafe_arena_release_function() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1beta1.Decl.function)
  if (has_function()) {
    clear_has_kind();
    ::google::api::expr::v1beta1::FunctionDecl* temp = kind_.function_;
    kind_.function_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Decl::unsafe_arena_set_allocated_function(::google::api::expr::v1beta1::FunctionDecl* function) {
  clear_kind();
  if (function) {
    set_has_function();
    kind_.function_ = function;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1beta1.Decl.function)
}
inline ::google::api::expr::v1beta1::FunctionDecl* Decl::_internal_mutable_function() {
  if (!_internal_has_function()) {
    clear_kind();
    set_has_function();
    kind_.function_ = CreateMaybeMessage< ::google::api::expr::v1beta1::FunctionDecl >(
        GetArenaNoVirtual());
  }
  return kind_.function_;
}
inline ::google::api::expr::v1beta1::FunctionDecl* Decl::mutable_function() {
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1beta1.Decl.function)
  return _internal_mutable_function();
}

inline bool Decl::has_kind() const {
  return kind_case() != KIND_NOT_SET;
}
inline void Decl::clear_has_kind() {
  _oneof_case_[0] = KIND_NOT_SET;
}
inline Decl::KindCase Decl::kind_case() const {
  return Decl::KindCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DeclType

// int32 id = 1;
inline void DeclType::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeclType::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeclType::id() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1beta1.DeclType.id)
  return _internal_id();
}
inline void DeclType::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void DeclType::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:google.api.expr.v1beta1.DeclType.id)
}

// string type = 2;
inline void DeclType::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& DeclType::type() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1beta1.DeclType.type)
  return _internal_type();
}
inline void DeclType::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:google.api.expr.v1beta1.DeclType.type)
}
inline std::string* DeclType::mutable_type() {
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1beta1.DeclType.type)
  return _internal_mutable_type();
}
inline const std::string& DeclType::_internal_type() const {
  return type_.Get();
}
inline void DeclType::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void DeclType::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.api.expr.v1beta1.DeclType.type)
}
inline void DeclType::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.api.expr.v1beta1.DeclType.type)
}
inline void DeclType::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.api.expr.v1beta1.DeclType.type)
}
inline std::string* DeclType::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* DeclType::release_type() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1beta1.DeclType.type)
  
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void DeclType::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1beta1.DeclType.type)
}
inline std::string* DeclType::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.api.expr.v1beta1.DeclType.type)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DeclType::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1beta1.DeclType.type)
}

// repeated .google.api.expr.v1beta1.DeclType type_params = 4;
inline int DeclType::_internal_type_params_size() const {
  return type_params_.size();
}
inline int DeclType::type_params_size() const {
  return _internal_type_params_size();
}
inline void DeclType::clear_type_params() {
  type_params_.Clear();
}
inline ::google::api::expr::v1beta1::DeclType* DeclType::mutable_type_params(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1beta1.DeclType.type_params)
  return type_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1beta1::DeclType >*
DeclType::mutable_type_params() {
  // @@protoc_insertion_point(field_mutable_list:google.api.expr.v1beta1.DeclType.type_params)
  return &type_params_;
}
inline const ::google::api::expr::v1beta1::DeclType& DeclType::_internal_type_params(int index) const {
  return type_params_.Get(index);
}
inline const ::google::api::expr::v1beta1::DeclType& DeclType::type_params(int index) const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1beta1.DeclType.type_params)
  return _internal_type_params(index);
}
inline ::google::api::expr::v1beta1::DeclType* DeclType::_internal_add_type_params() {
  return type_params_.Add();
}
inline ::google::api::expr::v1beta1::DeclType* DeclType::add_type_params() {
  // @@protoc_insertion_point(field_add:google.api.expr.v1beta1.DeclType.type_params)
  return _internal_add_type_params();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1beta1::DeclType >&
DeclType::type_params() const {
  // @@protoc_insertion_point(field_list:google.api.expr.v1beta1.DeclType.type_params)
  return type_params_;
}

// -------------------------------------------------------------------

// IdentDecl

// .google.api.expr.v1beta1.DeclType type = 3;
inline bool IdentDecl::_internal_has_type() const {
  return this != internal_default_instance() && type_ != nullptr;
}
inline bool IdentDecl::has_type() const {
  return _internal_has_type();
}
inline void IdentDecl::clear_type() {
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
}
inline const ::google::api::expr::v1beta1::DeclType& IdentDecl::_internal_type() const {
  const ::google::api::expr::v1beta1::DeclType* p = type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::google::api::expr::v1beta1::DeclType*>(
      &::google::api::expr::v1beta1::_DeclType_default_instance_);
}
inline const ::google::api::expr::v1beta1::DeclType& IdentDecl::type() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1beta1.IdentDecl.type)
  return _internal_type();
}
inline ::google::api::expr::v1beta1::DeclType* IdentDecl::release_type() {
  auto temp = unsafe_arena_release_type();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::api::expr::v1beta1::DeclType* IdentDecl::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1beta1.IdentDecl.type)
  
  ::google::api::expr::v1beta1::DeclType* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::google::api::expr::v1beta1::DeclType* IdentDecl::_internal_mutable_type() {
  
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::expr::v1beta1::DeclType>(GetArenaNoVirtual());
    type_ = p;
  }
  return type_;
}
inline ::google::api::expr::v1beta1::DeclType* IdentDecl::mutable_type() {
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1beta1.IdentDecl.type)
  return _internal_mutable_type();
}
inline void IdentDecl::set_allocated_type(::google::api::expr::v1beta1::DeclType* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete type_;
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(type);
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1beta1.IdentDecl.type)
}

// .google.api.expr.v1beta1.Expr value = 4;
inline bool IdentDecl::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool IdentDecl::has_value() const {
  return _internal_has_value();
}
inline const ::google::api::expr::v1beta1::Expr& IdentDecl::_internal_value() const {
  const ::google::api::expr::v1beta1::Expr* p = value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::google::api::expr::v1beta1::Expr*>(
      &::google::api::expr::v1beta1::_Expr_default_instance_);
}
inline const ::google::api::expr::v1beta1::Expr& IdentDecl::value() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1beta1.IdentDecl.value)
  return _internal_value();
}
inline ::google::api::expr::v1beta1::Expr* IdentDecl::release_value() {
  auto temp = unsafe_arena_release_value();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::api::expr::v1beta1::Expr* IdentDecl::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1beta1.IdentDecl.value)
  
  ::google::api::expr::v1beta1::Expr* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::google::api::expr::v1beta1::Expr* IdentDecl::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::expr::v1beta1::Expr>(GetArenaNoVirtual());
    value_ = p;
  }
  return value_;
}
inline ::google::api::expr::v1beta1::Expr* IdentDecl::mutable_value() {
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1beta1.IdentDecl.value)
  return _internal_mutable_value();
}
inline void IdentDecl::set_allocated_value(::google::api::expr::v1beta1::Expr* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1beta1.IdentDecl.value)
}

// -------------------------------------------------------------------

// FunctionDecl

// repeated .google.api.expr.v1beta1.IdentDecl args = 1;
inline int FunctionDecl::_internal_args_size() const {
  return args_.size();
}
inline int FunctionDecl::args_size() const {
  return _internal_args_size();
}
inline void FunctionDecl::clear_args() {
  args_.Clear();
}
inline ::google::api::expr::v1beta1::IdentDecl* FunctionDecl::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1beta1.FunctionDecl.args)
  return args_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1beta1::IdentDecl >*
FunctionDecl::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:google.api.expr.v1beta1.FunctionDecl.args)
  return &args_;
}
inline const ::google::api::expr::v1beta1::IdentDecl& FunctionDecl::_internal_args(int index) const {
  return args_.Get(index);
}
inline const ::google::api::expr::v1beta1::IdentDecl& FunctionDecl::args(int index) const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1beta1.FunctionDecl.args)
  return _internal_args(index);
}
inline ::google::api::expr::v1beta1::IdentDecl* FunctionDecl::_internal_add_args() {
  return args_.Add();
}
inline ::google::api::expr::v1beta1::IdentDecl* FunctionDecl::add_args() {
  // @@protoc_insertion_point(field_add:google.api.expr.v1beta1.FunctionDecl.args)
  return _internal_add_args();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::expr::v1beta1::IdentDecl >&
FunctionDecl::args() const {
  // @@protoc_insertion_point(field_list:google.api.expr.v1beta1.FunctionDecl.args)
  return args_;
}

// .google.api.expr.v1beta1.DeclType return_type = 2;
inline bool FunctionDecl::_internal_has_return_type() const {
  return this != internal_default_instance() && return_type_ != nullptr;
}
inline bool FunctionDecl::has_return_type() const {
  return _internal_has_return_type();
}
inline void FunctionDecl::clear_return_type() {
  if (GetArenaNoVirtual() == nullptr && return_type_ != nullptr) {
    delete return_type_;
  }
  return_type_ = nullptr;
}
inline const ::google::api::expr::v1beta1::DeclType& FunctionDecl::_internal_return_type() const {
  const ::google::api::expr::v1beta1::DeclType* p = return_type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::google::api::expr::v1beta1::DeclType*>(
      &::google::api::expr::v1beta1::_DeclType_default_instance_);
}
inline const ::google::api::expr::v1beta1::DeclType& FunctionDecl::return_type() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1beta1.FunctionDecl.return_type)
  return _internal_return_type();
}
inline ::google::api::expr::v1beta1::DeclType* FunctionDecl::release_return_type() {
  auto temp = unsafe_arena_release_return_type();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::api::expr::v1beta1::DeclType* FunctionDecl::unsafe_arena_release_return_type() {
  // @@protoc_insertion_point(field_release:google.api.expr.v1beta1.FunctionDecl.return_type)
  
  ::google::api::expr::v1beta1::DeclType* temp = return_type_;
  return_type_ = nullptr;
  return temp;
}
inline ::google::api::expr::v1beta1::DeclType* FunctionDecl::_internal_mutable_return_type() {
  
  if (return_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::expr::v1beta1::DeclType>(GetArenaNoVirtual());
    return_type_ = p;
  }
  return return_type_;
}
inline ::google::api::expr::v1beta1::DeclType* FunctionDecl::mutable_return_type() {
  // @@protoc_insertion_point(field_mutable:google.api.expr.v1beta1.FunctionDecl.return_type)
  return _internal_mutable_return_type();
}
inline void FunctionDecl::set_allocated_return_type(::google::api::expr::v1beta1::DeclType* return_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete return_type_;
  }
  if (return_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(return_type);
    if (message_arena != submessage_arena) {
      return_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, return_type, submessage_arena);
    }
    
  } else {
    
  }
  return_type_ = return_type;
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1beta1.FunctionDecl.return_type)
}

// bool receiver_function = 3;
inline void FunctionDecl::clear_receiver_function() {
  receiver_function_ = false;
}
inline bool FunctionDecl::_internal_receiver_function() const {
  return receiver_function_;
}
inline bool FunctionDecl::receiver_function() const {
  // @@protoc_insertion_point(field_get:google.api.expr.v1beta1.FunctionDecl.receiver_function)
  return _internal_receiver_function();
}
inline void FunctionDecl::_internal_set_receiver_function(bool value) {
  
  receiver_function_ = value;
}
inline void FunctionDecl::set_receiver_function(bool value) {
  _internal_set_receiver_function(value);
  // @@protoc_insertion_point(field_set:google.api.expr.v1beta1.FunctionDecl.receiver_function)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1beta1
}  // namespace expr
}  // namespace api
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2fapi_2fexpr_2fv1beta1_2fdecl_2eproto
