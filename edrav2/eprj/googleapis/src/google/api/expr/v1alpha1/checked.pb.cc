// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/api/expr/v1alpha1/checked.proto

#include "google/api/expr/v1alpha1/checked.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CheckedExpr_ReferenceMapEntry_DoNotUse_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CheckedExpr_TypeMapEntry_DoNotUse_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Constant_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Decl_FunctionDecl_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Decl_FunctionDecl_Overload_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Decl_IdentDecl_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Expr_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Reference_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SourceInfo_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Type_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fempty_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Empty_google_2fprotobuf_2fempty_2eproto;
namespace google {
namespace api {
namespace expr {
namespace v1alpha1 {
class CheckedExpr_ReferenceMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckedExpr_ReferenceMapEntry_DoNotUse> _instance;
} _CheckedExpr_ReferenceMapEntry_DoNotUse_default_instance_;
class CheckedExpr_TypeMapEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckedExpr_TypeMapEntry_DoNotUse> _instance;
} _CheckedExpr_TypeMapEntry_DoNotUse_default_instance_;
class CheckedExprDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CheckedExpr> _instance;
} _CheckedExpr_default_instance_;
class Type_ListTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Type_ListType> _instance;
} _Type_ListType_default_instance_;
class Type_MapTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Type_MapType> _instance;
} _Type_MapType_default_instance_;
class Type_FunctionTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Type_FunctionType> _instance;
} _Type_FunctionType_default_instance_;
class Type_AbstractTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Type_AbstractType> _instance;
} _Type_AbstractType_default_instance_;
class TypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Type> _instance;
  const PROTOBUF_NAMESPACE_ID::Empty* dyn_;
  int null_;
  int primitive_;
  int wrapper_;
  int well_known_;
  const ::google::api::expr::v1alpha1::Type_ListType* list_type_;
  const ::google::api::expr::v1alpha1::Type_MapType* map_type_;
  const ::google::api::expr::v1alpha1::Type_FunctionType* function_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_param_;
  const ::google::api::expr::v1alpha1::Type* type_;
  const PROTOBUF_NAMESPACE_ID::Empty* error_;
  const ::google::api::expr::v1alpha1::Type_AbstractType* abstract_type_;
} _Type_default_instance_;
class Decl_IdentDeclDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Decl_IdentDecl> _instance;
} _Decl_IdentDecl_default_instance_;
class Decl_FunctionDecl_OverloadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Decl_FunctionDecl_Overload> _instance;
} _Decl_FunctionDecl_Overload_default_instance_;
class Decl_FunctionDeclDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Decl_FunctionDecl> _instance;
} _Decl_FunctionDecl_default_instance_;
class DeclDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Decl> _instance;
  const ::google::api::expr::v1alpha1::Decl_IdentDecl* ident_;
  const ::google::api::expr::v1alpha1::Decl_FunctionDecl* function_;
} _Decl_default_instance_;
class ReferenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Reference> _instance;
} _Reference_default_instance_;
}  // namespace v1alpha1
}  // namespace expr
}  // namespace api
}  // namespace google
static void InitDefaultsscc_info_CheckedExpr_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::api::expr::v1alpha1::_CheckedExpr_default_instance_;
    new (ptr) ::google::api::expr::v1alpha1::CheckedExpr();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::api::expr::v1alpha1::CheckedExpr::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CheckedExpr_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_CheckedExpr_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto}, {
      &scc_info_CheckedExpr_ReferenceMapEntry_DoNotUse_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto.base,
      &scc_info_CheckedExpr_TypeMapEntry_DoNotUse_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto.base,
      &scc_info_SourceInfo_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto.base,
      &scc_info_Expr_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto.base,}};

static void InitDefaultsscc_info_CheckedExpr_ReferenceMapEntry_DoNotUse_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::api::expr::v1alpha1::_CheckedExpr_ReferenceMapEntry_DoNotUse_default_instance_;
    new (ptr) ::google::api::expr::v1alpha1::CheckedExpr_ReferenceMapEntry_DoNotUse();
  }
  ::google::api::expr::v1alpha1::CheckedExpr_ReferenceMapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CheckedExpr_ReferenceMapEntry_DoNotUse_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CheckedExpr_ReferenceMapEntry_DoNotUse_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto}, {
      &scc_info_Reference_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto.base,}};

static void InitDefaultsscc_info_CheckedExpr_TypeMapEntry_DoNotUse_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::api::expr::v1alpha1::_CheckedExpr_TypeMapEntry_DoNotUse_default_instance_;
    new (ptr) ::google::api::expr::v1alpha1::CheckedExpr_TypeMapEntry_DoNotUse();
  }
  ::google::api::expr::v1alpha1::CheckedExpr_TypeMapEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CheckedExpr_TypeMapEntry_DoNotUse_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CheckedExpr_TypeMapEntry_DoNotUse_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto}, {
      &scc_info_Type_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto.base,}};

static void InitDefaultsscc_info_Decl_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::api::expr::v1alpha1::_Decl_default_instance_;
    new (ptr) ::google::api::expr::v1alpha1::Decl();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::api::expr::v1alpha1::Decl::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Decl_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Decl_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto}, {
      &scc_info_Decl_IdentDecl_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto.base,
      &scc_info_Decl_FunctionDecl_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto.base,}};

static void InitDefaultsscc_info_Decl_FunctionDecl_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::api::expr::v1alpha1::_Decl_FunctionDecl_default_instance_;
    new (ptr) ::google::api::expr::v1alpha1::Decl_FunctionDecl();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::api::expr::v1alpha1::Decl_FunctionDecl::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Decl_FunctionDecl_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Decl_FunctionDecl_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto}, {
      &scc_info_Decl_FunctionDecl_Overload_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto.base,}};

static void InitDefaultsscc_info_Decl_FunctionDecl_Overload_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::api::expr::v1alpha1::_Decl_FunctionDecl_Overload_default_instance_;
    new (ptr) ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Decl_FunctionDecl_Overload_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Decl_FunctionDecl_Overload_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto}, {
      &scc_info_Type_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto.base,}};

static void InitDefaultsscc_info_Decl_IdentDecl_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::api::expr::v1alpha1::_Decl_IdentDecl_default_instance_;
    new (ptr) ::google::api::expr::v1alpha1::Decl_IdentDecl();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::api::expr::v1alpha1::Decl_IdentDecl::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Decl_IdentDecl_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Decl_IdentDecl_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto}, {
      &scc_info_Type_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto.base,
      &scc_info_Constant_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto.base,}};

static void InitDefaultsscc_info_Reference_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::api::expr::v1alpha1::_Reference_default_instance_;
    new (ptr) ::google::api::expr::v1alpha1::Reference();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::api::expr::v1alpha1::Reference::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Reference_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Reference_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto}, {
      &scc_info_Constant_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto.base,}};

static void InitDefaultsscc_info_Type_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::api::expr::v1alpha1::_Type_ListType_default_instance_;
    new (ptr) ::google::api::expr::v1alpha1::Type_ListType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::google::api::expr::v1alpha1::_Type_MapType_default_instance_;
    new (ptr) ::google::api::expr::v1alpha1::Type_MapType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::google::api::expr::v1alpha1::_Type_FunctionType_default_instance_;
    new (ptr) ::google::api::expr::v1alpha1::Type_FunctionType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::google::api::expr::v1alpha1::_Type_AbstractType_default_instance_;
    new (ptr) ::google::api::expr::v1alpha1::Type_AbstractType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::google::api::expr::v1alpha1::_Type_default_instance_;
    new (ptr) ::google::api::expr::v1alpha1::Type();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::api::expr::v1alpha1::Type_ListType::InitAsDefaultInstance();
  ::google::api::expr::v1alpha1::Type_MapType::InitAsDefaultInstance();
  ::google::api::expr::v1alpha1::Type_FunctionType::InitAsDefaultInstance();
  ::google::api::expr::v1alpha1::Type_AbstractType::InitAsDefaultInstance();
  ::google::api::expr::v1alpha1::Type::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Type_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Type_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto}, {
      &scc_info_Empty_google_2fprotobuf_2fempty_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto[13];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr_ReferenceMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr_ReferenceMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr_ReferenceMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr_ReferenceMapEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr_TypeMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr_TypeMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr_TypeMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr_TypeMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr, reference_map_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr, type_map_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr, source_info_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::CheckedExpr, expr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type_ListType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type_ListType, elem_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type_MapType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type_MapType, key_type_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type_MapType, value_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type_FunctionType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type_FunctionType, result_type_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type_FunctionType, arg_types_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type_AbstractType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type_AbstractType, name_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type_AbstractType, parameter_types_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::google::api::expr::v1alpha1::TypeDefaultTypeInternal, dyn_),
  offsetof(::google::api::expr::v1alpha1::TypeDefaultTypeInternal, null_),
  offsetof(::google::api::expr::v1alpha1::TypeDefaultTypeInternal, primitive_),
  offsetof(::google::api::expr::v1alpha1::TypeDefaultTypeInternal, wrapper_),
  offsetof(::google::api::expr::v1alpha1::TypeDefaultTypeInternal, well_known_),
  offsetof(::google::api::expr::v1alpha1::TypeDefaultTypeInternal, list_type_),
  offsetof(::google::api::expr::v1alpha1::TypeDefaultTypeInternal, map_type_),
  offsetof(::google::api::expr::v1alpha1::TypeDefaultTypeInternal, function_),
  offsetof(::google::api::expr::v1alpha1::TypeDefaultTypeInternal, message_type_),
  offsetof(::google::api::expr::v1alpha1::TypeDefaultTypeInternal, type_param_),
  offsetof(::google::api::expr::v1alpha1::TypeDefaultTypeInternal, type_),
  offsetof(::google::api::expr::v1alpha1::TypeDefaultTypeInternal, error_),
  offsetof(::google::api::expr::v1alpha1::TypeDefaultTypeInternal, abstract_type_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Type, type_kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl_IdentDecl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl_IdentDecl, type_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl_IdentDecl, value_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl_IdentDecl, doc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload, overload_id_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload, params_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload, type_params_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload, result_type_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload, is_instance_function_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload, doc_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl_FunctionDecl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl_FunctionDecl, overloads_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl, name_),
  offsetof(::google::api::expr::v1alpha1::DeclDefaultTypeInternal, ident_),
  offsetof(::google::api::expr::v1alpha1::DeclDefaultTypeInternal, function_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Decl, decl_kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Reference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Reference, name_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Reference, overload_id_),
  PROTOBUF_FIELD_OFFSET(::google::api::expr::v1alpha1::Reference, value_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::google::api::expr::v1alpha1::CheckedExpr_ReferenceMapEntry_DoNotUse)},
  { 9, 16, sizeof(::google::api::expr::v1alpha1::CheckedExpr_TypeMapEntry_DoNotUse)},
  { 18, -1, sizeof(::google::api::expr::v1alpha1::CheckedExpr)},
  { 27, -1, sizeof(::google::api::expr::v1alpha1::Type_ListType)},
  { 33, -1, sizeof(::google::api::expr::v1alpha1::Type_MapType)},
  { 40, -1, sizeof(::google::api::expr::v1alpha1::Type_FunctionType)},
  { 47, -1, sizeof(::google::api::expr::v1alpha1::Type_AbstractType)},
  { 54, -1, sizeof(::google::api::expr::v1alpha1::Type)},
  { 73, -1, sizeof(::google::api::expr::v1alpha1::Decl_IdentDecl)},
  { 81, -1, sizeof(::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload)},
  { 92, -1, sizeof(::google::api::expr::v1alpha1::Decl_FunctionDecl)},
  { 98, -1, sizeof(::google::api::expr::v1alpha1::Decl)},
  { 107, -1, sizeof(::google::api::expr::v1alpha1::Reference)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::expr::v1alpha1::_CheckedExpr_ReferenceMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::expr::v1alpha1::_CheckedExpr_TypeMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::expr::v1alpha1::_CheckedExpr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::expr::v1alpha1::_Type_ListType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::expr::v1alpha1::_Type_MapType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::expr::v1alpha1::_Type_FunctionType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::expr::v1alpha1::_Type_AbstractType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::expr::v1alpha1::_Type_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::expr::v1alpha1::_Decl_IdentDecl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::expr::v1alpha1::_Decl_FunctionDecl_Overload_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::expr::v1alpha1::_Decl_FunctionDecl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::expr::v1alpha1::_Decl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::api::expr::v1alpha1::_Reference_default_instance_),
};

const char descriptor_table_protodef_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&google/api/expr/v1alpha1/checked.proto"
  "\022\030google.api.expr.v1alpha1\032%google/api/e"
  "xpr/v1alpha1/syntax.proto\032\033google/protob"
  "uf/empty.proto\032\034google/protobuf/struct.p"
  "roto\"\266\003\n\013CheckedExpr\022N\n\rreference_map\030\002 "
  "\003(\01327.google.api.expr.v1alpha1.CheckedEx"
  "pr.ReferenceMapEntry\022D\n\010type_map\030\003 \003(\01322"
  ".google.api.expr.v1alpha1.CheckedExpr.Ty"
  "peMapEntry\0229\n\013source_info\030\005 \001(\0132$.google"
  ".api.expr.v1alpha1.SourceInfo\022,\n\004expr\030\004 "
  "\001(\0132\036.google.api.expr.v1alpha1.Expr\032X\n\021R"
  "eferenceMapEntry\022\013\n\003key\030\001 \001(\003\0222\n\005value\030\002"
  " \001(\0132#.google.api.expr.v1alpha1.Referenc"
  "e:\0028\001\032N\n\014TypeMapEntry\022\013\n\003key\030\001 \001(\003\022-\n\005va"
  "lue\030\002 \001(\0132\036.google.api.expr.v1alpha1.Typ"
  "e:\0028\001\"\202\n\n\004Type\022%\n\003dyn\030\001 \001(\0132\026.google.pro"
  "tobuf.EmptyH\000\022*\n\004null\030\002 \001(\0162\032.google.pro"
  "tobuf.NullValueH\000\022A\n\tprimitive\030\003 \001(\0162,.g"
  "oogle.api.expr.v1alpha1.Type.PrimitiveTy"
  "peH\000\022\?\n\007wrapper\030\004 \001(\0162,.google.api.expr."
  "v1alpha1.Type.PrimitiveTypeH\000\022B\n\nwell_kn"
  "own\030\005 \001(\0162,.google.api.expr.v1alpha1.Typ"
  "e.WellKnownTypeH\000\022<\n\tlist_type\030\006 \001(\0132\'.g"
  "oogle.api.expr.v1alpha1.Type.ListTypeH\000\022"
  ":\n\010map_type\030\007 \001(\0132&.google.api.expr.v1al"
  "pha1.Type.MapTypeH\000\022\?\n\010function\030\010 \001(\0132+."
  "google.api.expr.v1alpha1.Type.FunctionTy"
  "peH\000\022\026\n\014message_type\030\t \001(\tH\000\022\024\n\ntype_par"
  "am\030\n \001(\tH\000\022.\n\004type\030\013 \001(\0132\036.google.api.ex"
  "pr.v1alpha1.TypeH\000\022\'\n\005error\030\014 \001(\0132\026.goog"
  "le.protobuf.EmptyH\000\022D\n\rabstract_type\030\016 \001"
  "(\0132+.google.api.expr.v1alpha1.Type.Abstr"
  "actTypeH\000\032=\n\010ListType\0221\n\telem_type\030\001 \001(\013"
  "2\036.google.api.expr.v1alpha1.Type\032o\n\007MapT"
  "ype\0220\n\010key_type\030\001 \001(\0132\036.google.api.expr."
  "v1alpha1.Type\0222\n\nvalue_type\030\002 \001(\0132\036.goog"
  "le.api.expr.v1alpha1.Type\032v\n\014FunctionTyp"
  "e\0223\n\013result_type\030\001 \001(\0132\036.google.api.expr"
  ".v1alpha1.Type\0221\n\targ_types\030\002 \003(\0132\036.goog"
  "le.api.expr.v1alpha1.Type\032U\n\014AbstractTyp"
  "e\022\014\n\004name\030\001 \001(\t\0227\n\017parameter_types\030\002 \003(\013"
  "2\036.google.api.expr.v1alpha1.Type\"s\n\rPrim"
  "itiveType\022\036\n\032PRIMITIVE_TYPE_UNSPECIFIED\020"
  "\000\022\010\n\004BOOL\020\001\022\t\n\005INT64\020\002\022\n\n\006UINT64\020\003\022\n\n\006DO"
  "UBLE\020\004\022\n\n\006STRING\020\005\022\t\n\005BYTES\020\006\"V\n\rWellKno"
  "wnType\022\037\n\033WELL_KNOWN_TYPE_UNSPECIFIED\020\000\022"
  "\007\n\003ANY\020\001\022\r\n\tTIMESTAMP\020\002\022\014\n\010DURATION\020\003B\013\n"
  "\ttype_kind\"\271\004\n\004Decl\022\014\n\004name\030\001 \001(\t\0229\n\005ide"
  "nt\030\002 \001(\0132(.google.api.expr.v1alpha1.Decl"
  ".IdentDeclH\000\022\?\n\010function\030\003 \001(\0132+.google."
  "api.expr.v1alpha1.Decl.FunctionDeclH\000\032y\n"
  "\tIdentDecl\022,\n\004type\030\001 \001(\0132\036.google.api.ex"
  "pr.v1alpha1.Type\0221\n\005value\030\002 \001(\0132\".google"
  ".api.expr.v1alpha1.Constant\022\013\n\003doc\030\003 \001(\t"
  "\032\236\002\n\014FunctionDecl\022G\n\toverloads\030\001 \003(\01324.g"
  "oogle.api.expr.v1alpha1.Decl.FunctionDec"
  "l.Overload\032\304\001\n\010Overload\022\023\n\013overload_id\030\001"
  " \001(\t\022.\n\006params\030\002 \003(\0132\036.google.api.expr.v"
  "1alpha1.Type\022\023\n\013type_params\030\003 \003(\t\0223\n\013res"
  "ult_type\030\004 \001(\0132\036.google.api.expr.v1alpha"
  "1.Type\022\034\n\024is_instance_function\030\005 \001(\010\022\013\n\003"
  "doc\030\006 \001(\tB\013\n\tdecl_kind\"a\n\tReference\022\014\n\004n"
  "ame\030\001 \001(\t\022\023\n\013overload_id\030\003 \003(\t\0221\n\005value\030"
  "\004 \001(\0132\".google.api.expr.v1alpha1.Constan"
  "tBl\n\034com.google.api.expr.v1alpha1B\tDeclP"
  "rotoP\001Z<google.golang.org/genproto/googl"
  "eapis/api/expr/v1alpha1;expr\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_deps[3] = {
  &::descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fsyntax_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_sccs[9] = {
  &scc_info_CheckedExpr_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto.base,
  &scc_info_CheckedExpr_ReferenceMapEntry_DoNotUse_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto.base,
  &scc_info_CheckedExpr_TypeMapEntry_DoNotUse_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto.base,
  &scc_info_Decl_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto.base,
  &scc_info_Decl_FunctionDecl_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto.base,
  &scc_info_Decl_FunctionDecl_Overload_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto.base,
  &scc_info_Decl_IdentDecl_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto.base,
  &scc_info_Reference_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto.base,
  &scc_info_Type_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_once;
static bool descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto = {
  &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_initialized, descriptor_table_protodef_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto, "google/api/expr/v1alpha1/checked.proto", 2679,
  &descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_once, descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_sccs, descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto_deps, 9, 3,
  schemas, file_default_instances, TableStruct_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto::offsets,
  file_level_metadata_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto, 13, file_level_enum_descriptors_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto, file_level_service_descriptors_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto), true);
namespace google {
namespace api {
namespace expr {
namespace v1alpha1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_PrimitiveType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto);
  return file_level_enum_descriptors_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto[0];
}
bool Type_PrimitiveType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Type_PrimitiveType Type::PRIMITIVE_TYPE_UNSPECIFIED;
constexpr Type_PrimitiveType Type::BOOL;
constexpr Type_PrimitiveType Type::INT64;
constexpr Type_PrimitiveType Type::UINT64;
constexpr Type_PrimitiveType Type::DOUBLE;
constexpr Type_PrimitiveType Type::STRING;
constexpr Type_PrimitiveType Type::BYTES;
constexpr Type_PrimitiveType Type::PrimitiveType_MIN;
constexpr Type_PrimitiveType Type::PrimitiveType_MAX;
constexpr int Type::PrimitiveType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_WellKnownType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto);
  return file_level_enum_descriptors_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto[1];
}
bool Type_WellKnownType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Type_WellKnownType Type::WELL_KNOWN_TYPE_UNSPECIFIED;
constexpr Type_WellKnownType Type::ANY;
constexpr Type_WellKnownType Type::TIMESTAMP;
constexpr Type_WellKnownType Type::DURATION;
constexpr Type_WellKnownType Type::WellKnownType_MIN;
constexpr Type_WellKnownType Type::WellKnownType_MAX;
constexpr int Type::WellKnownType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

CheckedExpr_ReferenceMapEntry_DoNotUse::CheckedExpr_ReferenceMapEntry_DoNotUse() {}
CheckedExpr_ReferenceMapEntry_DoNotUse::CheckedExpr_ReferenceMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CheckedExpr_ReferenceMapEntry_DoNotUse::MergeFrom(const CheckedExpr_ReferenceMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CheckedExpr_ReferenceMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void CheckedExpr_ReferenceMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

CheckedExpr_TypeMapEntry_DoNotUse::CheckedExpr_TypeMapEntry_DoNotUse() {}
CheckedExpr_TypeMapEntry_DoNotUse::CheckedExpr_TypeMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CheckedExpr_TypeMapEntry_DoNotUse::MergeFrom(const CheckedExpr_TypeMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CheckedExpr_TypeMapEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void CheckedExpr_TypeMapEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void CheckedExpr::InitAsDefaultInstance() {
  ::google::api::expr::v1alpha1::_CheckedExpr_default_instance_._instance.get_mutable()->source_info_ = const_cast< ::google::api::expr::v1alpha1::SourceInfo*>(
      ::google::api::expr::v1alpha1::SourceInfo::internal_default_instance());
  ::google::api::expr::v1alpha1::_CheckedExpr_default_instance_._instance.get_mutable()->expr_ = const_cast< ::google::api::expr::v1alpha1::Expr*>(
      ::google::api::expr::v1alpha1::Expr::internal_default_instance());
}
class CheckedExpr::_Internal {
 public:
  static const ::google::api::expr::v1alpha1::SourceInfo& source_info(const CheckedExpr* msg);
  static const ::google::api::expr::v1alpha1::Expr& expr(const CheckedExpr* msg);
};

const ::google::api::expr::v1alpha1::SourceInfo&
CheckedExpr::_Internal::source_info(const CheckedExpr* msg) {
  return *msg->source_info_;
}
const ::google::api::expr::v1alpha1::Expr&
CheckedExpr::_Internal::expr(const CheckedExpr* msg) {
  return *msg->expr_;
}
void CheckedExpr::unsafe_arena_set_allocated_source_info(
    ::google::api::expr::v1alpha1::SourceInfo* source_info) {
  if (GetArenaNoVirtual() == nullptr) {
    delete source_info_;
  }
  source_info_ = source_info;
  if (source_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.CheckedExpr.source_info)
}
void CheckedExpr::clear_source_info() {
  if (GetArenaNoVirtual() == nullptr && source_info_ != nullptr) {
    delete source_info_;
  }
  source_info_ = nullptr;
}
void CheckedExpr::unsafe_arena_set_allocated_expr(
    ::google::api::expr::v1alpha1::Expr* expr) {
  if (GetArenaNoVirtual() == nullptr) {
    delete expr_;
  }
  expr_ = expr;
  if (expr) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.CheckedExpr.expr)
}
void CheckedExpr::clear_expr() {
  if (GetArenaNoVirtual() == nullptr && expr_ != nullptr) {
    delete expr_;
  }
  expr_ = nullptr;
}
CheckedExpr::CheckedExpr()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.expr.v1alpha1.CheckedExpr)
}
CheckedExpr::CheckedExpr(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  reference_map_(arena),
  type_map_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.CheckedExpr)
}
CheckedExpr::CheckedExpr(const CheckedExpr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reference_map_.MergeFrom(from.reference_map_);
  type_map_.MergeFrom(from.type_map_);
  if (from._internal_has_expr()) {
    expr_ = new ::google::api::expr::v1alpha1::Expr(*from.expr_);
  } else {
    expr_ = nullptr;
  }
  if (from._internal_has_source_info()) {
    source_info_ = new ::google::api::expr::v1alpha1::SourceInfo(*from.source_info_);
  } else {
    source_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.CheckedExpr)
}

void CheckedExpr::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CheckedExpr_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto.base);
  ::memset(&expr_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_info_) -
      reinterpret_cast<char*>(&expr_)) + sizeof(source_info_));
}

CheckedExpr::~CheckedExpr() {
  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.CheckedExpr)
  SharedDtor();
}

void CheckedExpr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete expr_;
  if (this != internal_default_instance()) delete source_info_;
}

void CheckedExpr::ArenaDtor(void* object) {
  CheckedExpr* _this = reinterpret_cast< CheckedExpr* >(object);
  (void)_this;
}
void CheckedExpr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CheckedExpr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CheckedExpr& CheckedExpr::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CheckedExpr_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto.base);
  return *internal_default_instance();
}


void CheckedExpr::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.CheckedExpr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reference_map_.Clear();
  type_map_.Clear();
  if (GetArenaNoVirtual() == nullptr && expr_ != nullptr) {
    delete expr_;
  }
  expr_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && source_info_ != nullptr) {
    delete source_info_;
  }
  source_info_ = nullptr;
  _internal_metadata_.Clear();
}

const char* CheckedExpr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<int64, .google.api.expr.v1alpha1.Reference> reference_map = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&reference_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // map<int64, .google.api.expr.v1alpha1.Type> type_map = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&type_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.api.expr.v1alpha1.Expr expr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_expr(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.api.expr.v1alpha1.SourceInfo source_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CheckedExpr::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.CheckedExpr)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<int64, .google.api.expr.v1alpha1.Reference> reference_map = 2;
  if (!this->_internal_reference_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::google::api::expr::v1alpha1::Reference >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_reference_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_reference_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::google::api::expr::v1alpha1::Reference >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::google::api::expr::v1alpha1::Reference >::const_iterator
          it = this->_internal_reference_map().begin();
          it != this->_internal_reference_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = CheckedExpr_ReferenceMapEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::google::api::expr::v1alpha1::Reference >::const_iterator
          it = this->_internal_reference_map().begin();
          it != this->_internal_reference_map().end(); ++it) {
        target = CheckedExpr_ReferenceMapEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  // map<int64, .google.api.expr.v1alpha1.Type> type_map = 3;
  if (!this->_internal_type_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::google::api::expr::v1alpha1::Type >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< ::PROTOBUF_NAMESPACE_ID::int64, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_type_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_type_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::google::api::expr::v1alpha1::Type >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::google::api::expr::v1alpha1::Type >::const_iterator
          it = this->_internal_type_map().begin();
          it != this->_internal_type_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = CheckedExpr_TypeMapEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::google::api::expr::v1alpha1::Type >::const_iterator
          it = this->_internal_type_map().begin();
          it != this->_internal_type_map().end(); ++it) {
        target = CheckedExpr_TypeMapEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
      }
    }
  }

  // .google.api.expr.v1alpha1.Expr expr = 4;
  if (this->has_expr()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::expr(this), target, stream);
  }

  // .google.api.expr.v1alpha1.SourceInfo source_info = 5;
  if (this->has_source_info()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::source_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.CheckedExpr)
  return target;
}

size_t CheckedExpr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.CheckedExpr)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int64, .google.api.expr.v1alpha1.Reference> reference_map = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_reference_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::google::api::expr::v1alpha1::Reference >::const_iterator
      it = this->_internal_reference_map().begin();
      it != this->_internal_reference_map().end(); ++it) {
    total_size += CheckedExpr_ReferenceMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int64, .google.api.expr.v1alpha1.Type> type_map = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_type_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int64, ::google::api::expr::v1alpha1::Type >::const_iterator
      it = this->_internal_type_map().begin();
      it != this->_internal_type_map().end(); ++it) {
    total_size += CheckedExpr_TypeMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .google.api.expr.v1alpha1.Expr expr = 4;
  if (this->has_expr()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expr_);
  }

  // .google.api.expr.v1alpha1.SourceInfo source_info = 5;
  if (this->has_source_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CheckedExpr::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.expr.v1alpha1.CheckedExpr)
  GOOGLE_DCHECK_NE(&from, this);
  const CheckedExpr* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CheckedExpr>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.expr.v1alpha1.CheckedExpr)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.expr.v1alpha1.CheckedExpr)
    MergeFrom(*source);
  }
}

void CheckedExpr::MergeFrom(const CheckedExpr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.CheckedExpr)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reference_map_.MergeFrom(from.reference_map_);
  type_map_.MergeFrom(from.type_map_);
  if (from.has_expr()) {
    _internal_mutable_expr()->::google::api::expr::v1alpha1::Expr::MergeFrom(from._internal_expr());
  }
  if (from.has_source_info()) {
    _internal_mutable_source_info()->::google::api::expr::v1alpha1::SourceInfo::MergeFrom(from._internal_source_info());
  }
}

void CheckedExpr::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.expr.v1alpha1.CheckedExpr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckedExpr::CopyFrom(const CheckedExpr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.CheckedExpr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckedExpr::IsInitialized() const {
  return true;
}

void CheckedExpr::InternalSwap(CheckedExpr* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reference_map_.Swap(&other->reference_map_);
  type_map_.Swap(&other->type_map_);
  swap(expr_, other->expr_);
  swap(source_info_, other->source_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CheckedExpr::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Type_ListType::InitAsDefaultInstance() {
  ::google::api::expr::v1alpha1::_Type_ListType_default_instance_._instance.get_mutable()->elem_type_ = const_cast< ::google::api::expr::v1alpha1::Type*>(
      ::google::api::expr::v1alpha1::Type::internal_default_instance());
}
class Type_ListType::_Internal {
 public:
  static const ::google::api::expr::v1alpha1::Type& elem_type(const Type_ListType* msg);
};

const ::google::api::expr::v1alpha1::Type&
Type_ListType::_Internal::elem_type(const Type_ListType* msg) {
  return *msg->elem_type_;
}
void Type_ListType::unsafe_arena_set_allocated_elem_type(
    ::google::api::expr::v1alpha1::Type* elem_type) {
  if (GetArenaNoVirtual() == nullptr) {
    delete elem_type_;
  }
  elem_type_ = elem_type;
  if (elem_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Type.ListType.elem_type)
}
Type_ListType::Type_ListType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.expr.v1alpha1.Type.ListType)
}
Type_ListType::Type_ListType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Type.ListType)
}
Type_ListType::Type_ListType(const Type_ListType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_elem_type()) {
    elem_type_ = new ::google::api::expr::v1alpha1::Type(*from.elem_type_);
  } else {
    elem_type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Type.ListType)
}

void Type_ListType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Type_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto.base);
  elem_type_ = nullptr;
}

Type_ListType::~Type_ListType() {
  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Type.ListType)
  SharedDtor();
}

void Type_ListType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete elem_type_;
}

void Type_ListType::ArenaDtor(void* object) {
  Type_ListType* _this = reinterpret_cast< Type_ListType* >(object);
  (void)_this;
}
void Type_ListType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_ListType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Type_ListType& Type_ListType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Type_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto.base);
  return *internal_default_instance();
}


void Type_ListType::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Type.ListType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && elem_type_ != nullptr) {
    delete elem_type_;
  }
  elem_type_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Type_ListType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.api.expr.v1alpha1.Type elem_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_elem_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_ListType::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Type.ListType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.api.expr.v1alpha1.Type elem_type = 1;
  if (this->has_elem_type()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::elem_type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Type.ListType)
  return target;
}

size_t Type_ListType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Type.ListType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.api.expr.v1alpha1.Type elem_type = 1;
  if (this->has_elem_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *elem_type_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_ListType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.expr.v1alpha1.Type.ListType)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_ListType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_ListType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.expr.v1alpha1.Type.ListType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.expr.v1alpha1.Type.ListType)
    MergeFrom(*source);
  }
}

void Type_ListType::MergeFrom(const Type_ListType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Type.ListType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_elem_type()) {
    _internal_mutable_elem_type()->::google::api::expr::v1alpha1::Type::MergeFrom(from._internal_elem_type());
  }
}

void Type_ListType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.expr.v1alpha1.Type.ListType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_ListType::CopyFrom(const Type_ListType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Type.ListType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_ListType::IsInitialized() const {
  return true;
}

void Type_ListType::InternalSwap(Type_ListType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(elem_type_, other->elem_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_ListType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Type_MapType::InitAsDefaultInstance() {
  ::google::api::expr::v1alpha1::_Type_MapType_default_instance_._instance.get_mutable()->key_type_ = const_cast< ::google::api::expr::v1alpha1::Type*>(
      ::google::api::expr::v1alpha1::Type::internal_default_instance());
  ::google::api::expr::v1alpha1::_Type_MapType_default_instance_._instance.get_mutable()->value_type_ = const_cast< ::google::api::expr::v1alpha1::Type*>(
      ::google::api::expr::v1alpha1::Type::internal_default_instance());
}
class Type_MapType::_Internal {
 public:
  static const ::google::api::expr::v1alpha1::Type& key_type(const Type_MapType* msg);
  static const ::google::api::expr::v1alpha1::Type& value_type(const Type_MapType* msg);
};

const ::google::api::expr::v1alpha1::Type&
Type_MapType::_Internal::key_type(const Type_MapType* msg) {
  return *msg->key_type_;
}
const ::google::api::expr::v1alpha1::Type&
Type_MapType::_Internal::value_type(const Type_MapType* msg) {
  return *msg->value_type_;
}
void Type_MapType::unsafe_arena_set_allocated_key_type(
    ::google::api::expr::v1alpha1::Type* key_type) {
  if (GetArenaNoVirtual() == nullptr) {
    delete key_type_;
  }
  key_type_ = key_type;
  if (key_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Type.MapType.key_type)
}
void Type_MapType::unsafe_arena_set_allocated_value_type(
    ::google::api::expr::v1alpha1::Type* value_type) {
  if (GetArenaNoVirtual() == nullptr) {
    delete value_type_;
  }
  value_type_ = value_type;
  if (value_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Type.MapType.value_type)
}
Type_MapType::Type_MapType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.expr.v1alpha1.Type.MapType)
}
Type_MapType::Type_MapType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Type.MapType)
}
Type_MapType::Type_MapType(const Type_MapType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_key_type()) {
    key_type_ = new ::google::api::expr::v1alpha1::Type(*from.key_type_);
  } else {
    key_type_ = nullptr;
  }
  if (from._internal_has_value_type()) {
    value_type_ = new ::google::api::expr::v1alpha1::Type(*from.value_type_);
  } else {
    value_type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Type.MapType)
}

void Type_MapType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Type_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto.base);
  ::memset(&key_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_type_) -
      reinterpret_cast<char*>(&key_type_)) + sizeof(value_type_));
}

Type_MapType::~Type_MapType() {
  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Type.MapType)
  SharedDtor();
}

void Type_MapType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete key_type_;
  if (this != internal_default_instance()) delete value_type_;
}

void Type_MapType::ArenaDtor(void* object) {
  Type_MapType* _this = reinterpret_cast< Type_MapType* >(object);
  (void)_this;
}
void Type_MapType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_MapType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Type_MapType& Type_MapType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Type_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto.base);
  return *internal_default_instance();
}


void Type_MapType::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Type.MapType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && key_type_ != nullptr) {
    delete key_type_;
  }
  key_type_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && value_type_ != nullptr) {
    delete value_type_;
  }
  value_type_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Type_MapType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.api.expr.v1alpha1.Type key_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.api.expr.v1alpha1.Type value_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_MapType::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Type.MapType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.api.expr.v1alpha1.Type key_type = 1;
  if (this->has_key_type()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::key_type(this), target, stream);
  }

  // .google.api.expr.v1alpha1.Type value_type = 2;
  if (this->has_value_type()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::value_type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Type.MapType)
  return target;
}

size_t Type_MapType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Type.MapType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.api.expr.v1alpha1.Type key_type = 1;
  if (this->has_key_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *key_type_);
  }

  // .google.api.expr.v1alpha1.Type value_type = 2;
  if (this->has_value_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_type_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_MapType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.expr.v1alpha1.Type.MapType)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_MapType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_MapType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.expr.v1alpha1.Type.MapType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.expr.v1alpha1.Type.MapType)
    MergeFrom(*source);
  }
}

void Type_MapType::MergeFrom(const Type_MapType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Type.MapType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_key_type()) {
    _internal_mutable_key_type()->::google::api::expr::v1alpha1::Type::MergeFrom(from._internal_key_type());
  }
  if (from.has_value_type()) {
    _internal_mutable_value_type()->::google::api::expr::v1alpha1::Type::MergeFrom(from._internal_value_type());
  }
}

void Type_MapType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.expr.v1alpha1.Type.MapType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_MapType::CopyFrom(const Type_MapType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Type.MapType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_MapType::IsInitialized() const {
  return true;
}

void Type_MapType::InternalSwap(Type_MapType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(key_type_, other->key_type_);
  swap(value_type_, other->value_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_MapType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Type_FunctionType::InitAsDefaultInstance() {
  ::google::api::expr::v1alpha1::_Type_FunctionType_default_instance_._instance.get_mutable()->result_type_ = const_cast< ::google::api::expr::v1alpha1::Type*>(
      ::google::api::expr::v1alpha1::Type::internal_default_instance());
}
class Type_FunctionType::_Internal {
 public:
  static const ::google::api::expr::v1alpha1::Type& result_type(const Type_FunctionType* msg);
};

const ::google::api::expr::v1alpha1::Type&
Type_FunctionType::_Internal::result_type(const Type_FunctionType* msg) {
  return *msg->result_type_;
}
void Type_FunctionType::unsafe_arena_set_allocated_result_type(
    ::google::api::expr::v1alpha1::Type* result_type) {
  if (GetArenaNoVirtual() == nullptr) {
    delete result_type_;
  }
  result_type_ = result_type;
  if (result_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Type.FunctionType.result_type)
}
Type_FunctionType::Type_FunctionType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.expr.v1alpha1.Type.FunctionType)
}
Type_FunctionType::Type_FunctionType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  arg_types_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Type.FunctionType)
}
Type_FunctionType::Type_FunctionType(const Type_FunctionType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      arg_types_(from.arg_types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_result_type()) {
    result_type_ = new ::google::api::expr::v1alpha1::Type(*from.result_type_);
  } else {
    result_type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Type.FunctionType)
}

void Type_FunctionType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Type_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto.base);
  result_type_ = nullptr;
}

Type_FunctionType::~Type_FunctionType() {
  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Type.FunctionType)
  SharedDtor();
}

void Type_FunctionType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (this != internal_default_instance()) delete result_type_;
}

void Type_FunctionType::ArenaDtor(void* object) {
  Type_FunctionType* _this = reinterpret_cast< Type_FunctionType* >(object);
  (void)_this;
}
void Type_FunctionType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_FunctionType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Type_FunctionType& Type_FunctionType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Type_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto.base);
  return *internal_default_instance();
}


void Type_FunctionType::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Type.FunctionType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arg_types_.Clear();
  if (GetArenaNoVirtual() == nullptr && result_type_ != nullptr) {
    delete result_type_;
  }
  result_type_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Type_FunctionType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.api.expr.v1alpha1.Type result_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .google.api.expr.v1alpha1.Type arg_types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arg_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_FunctionType::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Type.FunctionType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.api.expr.v1alpha1.Type result_type = 1;
  if (this->has_result_type()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::result_type(this), target, stream);
  }

  // repeated .google.api.expr.v1alpha1.Type arg_types = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_arg_types_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_arg_types(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Type.FunctionType)
  return target;
}

size_t Type_FunctionType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Type.FunctionType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.api.expr.v1alpha1.Type arg_types = 2;
  total_size += 1UL * this->_internal_arg_types_size();
  for (const auto& msg : this->arg_types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .google.api.expr.v1alpha1.Type result_type = 1;
  if (this->has_result_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_type_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_FunctionType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.expr.v1alpha1.Type.FunctionType)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_FunctionType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_FunctionType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.expr.v1alpha1.Type.FunctionType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.expr.v1alpha1.Type.FunctionType)
    MergeFrom(*source);
  }
}

void Type_FunctionType::MergeFrom(const Type_FunctionType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Type.FunctionType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arg_types_.MergeFrom(from.arg_types_);
  if (from.has_result_type()) {
    _internal_mutable_result_type()->::google::api::expr::v1alpha1::Type::MergeFrom(from._internal_result_type());
  }
}

void Type_FunctionType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.expr.v1alpha1.Type.FunctionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_FunctionType::CopyFrom(const Type_FunctionType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Type.FunctionType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_FunctionType::IsInitialized() const {
  return true;
}

void Type_FunctionType::InternalSwap(Type_FunctionType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  arg_types_.InternalSwap(&other->arg_types_);
  swap(result_type_, other->result_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_FunctionType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Type_AbstractType::InitAsDefaultInstance() {
}
class Type_AbstractType::_Internal {
 public:
};

Type_AbstractType::Type_AbstractType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.expr.v1alpha1.Type.AbstractType)
}
Type_AbstractType::Type_AbstractType(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  parameter_types_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Type.AbstractType)
}
Type_AbstractType::Type_AbstractType(const Type_AbstractType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      parameter_types_(from.parameter_types_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Type.AbstractType)
}

void Type_AbstractType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Type_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Type_AbstractType::~Type_AbstractType() {
  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Type.AbstractType)
  SharedDtor();
}

void Type_AbstractType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Type_AbstractType::ArenaDtor(void* object) {
  Type_AbstractType* _this = reinterpret_cast< Type_AbstractType* >(object);
  (void)_this;
}
void Type_AbstractType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type_AbstractType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Type_AbstractType& Type_AbstractType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Type_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto.base);
  return *internal_default_instance();
}


void Type_AbstractType::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Type.AbstractType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parameter_types_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

const char* Type_AbstractType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "google.api.expr.v1alpha1.Type.AbstractType.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .google.api.expr.v1alpha1.Type parameter_types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parameter_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type_AbstractType::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Type.AbstractType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.expr.v1alpha1.Type.AbstractType.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .google.api.expr.v1alpha1.Type parameter_types = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parameter_types_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_parameter_types(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Type.AbstractType)
  return target;
}

size_t Type_AbstractType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Type.AbstractType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.api.expr.v1alpha1.Type parameter_types = 2;
  total_size += 1UL * this->_internal_parameter_types_size();
  for (const auto& msg : this->parameter_types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type_AbstractType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.expr.v1alpha1.Type.AbstractType)
  GOOGLE_DCHECK_NE(&from, this);
  const Type_AbstractType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type_AbstractType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.expr.v1alpha1.Type.AbstractType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.expr.v1alpha1.Type.AbstractType)
    MergeFrom(*source);
  }
}

void Type_AbstractType::MergeFrom(const Type_AbstractType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Type.AbstractType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parameter_types_.MergeFrom(from.parameter_types_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void Type_AbstractType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.expr.v1alpha1.Type.AbstractType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type_AbstractType::CopyFrom(const Type_AbstractType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Type.AbstractType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type_AbstractType::IsInitialized() const {
  return true;
}

void Type_AbstractType::InternalSwap(Type_AbstractType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  parameter_types_.InternalSwap(&other->parameter_types_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata Type_AbstractType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Type::InitAsDefaultInstance() {
  ::google::api::expr::v1alpha1::_Type_default_instance_.dyn_ = const_cast< PROTOBUF_NAMESPACE_ID::Empty*>(
      PROTOBUF_NAMESPACE_ID::Empty::internal_default_instance());
  ::google::api::expr::v1alpha1::_Type_default_instance_.null_ = 0;
  ::google::api::expr::v1alpha1::_Type_default_instance_.primitive_ = 0;
  ::google::api::expr::v1alpha1::_Type_default_instance_.wrapper_ = 0;
  ::google::api::expr::v1alpha1::_Type_default_instance_.well_known_ = 0;
  ::google::api::expr::v1alpha1::_Type_default_instance_.list_type_ = const_cast< ::google::api::expr::v1alpha1::Type_ListType*>(
      ::google::api::expr::v1alpha1::Type_ListType::internal_default_instance());
  ::google::api::expr::v1alpha1::_Type_default_instance_.map_type_ = const_cast< ::google::api::expr::v1alpha1::Type_MapType*>(
      ::google::api::expr::v1alpha1::Type_MapType::internal_default_instance());
  ::google::api::expr::v1alpha1::_Type_default_instance_.function_ = const_cast< ::google::api::expr::v1alpha1::Type_FunctionType*>(
      ::google::api::expr::v1alpha1::Type_FunctionType::internal_default_instance());
  ::google::api::expr::v1alpha1::_Type_default_instance_.message_type_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::google::api::expr::v1alpha1::_Type_default_instance_.type_param_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::google::api::expr::v1alpha1::_Type_default_instance_.type_ = const_cast< ::google::api::expr::v1alpha1::Type*>(
      ::google::api::expr::v1alpha1::Type::internal_default_instance());
  ::google::api::expr::v1alpha1::_Type_default_instance_.error_ = const_cast< PROTOBUF_NAMESPACE_ID::Empty*>(
      PROTOBUF_NAMESPACE_ID::Empty::internal_default_instance());
  ::google::api::expr::v1alpha1::_Type_default_instance_.abstract_type_ = const_cast< ::google::api::expr::v1alpha1::Type_AbstractType*>(
      ::google::api::expr::v1alpha1::Type_AbstractType::internal_default_instance());
}
class Type::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Empty& dyn(const Type* msg);
  static const ::google::api::expr::v1alpha1::Type_ListType& list_type(const Type* msg);
  static const ::google::api::expr::v1alpha1::Type_MapType& map_type(const Type* msg);
  static const ::google::api::expr::v1alpha1::Type_FunctionType& function(const Type* msg);
  static const ::google::api::expr::v1alpha1::Type& type(const Type* msg);
  static const PROTOBUF_NAMESPACE_ID::Empty& error(const Type* msg);
  static const ::google::api::expr::v1alpha1::Type_AbstractType& abstract_type(const Type* msg);
};

const PROTOBUF_NAMESPACE_ID::Empty&
Type::_Internal::dyn(const Type* msg) {
  return *msg->type_kind_.dyn_;
}
const ::google::api::expr::v1alpha1::Type_ListType&
Type::_Internal::list_type(const Type* msg) {
  return *msg->type_kind_.list_type_;
}
const ::google::api::expr::v1alpha1::Type_MapType&
Type::_Internal::map_type(const Type* msg) {
  return *msg->type_kind_.map_type_;
}
const ::google::api::expr::v1alpha1::Type_FunctionType&
Type::_Internal::function(const Type* msg) {
  return *msg->type_kind_.function_;
}
const ::google::api::expr::v1alpha1::Type&
Type::_Internal::type(const Type* msg) {
  return *msg->type_kind_.type_;
}
const PROTOBUF_NAMESPACE_ID::Empty&
Type::_Internal::error(const Type* msg) {
  return *msg->type_kind_.error_;
}
const ::google::api::expr::v1alpha1::Type_AbstractType&
Type::_Internal::abstract_type(const Type* msg) {
  return *msg->type_kind_.abstract_type_;
}
void Type::set_allocated_dyn(PROTOBUF_NAMESPACE_ID::Empty* dyn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type_kind();
  if (dyn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dyn)->GetArena();
    if (message_arena != submessage_arena) {
      dyn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dyn, submessage_arena);
    }
    set_has_dyn();
    type_kind_.dyn_ = dyn;
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.dyn)
}
void Type::clear_dyn() {
  if (_internal_has_dyn()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete type_kind_.dyn_;
    }
    clear_has_type_kind();
  }
}
void Type::set_allocated_list_type(::google::api::expr::v1alpha1::Type_ListType* list_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type_kind();
  if (list_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(list_type);
    if (message_arena != submessage_arena) {
      list_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_type, submessage_arena);
    }
    set_has_list_type();
    type_kind_.list_type_ = list_type;
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.list_type)
}
void Type::set_allocated_map_type(::google::api::expr::v1alpha1::Type_MapType* map_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type_kind();
  if (map_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(map_type);
    if (message_arena != submessage_arena) {
      map_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, map_type, submessage_arena);
    }
    set_has_map_type();
    type_kind_.map_type_ = map_type;
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.map_type)
}
void Type::set_allocated_function(::google::api::expr::v1alpha1::Type_FunctionType* function) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type_kind();
  if (function) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(function);
    if (message_arena != submessage_arena) {
      function = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, function, submessage_arena);
    }
    set_has_function();
    type_kind_.function_ = function;
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.function)
}
void Type::set_allocated_type(::google::api::expr::v1alpha1::Type* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type_kind();
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(type);
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    set_has_type();
    type_kind_.type_ = type;
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.type)
}
void Type::set_allocated_error(PROTOBUF_NAMESPACE_ID::Empty* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type_kind();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(error)->GetArena();
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    type_kind_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.error)
}
void Type::clear_error() {
  if (_internal_has_error()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete type_kind_.error_;
    }
    clear_has_type_kind();
  }
}
void Type::set_allocated_abstract_type(::google::api::expr::v1alpha1::Type_AbstractType* abstract_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type_kind();
  if (abstract_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(abstract_type);
    if (message_arena != submessage_arena) {
      abstract_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, abstract_type, submessage_arena);
    }
    set_has_abstract_type();
    type_kind_.abstract_type_ = abstract_type;
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Type.abstract_type)
}
Type::Type()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.expr.v1alpha1.Type)
}
Type::Type(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Type)
}
Type::Type(const Type& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_type_kind();
  switch (from.type_kind_case()) {
    case kDyn: {
      _internal_mutable_dyn()->PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(from._internal_dyn());
      break;
    }
    case kNull: {
      _internal_set_null(from._internal_null());
      break;
    }
    case kPrimitive: {
      _internal_set_primitive(from._internal_primitive());
      break;
    }
    case kWrapper: {
      _internal_set_wrapper(from._internal_wrapper());
      break;
    }
    case kWellKnown: {
      _internal_set_well_known(from._internal_well_known());
      break;
    }
    case kListType: {
      _internal_mutable_list_type()->::google::api::expr::v1alpha1::Type_ListType::MergeFrom(from._internal_list_type());
      break;
    }
    case kMapType: {
      _internal_mutable_map_type()->::google::api::expr::v1alpha1::Type_MapType::MergeFrom(from._internal_map_type());
      break;
    }
    case kFunction: {
      _internal_mutable_function()->::google::api::expr::v1alpha1::Type_FunctionType::MergeFrom(from._internal_function());
      break;
    }
    case kMessageType: {
      _internal_set_message_type(from._internal_message_type());
      break;
    }
    case kTypeParam: {
      _internal_set_type_param(from._internal_type_param());
      break;
    }
    case kType: {
      _internal_mutable_type()->::google::api::expr::v1alpha1::Type::MergeFrom(from._internal_type());
      break;
    }
    case kError: {
      _internal_mutable_error()->PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(from._internal_error());
      break;
    }
    case kAbstractType: {
      _internal_mutable_abstract_type()->::google::api::expr::v1alpha1::Type_AbstractType::MergeFrom(from._internal_abstract_type());
      break;
    }
    case TYPE_KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Type)
}

void Type::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Type_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto.base);
  clear_has_type_kind();
}

Type::~Type() {
  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Type)
  SharedDtor();
}

void Type::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  if (has_type_kind()) {
    clear_type_kind();
  }
}

void Type::ArenaDtor(void* object) {
  Type* _this = reinterpret_cast< Type* >(object);
  (void)_this;
}
void Type::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Type::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Type& Type::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Type_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto.base);
  return *internal_default_instance();
}


void Type::clear_type_kind() {
// @@protoc_insertion_point(one_of_clear_start:google.api.expr.v1alpha1.Type)
  switch (type_kind_case()) {
    case kDyn: {
      if (GetArenaNoVirtual() == nullptr) {
        delete type_kind_.dyn_;
      }
      break;
    }
    case kNull: {
      // No need to clear
      break;
    }
    case kPrimitive: {
      // No need to clear
      break;
    }
    case kWrapper: {
      // No need to clear
      break;
    }
    case kWellKnown: {
      // No need to clear
      break;
    }
    case kListType: {
      if (GetArenaNoVirtual() == nullptr) {
        delete type_kind_.list_type_;
      }
      break;
    }
    case kMapType: {
      if (GetArenaNoVirtual() == nullptr) {
        delete type_kind_.map_type_;
      }
      break;
    }
    case kFunction: {
      if (GetArenaNoVirtual() == nullptr) {
        delete type_kind_.function_;
      }
      break;
    }
    case kMessageType: {
      type_kind_.message_type_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case kTypeParam: {
      type_kind_.type_param_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case kType: {
      if (GetArenaNoVirtual() == nullptr) {
        delete type_kind_.type_;
      }
      break;
    }
    case kError: {
      if (GetArenaNoVirtual() == nullptr) {
        delete type_kind_.error_;
      }
      break;
    }
    case kAbstractType: {
      if (GetArenaNoVirtual() == nullptr) {
        delete type_kind_.abstract_type_;
      }
      break;
    }
    case TYPE_KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_KIND_NOT_SET;
}


void Type::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Type)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type_kind();
  _internal_metadata_.Clear();
}

const char* Type::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Empty dyn = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dyn(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.NullValue null = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_null(static_cast<PROTOBUF_NAMESPACE_ID::NullValue>(val));
        } else goto handle_unusual;
        continue;
      // .google.api.expr.v1alpha1.Type.PrimitiveType primitive = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_primitive(static_cast<::google::api::expr::v1alpha1::Type_PrimitiveType>(val));
        } else goto handle_unusual;
        continue;
      // .google.api.expr.v1alpha1.Type.PrimitiveType wrapper = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_wrapper(static_cast<::google::api::expr::v1alpha1::Type_PrimitiveType>(val));
        } else goto handle_unusual;
        continue;
      // .google.api.expr.v1alpha1.Type.WellKnownType well_known = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_well_known(static_cast<::google::api::expr::v1alpha1::Type_WellKnownType>(val));
        } else goto handle_unusual;
        continue;
      // .google.api.expr.v1alpha1.Type.ListType list_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.api.expr.v1alpha1.Type.MapType map_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_map_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.api.expr.v1alpha1.Type.FunctionType function = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_function(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_message_type(), ptr, ctx, "google.api.expr.v1alpha1.Type.message_type");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string type_param = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_type_param(), ptr, ctx, "google.api.expr.v1alpha1.Type.type_param");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.api.expr.v1alpha1.Type type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Empty error = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.api.expr.v1alpha1.Type.AbstractType abstract_type = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_abstract_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Type::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Type)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Empty dyn = 1;
  if (_internal_has_dyn()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::dyn(this), target, stream);
  }

  // .google.protobuf.NullValue null = 2;
  if (_internal_has_null()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_null(), target);
  }

  // .google.api.expr.v1alpha1.Type.PrimitiveType primitive = 3;
  if (_internal_has_primitive()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_primitive(), target);
  }

  // .google.api.expr.v1alpha1.Type.PrimitiveType wrapper = 4;
  if (_internal_has_wrapper()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_wrapper(), target);
  }

  // .google.api.expr.v1alpha1.Type.WellKnownType well_known = 5;
  if (_internal_has_well_known()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_well_known(), target);
  }

  // .google.api.expr.v1alpha1.Type.ListType list_type = 6;
  if (_internal_has_list_type()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::list_type(this), target, stream);
  }

  // .google.api.expr.v1alpha1.Type.MapType map_type = 7;
  if (_internal_has_map_type()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::map_type(this), target, stream);
  }

  // .google.api.expr.v1alpha1.Type.FunctionType function = 8;
  if (_internal_has_function()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::function(this), target, stream);
  }

  // string message_type = 9;
  if (_internal_has_message_type()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_type().data(), static_cast<int>(this->_internal_message_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.expr.v1alpha1.Type.message_type");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_message_type(), target);
  }

  // string type_param = 10;
  if (_internal_has_type_param()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type_param().data(), static_cast<int>(this->_internal_type_param().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.expr.v1alpha1.Type.type_param");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_type_param(), target);
  }

  // .google.api.expr.v1alpha1.Type type = 11;
  if (_internal_has_type()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::type(this), target, stream);
  }

  // .google.protobuf.Empty error = 12;
  if (_internal_has_error()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::error(this), target, stream);
  }

  // .google.api.expr.v1alpha1.Type.AbstractType abstract_type = 14;
  if (_internal_has_abstract_type()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, _Internal::abstract_type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Type)
  return target;
}

size_t Type::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Type)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_kind_case()) {
    // .google.protobuf.Empty dyn = 1;
    case kDyn: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_kind_.dyn_);
      break;
    }
    // .google.protobuf.NullValue null = 2;
    case kNull: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_null());
      break;
    }
    // .google.api.expr.v1alpha1.Type.PrimitiveType primitive = 3;
    case kPrimitive: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_primitive());
      break;
    }
    // .google.api.expr.v1alpha1.Type.PrimitiveType wrapper = 4;
    case kWrapper: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_wrapper());
      break;
    }
    // .google.api.expr.v1alpha1.Type.WellKnownType well_known = 5;
    case kWellKnown: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_well_known());
      break;
    }
    // .google.api.expr.v1alpha1.Type.ListType list_type = 6;
    case kListType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_kind_.list_type_);
      break;
    }
    // .google.api.expr.v1alpha1.Type.MapType map_type = 7;
    case kMapType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_kind_.map_type_);
      break;
    }
    // .google.api.expr.v1alpha1.Type.FunctionType function = 8;
    case kFunction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_kind_.function_);
      break;
    }
    // string message_type = 9;
    case kMessageType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_message_type());
      break;
    }
    // string type_param = 10;
    case kTypeParam: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_type_param());
      break;
    }
    // .google.api.expr.v1alpha1.Type type = 11;
    case kType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_kind_.type_);
      break;
    }
    // .google.protobuf.Empty error = 12;
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_kind_.error_);
      break;
    }
    // .google.api.expr.v1alpha1.Type.AbstractType abstract_type = 14;
    case kAbstractType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_kind_.abstract_type_);
      break;
    }
    case TYPE_KIND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Type::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.expr.v1alpha1.Type)
  GOOGLE_DCHECK_NE(&from, this);
  const Type* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Type>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.expr.v1alpha1.Type)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.expr.v1alpha1.Type)
    MergeFrom(*source);
  }
}

void Type::MergeFrom(const Type& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Type)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_kind_case()) {
    case kDyn: {
      _internal_mutable_dyn()->PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(from._internal_dyn());
      break;
    }
    case kNull: {
      _internal_set_null(from._internal_null());
      break;
    }
    case kPrimitive: {
      _internal_set_primitive(from._internal_primitive());
      break;
    }
    case kWrapper: {
      _internal_set_wrapper(from._internal_wrapper());
      break;
    }
    case kWellKnown: {
      _internal_set_well_known(from._internal_well_known());
      break;
    }
    case kListType: {
      _internal_mutable_list_type()->::google::api::expr::v1alpha1::Type_ListType::MergeFrom(from._internal_list_type());
      break;
    }
    case kMapType: {
      _internal_mutable_map_type()->::google::api::expr::v1alpha1::Type_MapType::MergeFrom(from._internal_map_type());
      break;
    }
    case kFunction: {
      _internal_mutable_function()->::google::api::expr::v1alpha1::Type_FunctionType::MergeFrom(from._internal_function());
      break;
    }
    case kMessageType: {
      _internal_set_message_type(from._internal_message_type());
      break;
    }
    case kTypeParam: {
      _internal_set_type_param(from._internal_type_param());
      break;
    }
    case kType: {
      _internal_mutable_type()->::google::api::expr::v1alpha1::Type::MergeFrom(from._internal_type());
      break;
    }
    case kError: {
      _internal_mutable_error()->PROTOBUF_NAMESPACE_ID::Empty::MergeFrom(from._internal_error());
      break;
    }
    case kAbstractType: {
      _internal_mutable_abstract_type()->::google::api::expr::v1alpha1::Type_AbstractType::MergeFrom(from._internal_abstract_type());
      break;
    }
    case TYPE_KIND_NOT_SET: {
      break;
    }
  }
}

void Type::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.expr.v1alpha1.Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Type::CopyFrom(const Type& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Type::IsInitialized() const {
  return true;
}

void Type::InternalSwap(Type* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_kind_, other->type_kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Type::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Decl_IdentDecl::InitAsDefaultInstance() {
  ::google::api::expr::v1alpha1::_Decl_IdentDecl_default_instance_._instance.get_mutable()->type_ = const_cast< ::google::api::expr::v1alpha1::Type*>(
      ::google::api::expr::v1alpha1::Type::internal_default_instance());
  ::google::api::expr::v1alpha1::_Decl_IdentDecl_default_instance_._instance.get_mutable()->value_ = const_cast< ::google::api::expr::v1alpha1::Constant*>(
      ::google::api::expr::v1alpha1::Constant::internal_default_instance());
}
class Decl_IdentDecl::_Internal {
 public:
  static const ::google::api::expr::v1alpha1::Type& type(const Decl_IdentDecl* msg);
  static const ::google::api::expr::v1alpha1::Constant& value(const Decl_IdentDecl* msg);
};

const ::google::api::expr::v1alpha1::Type&
Decl_IdentDecl::_Internal::type(const Decl_IdentDecl* msg) {
  return *msg->type_;
}
const ::google::api::expr::v1alpha1::Constant&
Decl_IdentDecl::_Internal::value(const Decl_IdentDecl* msg) {
  return *msg->value_;
}
void Decl_IdentDecl::unsafe_arena_set_allocated_type(
    ::google::api::expr::v1alpha1::Type* type) {
  if (GetArenaNoVirtual() == nullptr) {
    delete type_;
  }
  type_ = type;
  if (type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Decl.IdentDecl.type)
}
void Decl_IdentDecl::unsafe_arena_set_allocated_value(
    ::google::api::expr::v1alpha1::Constant* value) {
  if (GetArenaNoVirtual() == nullptr) {
    delete value_;
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Decl.IdentDecl.value)
}
void Decl_IdentDecl::clear_value() {
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
Decl_IdentDecl::Decl_IdentDecl()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.expr.v1alpha1.Decl.IdentDecl)
}
Decl_IdentDecl::Decl_IdentDecl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Decl.IdentDecl)
}
Decl_IdentDecl::Decl_IdentDecl(const Decl_IdentDecl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  doc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_doc().empty()) {
    doc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_doc(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_type()) {
    type_ = new ::google::api::expr::v1alpha1::Type(*from.type_);
  } else {
    type_ = nullptr;
  }
  if (from._internal_has_value()) {
    value_ = new ::google::api::expr::v1alpha1::Constant(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Decl.IdentDecl)
}

void Decl_IdentDecl::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Decl_IdentDecl_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto.base);
  doc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&type_)) + sizeof(value_));
}

Decl_IdentDecl::~Decl_IdentDecl() {
  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Decl.IdentDecl)
  SharedDtor();
}

void Decl_IdentDecl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  doc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete type_;
  if (this != internal_default_instance()) delete value_;
}

void Decl_IdentDecl::ArenaDtor(void* object) {
  Decl_IdentDecl* _this = reinterpret_cast< Decl_IdentDecl* >(object);
  (void)_this;
}
void Decl_IdentDecl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Decl_IdentDecl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Decl_IdentDecl& Decl_IdentDecl::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Decl_IdentDecl_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto.base);
  return *internal_default_instance();
}


void Decl_IdentDecl::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Decl.IdentDecl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  doc_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Decl_IdentDecl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.api.expr.v1alpha1.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.api.expr.v1alpha1.Constant value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string doc = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_doc(), ptr, ctx, "google.api.expr.v1alpha1.Decl.IdentDecl.doc");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Decl_IdentDecl::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Decl.IdentDecl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.api.expr.v1alpha1.Type type = 1;
  if (this->has_type()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::type(this), target, stream);
  }

  // .google.api.expr.v1alpha1.Constant value = 2;
  if (this->has_value()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::value(this), target, stream);
  }

  // string doc = 3;
  if (this->doc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_doc().data(), static_cast<int>(this->_internal_doc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.expr.v1alpha1.Decl.IdentDecl.doc");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_doc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Decl.IdentDecl)
  return target;
}

size_t Decl_IdentDecl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Decl.IdentDecl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string doc = 3;
  if (this->doc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_doc());
  }

  // .google.api.expr.v1alpha1.Type type = 1;
  if (this->has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_);
  }

  // .google.api.expr.v1alpha1.Constant value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Decl_IdentDecl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.expr.v1alpha1.Decl.IdentDecl)
  GOOGLE_DCHECK_NE(&from, this);
  const Decl_IdentDecl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Decl_IdentDecl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.expr.v1alpha1.Decl.IdentDecl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.expr.v1alpha1.Decl.IdentDecl)
    MergeFrom(*source);
  }
}

void Decl_IdentDecl::MergeFrom(const Decl_IdentDecl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Decl.IdentDecl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.doc().size() > 0) {
    _internal_set_doc(from._internal_doc());
  }
  if (from.has_type()) {
    _internal_mutable_type()->::google::api::expr::v1alpha1::Type::MergeFrom(from._internal_type());
  }
  if (from.has_value()) {
    _internal_mutable_value()->::google::api::expr::v1alpha1::Constant::MergeFrom(from._internal_value());
  }
}

void Decl_IdentDecl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.expr.v1alpha1.Decl.IdentDecl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Decl_IdentDecl::CopyFrom(const Decl_IdentDecl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Decl.IdentDecl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Decl_IdentDecl::IsInitialized() const {
  return true;
}

void Decl_IdentDecl::InternalSwap(Decl_IdentDecl* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  doc_.Swap(&other->doc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Decl_IdentDecl::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Decl_FunctionDecl_Overload::InitAsDefaultInstance() {
  ::google::api::expr::v1alpha1::_Decl_FunctionDecl_Overload_default_instance_._instance.get_mutable()->result_type_ = const_cast< ::google::api::expr::v1alpha1::Type*>(
      ::google::api::expr::v1alpha1::Type::internal_default_instance());
}
class Decl_FunctionDecl_Overload::_Internal {
 public:
  static const ::google::api::expr::v1alpha1::Type& result_type(const Decl_FunctionDecl_Overload* msg);
};

const ::google::api::expr::v1alpha1::Type&
Decl_FunctionDecl_Overload::_Internal::result_type(const Decl_FunctionDecl_Overload* msg) {
  return *msg->result_type_;
}
void Decl_FunctionDecl_Overload::unsafe_arena_set_allocated_result_type(
    ::google::api::expr::v1alpha1::Type* result_type) {
  if (GetArenaNoVirtual() == nullptr) {
    delete result_type_;
  }
  result_type_ = result_type;
  if (result_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.result_type)
}
Decl_FunctionDecl_Overload::Decl_FunctionDecl_Overload()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload)
}
Decl_FunctionDecl_Overload::Decl_FunctionDecl_Overload(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  params_(arena),
  type_params_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload)
}
Decl_FunctionDecl_Overload::Decl_FunctionDecl_Overload(const Decl_FunctionDecl_Overload& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      params_(from.params_),
      type_params_(from.type_params_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  overload_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_overload_id().empty()) {
    overload_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_overload_id(),
      GetArenaNoVirtual());
  }
  doc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_doc().empty()) {
    doc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_doc(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_result_type()) {
    result_type_ = new ::google::api::expr::v1alpha1::Type(*from.result_type_);
  } else {
    result_type_ = nullptr;
  }
  is_instance_function_ = from.is_instance_function_;
  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload)
}

void Decl_FunctionDecl_Overload::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Decl_FunctionDecl_Overload_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto.base);
  overload_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&result_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_instance_function_) -
      reinterpret_cast<char*>(&result_type_)) + sizeof(is_instance_function_));
}

Decl_FunctionDecl_Overload::~Decl_FunctionDecl_Overload() {
  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload)
  SharedDtor();
}

void Decl_FunctionDecl_Overload::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  overload_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  doc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete result_type_;
}

void Decl_FunctionDecl_Overload::ArenaDtor(void* object) {
  Decl_FunctionDecl_Overload* _this = reinterpret_cast< Decl_FunctionDecl_Overload* >(object);
  (void)_this;
}
void Decl_FunctionDecl_Overload::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Decl_FunctionDecl_Overload::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Decl_FunctionDecl_Overload& Decl_FunctionDecl_Overload::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Decl_FunctionDecl_Overload_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto.base);
  return *internal_default_instance();
}


void Decl_FunctionDecl_Overload::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  params_.Clear();
  type_params_.Clear();
  overload_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  doc_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && result_type_ != nullptr) {
    delete result_type_;
  }
  result_type_ = nullptr;
  is_instance_function_ = false;
  _internal_metadata_.Clear();
}

const char* Decl_FunctionDecl_Overload::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string overload_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_overload_id(), ptr, ctx, "google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.overload_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .google.api.expr.v1alpha1.Type params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string type_params = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_type_params(), ptr, ctx, "google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.api.expr.v1alpha1.Type result_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_result_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_instance_function = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_instance_function_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string doc = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_doc(), ptr, ctx, "google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.doc");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Decl_FunctionDecl_Overload::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string overload_id = 1;
  if (this->overload_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_overload_id().data(), static_cast<int>(this->_internal_overload_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.overload_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_overload_id(), target);
  }

  // repeated .google.api.expr.v1alpha1.Type params = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_params_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_params(i), target, stream);
  }

  // repeated string type_params = 3;
  for (int i = 0, n = this->_internal_type_params_size(); i < n; i++) {
    const auto& s = this->_internal_type_params(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.type_params");
    target = stream->WriteString(3, s, target);
  }

  // .google.api.expr.v1alpha1.Type result_type = 4;
  if (this->has_result_type()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::result_type(this), target, stream);
  }

  // bool is_instance_function = 5;
  if (this->is_instance_function() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_instance_function(), target);
  }

  // string doc = 6;
  if (this->doc().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_doc().data(), static_cast<int>(this->_internal_doc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.expr.v1alpha1.Decl.FunctionDecl.Overload.doc");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_doc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload)
  return target;
}

size_t Decl_FunctionDecl_Overload::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.api.expr.v1alpha1.Type params = 2;
  total_size += 1UL * this->_internal_params_size();
  for (const auto& msg : this->params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string type_params = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(type_params_.size());
  for (int i = 0, n = type_params_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      type_params_.Get(i));
  }

  // string overload_id = 1;
  if (this->overload_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_overload_id());
  }

  // string doc = 6;
  if (this->doc().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_doc());
  }

  // .google.api.expr.v1alpha1.Type result_type = 4;
  if (this->has_result_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_type_);
  }

  // bool is_instance_function = 5;
  if (this->is_instance_function() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Decl_FunctionDecl_Overload::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload)
  GOOGLE_DCHECK_NE(&from, this);
  const Decl_FunctionDecl_Overload* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Decl_FunctionDecl_Overload>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload)
    MergeFrom(*source);
  }
}

void Decl_FunctionDecl_Overload::MergeFrom(const Decl_FunctionDecl_Overload& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  params_.MergeFrom(from.params_);
  type_params_.MergeFrom(from.type_params_);
  if (from.overload_id().size() > 0) {
    _internal_set_overload_id(from._internal_overload_id());
  }
  if (from.doc().size() > 0) {
    _internal_set_doc(from._internal_doc());
  }
  if (from.has_result_type()) {
    _internal_mutable_result_type()->::google::api::expr::v1alpha1::Type::MergeFrom(from._internal_result_type());
  }
  if (from.is_instance_function() != 0) {
    _internal_set_is_instance_function(from._internal_is_instance_function());
  }
}

void Decl_FunctionDecl_Overload::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Decl_FunctionDecl_Overload::CopyFrom(const Decl_FunctionDecl_Overload& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Decl.FunctionDecl.Overload)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Decl_FunctionDecl_Overload::IsInitialized() const {
  return true;
}

void Decl_FunctionDecl_Overload::InternalSwap(Decl_FunctionDecl_Overload* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  params_.InternalSwap(&other->params_);
  type_params_.InternalSwap(&other->type_params_);
  overload_id_.Swap(&other->overload_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  doc_.Swap(&other->doc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_type_, other->result_type_);
  swap(is_instance_function_, other->is_instance_function_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Decl_FunctionDecl_Overload::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Decl_FunctionDecl::InitAsDefaultInstance() {
}
class Decl_FunctionDecl::_Internal {
 public:
};

Decl_FunctionDecl::Decl_FunctionDecl()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.expr.v1alpha1.Decl.FunctionDecl)
}
Decl_FunctionDecl::Decl_FunctionDecl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  overloads_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Decl.FunctionDecl)
}
Decl_FunctionDecl::Decl_FunctionDecl(const Decl_FunctionDecl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      overloads_(from.overloads_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Decl.FunctionDecl)
}

void Decl_FunctionDecl::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Decl_FunctionDecl_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto.base);
}

Decl_FunctionDecl::~Decl_FunctionDecl() {
  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Decl.FunctionDecl)
  SharedDtor();
}

void Decl_FunctionDecl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void Decl_FunctionDecl::ArenaDtor(void* object) {
  Decl_FunctionDecl* _this = reinterpret_cast< Decl_FunctionDecl* >(object);
  (void)_this;
}
void Decl_FunctionDecl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Decl_FunctionDecl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Decl_FunctionDecl& Decl_FunctionDecl::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Decl_FunctionDecl_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto.base);
  return *internal_default_instance();
}


void Decl_FunctionDecl::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Decl.FunctionDecl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  overloads_.Clear();
  _internal_metadata_.Clear();
}

const char* Decl_FunctionDecl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_overloads(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Decl_FunctionDecl::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Decl.FunctionDecl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_overloads_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_overloads(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Decl.FunctionDecl)
  return target;
}

size_t Decl_FunctionDecl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Decl.FunctionDecl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.api.expr.v1alpha1.Decl.FunctionDecl.Overload overloads = 1;
  total_size += 1UL * this->_internal_overloads_size();
  for (const auto& msg : this->overloads_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Decl_FunctionDecl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.expr.v1alpha1.Decl.FunctionDecl)
  GOOGLE_DCHECK_NE(&from, this);
  const Decl_FunctionDecl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Decl_FunctionDecl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.expr.v1alpha1.Decl.FunctionDecl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.expr.v1alpha1.Decl.FunctionDecl)
    MergeFrom(*source);
  }
}

void Decl_FunctionDecl::MergeFrom(const Decl_FunctionDecl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Decl.FunctionDecl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  overloads_.MergeFrom(from.overloads_);
}

void Decl_FunctionDecl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.expr.v1alpha1.Decl.FunctionDecl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Decl_FunctionDecl::CopyFrom(const Decl_FunctionDecl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Decl.FunctionDecl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Decl_FunctionDecl::IsInitialized() const {
  return true;
}

void Decl_FunctionDecl::InternalSwap(Decl_FunctionDecl* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  overloads_.InternalSwap(&other->overloads_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Decl_FunctionDecl::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Decl::InitAsDefaultInstance() {
  ::google::api::expr::v1alpha1::_Decl_default_instance_.ident_ = const_cast< ::google::api::expr::v1alpha1::Decl_IdentDecl*>(
      ::google::api::expr::v1alpha1::Decl_IdentDecl::internal_default_instance());
  ::google::api::expr::v1alpha1::_Decl_default_instance_.function_ = const_cast< ::google::api::expr::v1alpha1::Decl_FunctionDecl*>(
      ::google::api::expr::v1alpha1::Decl_FunctionDecl::internal_default_instance());
}
class Decl::_Internal {
 public:
  static const ::google::api::expr::v1alpha1::Decl_IdentDecl& ident(const Decl* msg);
  static const ::google::api::expr::v1alpha1::Decl_FunctionDecl& function(const Decl* msg);
};

const ::google::api::expr::v1alpha1::Decl_IdentDecl&
Decl::_Internal::ident(const Decl* msg) {
  return *msg->decl_kind_.ident_;
}
const ::google::api::expr::v1alpha1::Decl_FunctionDecl&
Decl::_Internal::function(const Decl* msg) {
  return *msg->decl_kind_.function_;
}
void Decl::set_allocated_ident(::google::api::expr::v1alpha1::Decl_IdentDecl* ident) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_decl_kind();
  if (ident) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ident);
    if (message_arena != submessage_arena) {
      ident = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ident, submessage_arena);
    }
    set_has_ident();
    decl_kind_.ident_ = ident;
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Decl.ident)
}
void Decl::set_allocated_function(::google::api::expr::v1alpha1::Decl_FunctionDecl* function) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_decl_kind();
  if (function) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(function);
    if (message_arena != submessage_arena) {
      function = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, function, submessage_arena);
    }
    set_has_function();
    decl_kind_.function_ = function;
  }
  // @@protoc_insertion_point(field_set_allocated:google.api.expr.v1alpha1.Decl.function)
}
Decl::Decl()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.expr.v1alpha1.Decl)
}
Decl::Decl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Decl)
}
Decl::Decl(const Decl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArenaNoVirtual());
  }
  clear_has_decl_kind();
  switch (from.decl_kind_case()) {
    case kIdent: {
      _internal_mutable_ident()->::google::api::expr::v1alpha1::Decl_IdentDecl::MergeFrom(from._internal_ident());
      break;
    }
    case kFunction: {
      _internal_mutable_function()->::google::api::expr::v1alpha1::Decl_FunctionDecl::MergeFrom(from._internal_function());
      break;
    }
    case DECL_KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Decl)
}

void Decl::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Decl_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_decl_kind();
}

Decl::~Decl() {
  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Decl)
  SharedDtor();
}

void Decl::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_decl_kind()) {
    clear_decl_kind();
  }
}

void Decl::ArenaDtor(void* object) {
  Decl* _this = reinterpret_cast< Decl* >(object);
  (void)_this;
}
void Decl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Decl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Decl& Decl::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Decl_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto.base);
  return *internal_default_instance();
}


void Decl::clear_decl_kind() {
// @@protoc_insertion_point(one_of_clear_start:google.api.expr.v1alpha1.Decl)
  switch (decl_kind_case()) {
    case kIdent: {
      if (GetArenaNoVirtual() == nullptr) {
        delete decl_kind_.ident_;
      }
      break;
    }
    case kFunction: {
      if (GetArenaNoVirtual() == nullptr) {
        delete decl_kind_.function_;
      }
      break;
    }
    case DECL_KIND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DECL_KIND_NOT_SET;
}


void Decl::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Decl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  clear_decl_kind();
  _internal_metadata_.Clear();
}

const char* Decl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "google.api.expr.v1alpha1.Decl.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.api.expr.v1alpha1.Decl.IdentDecl ident = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ident(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.api.expr.v1alpha1.Decl.FunctionDecl function = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_function(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Decl::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Decl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.expr.v1alpha1.Decl.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .google.api.expr.v1alpha1.Decl.IdentDecl ident = 2;
  if (_internal_has_ident()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::ident(this), target, stream);
  }

  // .google.api.expr.v1alpha1.Decl.FunctionDecl function = 3;
  if (_internal_has_function()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::function(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Decl)
  return target;
}

size_t Decl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Decl)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  switch (decl_kind_case()) {
    // .google.api.expr.v1alpha1.Decl.IdentDecl ident = 2;
    case kIdent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *decl_kind_.ident_);
      break;
    }
    // .google.api.expr.v1alpha1.Decl.FunctionDecl function = 3;
    case kFunction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *decl_kind_.function_);
      break;
    }
    case DECL_KIND_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Decl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.expr.v1alpha1.Decl)
  GOOGLE_DCHECK_NE(&from, this);
  const Decl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Decl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.expr.v1alpha1.Decl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.expr.v1alpha1.Decl)
    MergeFrom(*source);
  }
}

void Decl::MergeFrom(const Decl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Decl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  switch (from.decl_kind_case()) {
    case kIdent: {
      _internal_mutable_ident()->::google::api::expr::v1alpha1::Decl_IdentDecl::MergeFrom(from._internal_ident());
      break;
    }
    case kFunction: {
      _internal_mutable_function()->::google::api::expr::v1alpha1::Decl_FunctionDecl::MergeFrom(from._internal_function());
      break;
    }
    case DECL_KIND_NOT_SET: {
      break;
    }
  }
}

void Decl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.expr.v1alpha1.Decl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Decl::CopyFrom(const Decl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Decl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Decl::IsInitialized() const {
  return true;
}

void Decl::InternalSwap(Decl* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(decl_kind_, other->decl_kind_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Decl::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Reference::InitAsDefaultInstance() {
  ::google::api::expr::v1alpha1::_Reference_default_instance_._instance.get_mutable()->value_ = const_cast< ::google::api::expr::v1alpha1::Constant*>(
      ::google::api::expr::v1alpha1::Constant::internal_default_instance());
}
class Reference::_Internal {
 public:
  static const ::google::api::expr::v1alpha1::Constant& value(const Reference* msg);
};

const ::google::api::expr::v1alpha1::Constant&
Reference::_Internal::value(const Reference* msg) {
  return *msg->value_;
}
void Reference::unsafe_arena_set_allocated_value(
    ::google::api::expr::v1alpha1::Constant* value) {
  if (GetArenaNoVirtual() == nullptr) {
    delete value_;
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.api.expr.v1alpha1.Reference.value)
}
void Reference::clear_value() {
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
Reference::Reference()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.api.expr.v1alpha1.Reference)
}
Reference::Reference(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  overload_id_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.api.expr.v1alpha1.Reference)
}
Reference::Reference(const Reference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      overload_id_(from.overload_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_value()) {
    value_ = new ::google::api::expr::v1alpha1::Constant(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.api.expr.v1alpha1.Reference)
}

void Reference::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Reference_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_ = nullptr;
}

Reference::~Reference() {
  // @@protoc_insertion_point(destructor:google.api.expr.v1alpha1.Reference)
  SharedDtor();
}

void Reference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete value_;
}

void Reference::ArenaDtor(void* object) {
  Reference* _this = reinterpret_cast< Reference* >(object);
  (void)_this;
}
void Reference::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Reference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Reference& Reference::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Reference_google_2fapi_2fexpr_2fv1alpha1_2fchecked_2eproto.base);
  return *internal_default_instance();
}


void Reference::Clear() {
// @@protoc_insertion_point(message_clear_start:google.api.expr.v1alpha1.Reference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  overload_id_.Clear();
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear();
}

const char* Reference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "google.api.expr.v1alpha1.Reference.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string overload_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_add_overload_id(), ptr, ctx, "google.api.expr.v1alpha1.Reference.overload_id");
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.api.expr.v1alpha1.Constant value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Reference::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.api.expr.v1alpha1.Reference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.expr.v1alpha1.Reference.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated string overload_id = 3;
  for (int i = 0, n = this->_internal_overload_id_size(); i < n; i++) {
    const auto& s = this->_internal_overload_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.api.expr.v1alpha1.Reference.overload_id");
    target = stream->WriteString(3, s, target);
  }

  // .google.api.expr.v1alpha1.Constant value = 4;
  if (this->has_value()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.api.expr.v1alpha1.Reference)
  return target;
}

size_t Reference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.api.expr.v1alpha1.Reference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string overload_id = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(overload_id_.size());
  for (int i = 0, n = overload_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      overload_id_.Get(i));
  }

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.api.expr.v1alpha1.Constant value = 4;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Reference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.api.expr.v1alpha1.Reference)
  GOOGLE_DCHECK_NE(&from, this);
  const Reference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Reference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.api.expr.v1alpha1.Reference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.api.expr.v1alpha1.Reference)
    MergeFrom(*source);
  }
}

void Reference::MergeFrom(const Reference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.api.expr.v1alpha1.Reference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  overload_id_.MergeFrom(from.overload_id_);
  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_value()) {
    _internal_mutable_value()->::google::api::expr::v1alpha1::Constant::MergeFrom(from._internal_value());
  }
}

void Reference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.api.expr.v1alpha1.Reference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Reference::CopyFrom(const Reference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.api.expr.v1alpha1.Reference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Reference::IsInitialized() const {
  return true;
}

void Reference::InternalSwap(Reference* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  overload_id_.InternalSwap(&other->overload_id_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Reference::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace expr
}  // namespace api
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::google::api::expr::v1alpha1::CheckedExpr_ReferenceMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::google::api::expr::v1alpha1::CheckedExpr_ReferenceMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::expr::v1alpha1::CheckedExpr_ReferenceMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::expr::v1alpha1::CheckedExpr_TypeMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::google::api::expr::v1alpha1::CheckedExpr_TypeMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::expr::v1alpha1::CheckedExpr_TypeMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::expr::v1alpha1::CheckedExpr* Arena::CreateMaybeMessage< ::google::api::expr::v1alpha1::CheckedExpr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::expr::v1alpha1::CheckedExpr >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::expr::v1alpha1::Type_ListType* Arena::CreateMaybeMessage< ::google::api::expr::v1alpha1::Type_ListType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::expr::v1alpha1::Type_ListType >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::expr::v1alpha1::Type_MapType* Arena::CreateMaybeMessage< ::google::api::expr::v1alpha1::Type_MapType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::expr::v1alpha1::Type_MapType >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::expr::v1alpha1::Type_FunctionType* Arena::CreateMaybeMessage< ::google::api::expr::v1alpha1::Type_FunctionType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::expr::v1alpha1::Type_FunctionType >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::expr::v1alpha1::Type_AbstractType* Arena::CreateMaybeMessage< ::google::api::expr::v1alpha1::Type_AbstractType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::expr::v1alpha1::Type_AbstractType >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::expr::v1alpha1::Type* Arena::CreateMaybeMessage< ::google::api::expr::v1alpha1::Type >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::expr::v1alpha1::Type >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::expr::v1alpha1::Decl_IdentDecl* Arena::CreateMaybeMessage< ::google::api::expr::v1alpha1::Decl_IdentDecl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::expr::v1alpha1::Decl_IdentDecl >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload* Arena::CreateMaybeMessage< ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::expr::v1alpha1::Decl_FunctionDecl_Overload >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::expr::v1alpha1::Decl_FunctionDecl* Arena::CreateMaybeMessage< ::google::api::expr::v1alpha1::Decl_FunctionDecl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::expr::v1alpha1::Decl_FunctionDecl >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::expr::v1alpha1::Decl* Arena::CreateMaybeMessage< ::google::api::expr::v1alpha1::Decl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::expr::v1alpha1::Decl >(arena);
}
template<> PROTOBUF_NOINLINE ::google::api::expr::v1alpha1::Reference* Arena::CreateMaybeMessage< ::google::api::expr::v1alpha1::Reference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::api::expr::v1alpha1::Reference >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
