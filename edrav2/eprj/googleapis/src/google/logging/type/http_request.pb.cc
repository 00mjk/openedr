// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/logging/type/http_request.proto

#include "google/logging/type/http_request.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
namespace google {
namespace logging {
namespace type {
class HttpRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HttpRequest> _instance;
} _HttpRequest_default_instance_;
}  // namespace type
}  // namespace logging
}  // namespace google
static void InitDefaultsscc_info_HttpRequest_google_2flogging_2ftype_2fhttp_5frequest_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::logging::type::_HttpRequest_default_instance_;
    new (ptr) ::google::logging::type::HttpRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::logging::type::HttpRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HttpRequest_google_2flogging_2ftype_2fhttp_5frequest_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_HttpRequest_google_2flogging_2ftype_2fhttp_5frequest_2eproto}, {
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_google_2flogging_2ftype_2fhttp_5frequest_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_google_2flogging_2ftype_2fhttp_5frequest_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_google_2flogging_2ftype_2fhttp_5frequest_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_google_2flogging_2ftype_2fhttp_5frequest_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::logging::type::HttpRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::logging::type::HttpRequest, request_method_),
  PROTOBUF_FIELD_OFFSET(::google::logging::type::HttpRequest, request_url_),
  PROTOBUF_FIELD_OFFSET(::google::logging::type::HttpRequest, request_size_),
  PROTOBUF_FIELD_OFFSET(::google::logging::type::HttpRequest, status_),
  PROTOBUF_FIELD_OFFSET(::google::logging::type::HttpRequest, response_size_),
  PROTOBUF_FIELD_OFFSET(::google::logging::type::HttpRequest, user_agent_),
  PROTOBUF_FIELD_OFFSET(::google::logging::type::HttpRequest, remote_ip_),
  PROTOBUF_FIELD_OFFSET(::google::logging::type::HttpRequest, server_ip_),
  PROTOBUF_FIELD_OFFSET(::google::logging::type::HttpRequest, referer_),
  PROTOBUF_FIELD_OFFSET(::google::logging::type::HttpRequest, latency_),
  PROTOBUF_FIELD_OFFSET(::google::logging::type::HttpRequest, cache_lookup_),
  PROTOBUF_FIELD_OFFSET(::google::logging::type::HttpRequest, cache_hit_),
  PROTOBUF_FIELD_OFFSET(::google::logging::type::HttpRequest, cache_validated_with_origin_server_),
  PROTOBUF_FIELD_OFFSET(::google::logging::type::HttpRequest, cache_fill_bytes_),
  PROTOBUF_FIELD_OFFSET(::google::logging::type::HttpRequest, protocol_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::logging::type::HttpRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::logging::type::_HttpRequest_default_instance_),
};

const char descriptor_table_protodef_google_2flogging_2ftype_2fhttp_5frequest_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&google/logging/type/http_request.proto"
  "\022\023google.logging.type\032\036google/protobuf/d"
  "uration.proto\032\034google/api/annotations.pr"
  "oto\"\357\002\n\013HttpRequest\022\026\n\016request_method\030\001 "
  "\001(\t\022\023\n\013request_url\030\002 \001(\t\022\024\n\014request_size"
  "\030\003 \001(\003\022\016\n\006status\030\004 \001(\005\022\025\n\rresponse_size\030"
  "\005 \001(\003\022\022\n\nuser_agent\030\006 \001(\t\022\021\n\tremote_ip\030\007"
  " \001(\t\022\021\n\tserver_ip\030\r \001(\t\022\017\n\007referer\030\010 \001(\t"
  "\022*\n\007latency\030\016 \001(\0132\031.google.protobuf.Dura"
  "tion\022\024\n\014cache_lookup\030\013 \001(\010\022\021\n\tcache_hit\030"
  "\t \001(\010\022*\n\"cache_validated_with_origin_ser"
  "ver\030\n \001(\010\022\030\n\020cache_fill_bytes\030\014 \001(\003\022\020\n\010p"
  "rotocol\030\017 \001(\tB\237\001\n\027com.google.logging.typ"
  "eB\020HttpRequestProtoP\001Z8google.golang.org"
  "/genproto/googleapis/logging/type;ltype\252"
  "\002\031Google.Cloud.Logging.Type\312\002\031Google\\Clo"
  "ud\\Logging\\Typeb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_google_2flogging_2ftype_2fhttp_5frequest_2eproto_deps[2] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_google_2flogging_2ftype_2fhttp_5frequest_2eproto_sccs[1] = {
  &scc_info_HttpRequest_google_2flogging_2ftype_2fhttp_5frequest_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_google_2flogging_2ftype_2fhttp_5frequest_2eproto_once;
static bool descriptor_table_google_2flogging_2ftype_2fhttp_5frequest_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2flogging_2ftype_2fhttp_5frequest_2eproto = {
  &descriptor_table_google_2flogging_2ftype_2fhttp_5frequest_2eproto_initialized, descriptor_table_protodef_google_2flogging_2ftype_2fhttp_5frequest_2eproto, "google/logging/type/http_request.proto", 663,
  &descriptor_table_google_2flogging_2ftype_2fhttp_5frequest_2eproto_once, descriptor_table_google_2flogging_2ftype_2fhttp_5frequest_2eproto_sccs, descriptor_table_google_2flogging_2ftype_2fhttp_5frequest_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_google_2flogging_2ftype_2fhttp_5frequest_2eproto::offsets,
  file_level_metadata_google_2flogging_2ftype_2fhttp_5frequest_2eproto, 1, file_level_enum_descriptors_google_2flogging_2ftype_2fhttp_5frequest_2eproto, file_level_service_descriptors_google_2flogging_2ftype_2fhttp_5frequest_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_google_2flogging_2ftype_2fhttp_5frequest_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_google_2flogging_2ftype_2fhttp_5frequest_2eproto), true);
namespace google {
namespace logging {
namespace type {

// ===================================================================

void HttpRequest::InitAsDefaultInstance() {
  ::google::logging::type::_HttpRequest_default_instance_._instance.get_mutable()->latency_ = const_cast< PROTOBUF_NAMESPACE_ID::Duration*>(
      PROTOBUF_NAMESPACE_ID::Duration::internal_default_instance());
}
class HttpRequest::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Duration& latency(const HttpRequest* msg);
};

const PROTOBUF_NAMESPACE_ID::Duration&
HttpRequest::_Internal::latency(const HttpRequest* msg) {
  return *msg->latency_;
}
void HttpRequest::clear_latency() {
  if (GetArenaNoVirtual() == nullptr && latency_ != nullptr) {
    delete latency_;
  }
  latency_ = nullptr;
}
HttpRequest::HttpRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.logging.type.HttpRequest)
}
HttpRequest::HttpRequest(const HttpRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  request_method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_method().empty()) {
    request_method_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_method_);
  }
  request_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_request_url().empty()) {
    request_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_url_);
  }
  user_agent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_agent().empty()) {
    user_agent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_agent_);
  }
  remote_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remote_ip().empty()) {
    remote_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_ip_);
  }
  referer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_referer().empty()) {
    referer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.referer_);
  }
  server_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_server_ip().empty()) {
    server_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_ip_);
  }
  protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_protocol().empty()) {
    protocol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.protocol_);
  }
  if (from._internal_has_latency()) {
    latency_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.latency_);
  } else {
    latency_ = nullptr;
  }
  ::memcpy(&request_size_, &from.request_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&cache_fill_bytes_) -
    reinterpret_cast<char*>(&request_size_)) + sizeof(cache_fill_bytes_));
  // @@protoc_insertion_point(copy_constructor:google.logging.type.HttpRequest)
}

void HttpRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HttpRequest_google_2flogging_2ftype_2fhttp_5frequest_2eproto.base);
  request_method_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_agent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  referer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  protocol_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&latency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cache_fill_bytes_) -
      reinterpret_cast<char*>(&latency_)) + sizeof(cache_fill_bytes_));
}

HttpRequest::~HttpRequest() {
  // @@protoc_insertion_point(destructor:google.logging.type.HttpRequest)
  SharedDtor();
}

void HttpRequest::SharedDtor() {
  request_method_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_agent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  referer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  protocol_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete latency_;
}

void HttpRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HttpRequest& HttpRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HttpRequest_google_2flogging_2ftype_2fhttp_5frequest_2eproto.base);
  return *internal_default_instance();
}


void HttpRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.logging.type.HttpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  request_method_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  request_url_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_agent_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  remote_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  referer_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  server_ip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  protocol_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && latency_ != nullptr) {
    delete latency_;
  }
  latency_ = nullptr;
  ::memset(&request_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cache_fill_bytes_) -
      reinterpret_cast<char*>(&request_size_)) + sizeof(cache_fill_bytes_));
  _internal_metadata_.Clear();
}

const char* HttpRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string request_method = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_request_method(), ptr, ctx, "google.logging.type.HttpRequest.request_method");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string request_url = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_request_url(), ptr, ctx, "google.logging.type.HttpRequest.request_url");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 request_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          request_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 response_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          response_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_agent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_user_agent(), ptr, ctx, "google.logging.type.HttpRequest.user_agent");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string remote_ip = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_remote_ip(), ptr, ctx, "google.logging.type.HttpRequest.remote_ip");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string referer = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_referer(), ptr, ctx, "google.logging.type.HttpRequest.referer");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool cache_hit = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          cache_hit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool cache_validated_with_origin_server = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          cache_validated_with_origin_server_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool cache_lookup = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          cache_lookup_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 cache_fill_bytes = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          cache_fill_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string server_ip = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_server_ip(), ptr, ctx, "google.logging.type.HttpRequest.server_ip");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration latency = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_latency(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string protocol = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_protocol(), ptr, ctx, "google.logging.type.HttpRequest.protocol");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HttpRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.logging.type.HttpRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string request_method = 1;
  if (this->request_method().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_method().data(), static_cast<int>(this->_internal_request_method().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.logging.type.HttpRequest.request_method");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_request_method(), target);
  }

  // string request_url = 2;
  if (this->request_url().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_request_url().data(), static_cast<int>(this->_internal_request_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.logging.type.HttpRequest.request_url");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_request_url(), target);
  }

  // int64 request_size = 3;
  if (this->request_size() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_request_size(), target);
  }

  // int32 status = 4;
  if (this->status() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_status(), target);
  }

  // int64 response_size = 5;
  if (this->response_size() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(5, this->_internal_response_size(), target);
  }

  // string user_agent = 6;
  if (this->user_agent().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_agent().data(), static_cast<int>(this->_internal_user_agent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.logging.type.HttpRequest.user_agent");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_user_agent(), target);
  }

  // string remote_ip = 7;
  if (this->remote_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remote_ip().data(), static_cast<int>(this->_internal_remote_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.logging.type.HttpRequest.remote_ip");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_remote_ip(), target);
  }

  // string referer = 8;
  if (this->referer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_referer().data(), static_cast<int>(this->_internal_referer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.logging.type.HttpRequest.referer");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_referer(), target);
  }

  // bool cache_hit = 9;
  if (this->cache_hit() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_cache_hit(), target);
  }

  // bool cache_validated_with_origin_server = 10;
  if (this->cache_validated_with_origin_server() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(10, this->_internal_cache_validated_with_origin_server(), target);
  }

  // bool cache_lookup = 11;
  if (this->cache_lookup() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_cache_lookup(), target);
  }

  // int64 cache_fill_bytes = 12;
  if (this->cache_fill_bytes() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(12, this->_internal_cache_fill_bytes(), target);
  }

  // string server_ip = 13;
  if (this->server_ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server_ip().data(), static_cast<int>(this->_internal_server_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.logging.type.HttpRequest.server_ip");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_server_ip(), target);
  }

  // .google.protobuf.Duration latency = 14;
  if (this->has_latency()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, _Internal::latency(this), target, stream);
  }

  // string protocol = 15;
  if (this->protocol().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol().data(), static_cast<int>(this->_internal_protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.logging.type.HttpRequest.protocol");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_protocol(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.logging.type.HttpRequest)
  return target;
}

size_t HttpRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.logging.type.HttpRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string request_method = 1;
  if (this->request_method().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_method());
  }

  // string request_url = 2;
  if (this->request_url().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_request_url());
  }

  // string user_agent = 6;
  if (this->user_agent().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_agent());
  }

  // string remote_ip = 7;
  if (this->remote_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remote_ip());
  }

  // string referer = 8;
  if (this->referer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_referer());
  }

  // string server_ip = 13;
  if (this->server_ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_ip());
  }

  // string protocol = 15;
  if (this->protocol().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol());
  }

  // .google.protobuf.Duration latency = 14;
  if (this->has_latency()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *latency_);
  }

  // int64 request_size = 3;
  if (this->request_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_request_size());
  }

  // int64 response_size = 5;
  if (this->response_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_response_size());
  }

  // int32 status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // bool cache_lookup = 11;
  if (this->cache_lookup() != 0) {
    total_size += 1 + 1;
  }

  // bool cache_hit = 9;
  if (this->cache_hit() != 0) {
    total_size += 1 + 1;
  }

  // bool cache_validated_with_origin_server = 10;
  if (this->cache_validated_with_origin_server() != 0) {
    total_size += 1 + 1;
  }

  // int64 cache_fill_bytes = 12;
  if (this->cache_fill_bytes() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cache_fill_bytes());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HttpRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.logging.type.HttpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const HttpRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HttpRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.logging.type.HttpRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.logging.type.HttpRequest)
    MergeFrom(*source);
  }
}

void HttpRequest::MergeFrom(const HttpRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.logging.type.HttpRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.request_method().size() > 0) {

    request_method_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_method_);
  }
  if (from.request_url().size() > 0) {

    request_url_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.request_url_);
  }
  if (from.user_agent().size() > 0) {

    user_agent_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.user_agent_);
  }
  if (from.remote_ip().size() > 0) {

    remote_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remote_ip_);
  }
  if (from.referer().size() > 0) {

    referer_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.referer_);
  }
  if (from.server_ip().size() > 0) {

    server_ip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.server_ip_);
  }
  if (from.protocol().size() > 0) {

    protocol_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.protocol_);
  }
  if (from.has_latency()) {
    _internal_mutable_latency()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_latency());
  }
  if (from.request_size() != 0) {
    _internal_set_request_size(from._internal_request_size());
  }
  if (from.response_size() != 0) {
    _internal_set_response_size(from._internal_response_size());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.cache_lookup() != 0) {
    _internal_set_cache_lookup(from._internal_cache_lookup());
  }
  if (from.cache_hit() != 0) {
    _internal_set_cache_hit(from._internal_cache_hit());
  }
  if (from.cache_validated_with_origin_server() != 0) {
    _internal_set_cache_validated_with_origin_server(from._internal_cache_validated_with_origin_server());
  }
  if (from.cache_fill_bytes() != 0) {
    _internal_set_cache_fill_bytes(from._internal_cache_fill_bytes());
  }
}

void HttpRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.logging.type.HttpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HttpRequest::CopyFrom(const HttpRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.logging.type.HttpRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HttpRequest::IsInitialized() const {
  return true;
}

void HttpRequest::InternalSwap(HttpRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  request_method_.Swap(&other->request_method_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  request_url_.Swap(&other->request_url_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  user_agent_.Swap(&other->user_agent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  remote_ip_.Swap(&other->remote_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  referer_.Swap(&other->referer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  server_ip_.Swap(&other->server_ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  protocol_.Swap(&other->protocol_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(latency_, other->latency_);
  swap(request_size_, other->request_size_);
  swap(response_size_, other->response_size_);
  swap(status_, other->status_);
  swap(cache_lookup_, other->cache_lookup_);
  swap(cache_hit_, other->cache_hit_);
  swap(cache_validated_with_origin_server_, other->cache_validated_with_origin_server_);
  swap(cache_fill_bytes_, other->cache_fill_bytes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HttpRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace type
}  // namespace logging
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::google::logging::type::HttpRequest* Arena::CreateMaybeMessage< ::google::logging::type::HttpRequest >(Arena* arena) {
  return Arena::CreateInternal< ::google::logging::type::HttpRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
