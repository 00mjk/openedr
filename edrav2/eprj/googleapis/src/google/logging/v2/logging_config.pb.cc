// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/logging/v2/logging_config.proto

#include "google/logging/v2/logging_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2flogging_2fv2_2flogging_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BigQueryOptions_google_2flogging_2fv2_2flogging_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2flogging_2fv2_2flogging_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogExclusion_google_2flogging_2fv2_2flogging_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2flogging_2fv2_2flogging_5fconfig_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LogSink_google_2flogging_2fv2_2flogging_5fconfig_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ffield_5fmask_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FieldMask_google_2fprotobuf_2ffield_5fmask_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace google {
namespace logging {
namespace v2 {
class LogSinkDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogSink> _instance;
  const ::google::logging::v2::BigQueryOptions* bigquery_options_;
} _LogSink_default_instance_;
class BigQueryOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BigQueryOptions> _instance;
} _BigQueryOptions_default_instance_;
class ListSinksRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListSinksRequest> _instance;
} _ListSinksRequest_default_instance_;
class ListSinksResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListSinksResponse> _instance;
} _ListSinksResponse_default_instance_;
class GetSinkRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetSinkRequest> _instance;
} _GetSinkRequest_default_instance_;
class CreateSinkRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateSinkRequest> _instance;
} _CreateSinkRequest_default_instance_;
class UpdateSinkRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateSinkRequest> _instance;
} _UpdateSinkRequest_default_instance_;
class DeleteSinkRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteSinkRequest> _instance;
} _DeleteSinkRequest_default_instance_;
class LogExclusionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogExclusion> _instance;
} _LogExclusion_default_instance_;
class ListExclusionsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListExclusionsRequest> _instance;
} _ListExclusionsRequest_default_instance_;
class ListExclusionsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ListExclusionsResponse> _instance;
} _ListExclusionsResponse_default_instance_;
class GetExclusionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetExclusionRequest> _instance;
} _GetExclusionRequest_default_instance_;
class CreateExclusionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateExclusionRequest> _instance;
} _CreateExclusionRequest_default_instance_;
class UpdateExclusionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateExclusionRequest> _instance;
} _UpdateExclusionRequest_default_instance_;
class DeleteExclusionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteExclusionRequest> _instance;
} _DeleteExclusionRequest_default_instance_;
}  // namespace v2
}  // namespace logging
}  // namespace google
static void InitDefaultsscc_info_BigQueryOptions_google_2flogging_2fv2_2flogging_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::logging::v2::_BigQueryOptions_default_instance_;
    new (ptr) ::google::logging::v2::BigQueryOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::logging::v2::BigQueryOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BigQueryOptions_google_2flogging_2fv2_2flogging_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BigQueryOptions_google_2flogging_2fv2_2flogging_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_CreateExclusionRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::logging::v2::_CreateExclusionRequest_default_instance_;
    new (ptr) ::google::logging::v2::CreateExclusionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::logging::v2::CreateExclusionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateExclusionRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateExclusionRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto}, {
      &scc_info_LogExclusion_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_CreateSinkRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::logging::v2::_CreateSinkRequest_default_instance_;
    new (ptr) ::google::logging::v2::CreateSinkRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::logging::v2::CreateSinkRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateSinkRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateSinkRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto}, {
      &scc_info_LogSink_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_DeleteExclusionRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::logging::v2::_DeleteExclusionRequest_default_instance_;
    new (ptr) ::google::logging::v2::DeleteExclusionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::logging::v2::DeleteExclusionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteExclusionRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteExclusionRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_DeleteSinkRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::logging::v2::_DeleteSinkRequest_default_instance_;
    new (ptr) ::google::logging::v2::DeleteSinkRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::logging::v2::DeleteSinkRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeleteSinkRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeleteSinkRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_GetExclusionRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::logging::v2::_GetExclusionRequest_default_instance_;
    new (ptr) ::google::logging::v2::GetExclusionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::logging::v2::GetExclusionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetExclusionRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetExclusionRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_GetSinkRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::logging::v2::_GetSinkRequest_default_instance_;
    new (ptr) ::google::logging::v2::GetSinkRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::logging::v2::GetSinkRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetSinkRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetSinkRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ListExclusionsRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::logging::v2::_ListExclusionsRequest_default_instance_;
    new (ptr) ::google::logging::v2::ListExclusionsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::logging::v2::ListExclusionsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListExclusionsRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListExclusionsRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ListExclusionsResponse_google_2flogging_2fv2_2flogging_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::logging::v2::_ListExclusionsResponse_default_instance_;
    new (ptr) ::google::logging::v2::ListExclusionsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::logging::v2::ListExclusionsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListExclusionsResponse_google_2flogging_2fv2_2flogging_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListExclusionsResponse_google_2flogging_2fv2_2flogging_5fconfig_2eproto}, {
      &scc_info_LogExclusion_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_ListSinksRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::logging::v2::_ListSinksRequest_default_instance_;
    new (ptr) ::google::logging::v2::ListSinksRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::logging::v2::ListSinksRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListSinksRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ListSinksRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto}, {}};

static void InitDefaultsscc_info_ListSinksResponse_google_2flogging_2fv2_2flogging_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::logging::v2::_ListSinksResponse_default_instance_;
    new (ptr) ::google::logging::v2::ListSinksResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::logging::v2::ListSinksResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ListSinksResponse_google_2flogging_2fv2_2flogging_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ListSinksResponse_google_2flogging_2fv2_2flogging_5fconfig_2eproto}, {
      &scc_info_LogSink_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base,}};

static void InitDefaultsscc_info_LogExclusion_google_2flogging_2fv2_2flogging_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::logging::v2::_LogExclusion_default_instance_;
    new (ptr) ::google::logging::v2::LogExclusion();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::logging::v2::LogExclusion::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogExclusion_google_2flogging_2fv2_2flogging_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LogExclusion_google_2flogging_2fv2_2flogging_5fconfig_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_LogSink_google_2flogging_2fv2_2flogging_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::logging::v2::_LogSink_default_instance_;
    new (ptr) ::google::logging::v2::LogSink();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::logging::v2::LogSink::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LogSink_google_2flogging_2fv2_2flogging_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LogSink_google_2flogging_2fv2_2flogging_5fconfig_2eproto}, {
      &scc_info_BigQueryOptions_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_UpdateExclusionRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::logging::v2::_UpdateExclusionRequest_default_instance_;
    new (ptr) ::google::logging::v2::UpdateExclusionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::logging::v2::UpdateExclusionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateExclusionRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UpdateExclusionRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto}, {
      &scc_info_LogExclusion_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base,
      &scc_info_FieldMask_google_2fprotobuf_2ffield_5fmask_2eproto.base,}};

static void InitDefaultsscc_info_UpdateSinkRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::logging::v2::_UpdateSinkRequest_default_instance_;
    new (ptr) ::google::logging::v2::UpdateSinkRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::logging::v2::UpdateSinkRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateSinkRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UpdateSinkRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto}, {
      &scc_info_LogSink_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base,
      &scc_info_FieldMask_google_2fprotobuf_2ffield_5fmask_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_google_2flogging_2fv2_2flogging_5fconfig_2eproto[15];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_google_2flogging_2fv2_2flogging_5fconfig_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_google_2flogging_2fv2_2flogging_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_google_2flogging_2fv2_2flogging_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogSink, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogSink, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogSink, name_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogSink, destination_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogSink, filter_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogSink, output_version_format_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogSink, writer_identity_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogSink, include_children_),
  offsetof(::google::logging::v2::LogSinkDefaultTypeInternal, bigquery_options_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogSink, create_time_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogSink, update_time_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogSink, start_time_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogSink, end_time_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogSink, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::BigQueryOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::BigQueryOptions, use_partitioned_tables_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::ListSinksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::ListSinksRequest, parent_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::ListSinksRequest, page_token_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::ListSinksRequest, page_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::ListSinksResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::ListSinksResponse, sinks_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::ListSinksResponse, next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::GetSinkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::GetSinkRequest, sink_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::CreateSinkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::CreateSinkRequest, parent_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::CreateSinkRequest, sink_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::CreateSinkRequest, unique_writer_identity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::UpdateSinkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::UpdateSinkRequest, sink_name_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::UpdateSinkRequest, sink_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::UpdateSinkRequest, unique_writer_identity_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::UpdateSinkRequest, update_mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::DeleteSinkRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::DeleteSinkRequest, sink_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogExclusion, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogExclusion, name_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogExclusion, description_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogExclusion, filter_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogExclusion, disabled_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogExclusion, create_time_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogExclusion, update_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::ListExclusionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::ListExclusionsRequest, parent_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::ListExclusionsRequest, page_token_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::ListExclusionsRequest, page_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::ListExclusionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::ListExclusionsResponse, exclusions_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::ListExclusionsResponse, next_page_token_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::GetExclusionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::GetExclusionRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::CreateExclusionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::CreateExclusionRequest, parent_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::CreateExclusionRequest, exclusion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::UpdateExclusionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::UpdateExclusionRequest, name_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::UpdateExclusionRequest, exclusion_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::UpdateExclusionRequest, update_mask_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::DeleteExclusionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::DeleteExclusionRequest, name_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::google::logging::v2::LogSink)},
  { 17, -1, sizeof(::google::logging::v2::BigQueryOptions)},
  { 23, -1, sizeof(::google::logging::v2::ListSinksRequest)},
  { 31, -1, sizeof(::google::logging::v2::ListSinksResponse)},
  { 38, -1, sizeof(::google::logging::v2::GetSinkRequest)},
  { 44, -1, sizeof(::google::logging::v2::CreateSinkRequest)},
  { 52, -1, sizeof(::google::logging::v2::UpdateSinkRequest)},
  { 61, -1, sizeof(::google::logging::v2::DeleteSinkRequest)},
  { 67, -1, sizeof(::google::logging::v2::LogExclusion)},
  { 78, -1, sizeof(::google::logging::v2::ListExclusionsRequest)},
  { 86, -1, sizeof(::google::logging::v2::ListExclusionsResponse)},
  { 93, -1, sizeof(::google::logging::v2::GetExclusionRequest)},
  { 99, -1, sizeof(::google::logging::v2::CreateExclusionRequest)},
  { 106, -1, sizeof(::google::logging::v2::UpdateExclusionRequest)},
  { 114, -1, sizeof(::google::logging::v2::DeleteExclusionRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::logging::v2::_LogSink_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::logging::v2::_BigQueryOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::logging::v2::_ListSinksRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::logging::v2::_ListSinksResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::logging::v2::_GetSinkRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::logging::v2::_CreateSinkRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::logging::v2::_UpdateSinkRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::logging::v2::_DeleteSinkRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::logging::v2::_LogExclusion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::logging::v2::_ListExclusionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::logging::v2::_ListExclusionsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::logging::v2::_GetExclusionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::logging::v2::_CreateExclusionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::logging::v2::_UpdateExclusionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::logging::v2::_DeleteExclusionRequest_default_instance_),
};

const char descriptor_table_protodef_google_2flogging_2fv2_2flogging_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&google/logging/v2/logging_config.proto"
  "\022\021google.logging.v2\032\036google/protobuf/dur"
  "ation.proto\032\033google/protobuf/empty.proto"
  "\032 google/protobuf/field_mask.proto\032\037goog"
  "le/protobuf/timestamp.proto\032\034google/api/"
  "annotations.proto\032\027google/api/client.pro"
  "to\"\220\004\n\007LogSink\022\014\n\004name\030\001 \001(\t\022\023\n\013destinat"
  "ion\030\003 \001(\t\022\016\n\006filter\030\005 \001(\t\022K\n\025output_vers"
  "ion_format\030\006 \001(\0162(.google.logging.v2.Log"
  "Sink.VersionFormatB\002\030\001\022\027\n\017writer_identit"
  "y\030\010 \001(\t\022\030\n\020include_children\030\t \001(\010\022>\n\020big"
  "query_options\030\014 \001(\0132\".google.logging.v2."
  "BigQueryOptionsH\000\022/\n\013create_time\030\r \001(\0132\032"
  ".google.protobuf.Timestamp\022/\n\013update_tim"
  "e\030\016 \001(\0132\032.google.protobuf.Timestamp\0222\n\ns"
  "tart_time\030\n \001(\0132\032.google.protobuf.Timest"
  "ampB\002\030\001\0220\n\010end_time\030\013 \001(\0132\032.google.proto"
  "buf.TimestampB\002\030\001\"\?\n\rVersionFormat\022\036\n\032VE"
  "RSION_FORMAT_UNSPECIFIED\020\000\022\006\n\002V2\020\001\022\006\n\002V1"
  "\020\002B\t\n\007options\"1\n\017BigQueryOptions\022\036\n\026use_"
  "partitioned_tables\030\001 \001(\010\"I\n\020ListSinksReq"
  "uest\022\016\n\006parent\030\001 \001(\t\022\022\n\npage_token\030\002 \001(\t"
  "\022\021\n\tpage_size\030\003 \001(\005\"W\n\021ListSinksResponse"
  "\022)\n\005sinks\030\001 \003(\0132\032.google.logging.v2.LogS"
  "ink\022\027\n\017next_page_token\030\002 \001(\t\"#\n\016GetSinkR"
  "equest\022\021\n\tsink_name\030\001 \001(\t\"m\n\021CreateSinkR"
  "equest\022\016\n\006parent\030\001 \001(\t\022(\n\004sink\030\002 \001(\0132\032.g"
  "oogle.logging.v2.LogSink\022\036\n\026unique_write"
  "r_identity\030\003 \001(\010\"\241\001\n\021UpdateSinkRequest\022\021"
  "\n\tsink_name\030\001 \001(\t\022(\n\004sink\030\002 \001(\0132\032.google"
  ".logging.v2.LogSink\022\036\n\026unique_writer_ide"
  "ntity\030\003 \001(\010\022/\n\013update_mask\030\004 \001(\0132\032.googl"
  "e.protobuf.FieldMask\"&\n\021DeleteSinkReques"
  "t\022\021\n\tsink_name\030\001 \001(\t\"\265\001\n\014LogExclusion\022\014\n"
  "\004name\030\001 \001(\t\022\023\n\013description\030\002 \001(\t\022\016\n\006filt"
  "er\030\003 \001(\t\022\020\n\010disabled\030\004 \001(\010\022/\n\013create_tim"
  "e\030\005 \001(\0132\032.google.protobuf.Timestamp\022/\n\013u"
  "pdate_time\030\006 \001(\0132\032.google.protobuf.Times"
  "tamp\"N\n\025ListExclusionsRequest\022\016\n\006parent\030"
  "\001 \001(\t\022\022\n\npage_token\030\002 \001(\t\022\021\n\tpage_size\030\003"
  " \001(\005\"f\n\026ListExclusionsResponse\0223\n\nexclus"
  "ions\030\001 \003(\0132\037.google.logging.v2.LogExclus"
  "ion\022\027\n\017next_page_token\030\002 \001(\t\"#\n\023GetExclu"
  "sionRequest\022\014\n\004name\030\001 \001(\t\"\\\n\026CreateExclu"
  "sionRequest\022\016\n\006parent\030\001 \001(\t\0222\n\texclusion"
  "\030\002 \001(\0132\037.google.logging.v2.LogExclusion\""
  "\213\001\n\026UpdateExclusionRequest\022\014\n\004name\030\001 \001(\t"
  "\0222\n\texclusion\030\002 \001(\0132\037.google.logging.v2."
  "LogExclusion\022/\n\013update_mask\030\003 \001(\0132\032.goog"
  "le.protobuf.FieldMask\"&\n\026DeleteExclusion"
  "Request\022\014\n\004name\030\001 \001(\t2\366\032\n\017ConfigServiceV"
  "2\022\207\002\n\tListSinks\022#.google.logging.v2.List"
  "SinksRequest\032$.google.logging.v2.ListSin"
  "ksResponse\"\256\001\202\323\344\223\002\247\001\022\026/v2/{parent=*/*}/s"
  "inksZ\037\022\035/v2/{parent=projects/*}/sinksZ$\022"
  "\"/v2/{parent=organizations/*}/sinksZ\036\022\034/"
  "v2/{parent=folders/*}/sinksZ&\022$/v2/{pare"
  "nt=billingAccounts/*}/sinks\022\222\002\n\007GetSink\022"
  "!.google.logging.v2.GetSinkRequest\032\032.goo"
  "gle.logging.v2.LogSink\"\307\001\202\323\344\223\002\300\001\022\033/v2/{s"
  "ink_name=*/*/sinks/*}Z$\022\"/v2/{sink_name="
  "projects/*/sinks/*}Z)\022\'/v2/{sink_name=or"
  "ganizations/*/sinks/*}Z#\022!/v2/{sink_name"
  "=folders/*/sinks/*}Z+\022)/v2/{sink_name=bi"
  "llingAccounts/*/sinks/*}\022\235\002\n\nCreateSink\022"
  "$.google.logging.v2.CreateSinkRequest\032\032."
  "google.logging.v2.LogSink\"\314\001\202\323\344\223\002\305\001\"\026/v2"
  "/{parent=*/*}/sinks:\004sinkZ%\"\035/v2/{parent"
  "=projects/*}/sinks:\004sinkZ*\"\"/v2/{parent="
  "organizations/*}/sinks:\004sinkZ$\"\034/v2/{par"
  "ent=folders/*}/sinks:\004sinkZ,\"$/v2/{paren"
  "t=billingAccounts/*}/sinks:\004sink\022\361\003\n\nUpd"
  "ateSink\022$.google.logging.v2.UpdateSinkRe"
  "quest\032\032.google.logging.v2.LogSink\"\240\003\202\323\344\223"
  "\002\231\003\032\033/v2/{sink_name=*/*/sinks/*}:\004sinkZ*"
  "\032\"/v2/{sink_name=projects/*/sinks/*}:\004si"
  "nkZ/\032\'/v2/{sink_name=organizations/*/sin"
  "ks/*}:\004sinkZ)\032!/v2/{sink_name=folders/*/"
  "sinks/*}:\004sinkZ1\032)/v2/{sink_name=billing"
  "Accounts/*/sinks/*}:\004sinkZ*2\"/v2/{sink_n"
  "ame=projects/*/sinks/*}:\004sinkZ/2\'/v2/{si"
  "nk_name=organizations/*/sinks/*}:\004sinkZ)"
  "2!/v2/{sink_name=folders/*/sinks/*}:\004sin"
  "kZ12)/v2/{sink_name=billingAccounts/*/si"
  "nks/*}:\004sink\022\224\002\n\nDeleteSink\022$.google.log"
  "ging.v2.DeleteSinkRequest\032\026.google.proto"
  "buf.Empty\"\307\001\202\323\344\223\002\300\001*\033/v2/{sink_name=*/*/"
  "sinks/*}Z$*\"/v2/{sink_name=projects/*/si"
  "nks/*}Z)*\'/v2/{sink_name=organizations/*"
  "/sinks/*}Z#*!/v2/{sink_name=folders/*/si"
  "nks/*}Z+*)/v2/{sink_name=billingAccounts"
  "/*/sinks/*}\022\257\002\n\016ListExclusions\022(.google."
  "logging.v2.ListExclusionsRequest\032).googl"
  "e.logging.v2.ListExclusionsResponse\"\307\001\202\323"
  "\344\223\002\300\001\022\033/v2/{parent=*/*}/exclusionsZ$\022\"/v"
  "2/{parent=projects/*}/exclusionsZ)\022\'/v2/"
  "{parent=organizations/*}/exclusionsZ#\022!/"
  "v2/{parent=folders/*}/exclusionsZ+\022)/v2/"
  "{parent=billingAccounts/*}/exclusions\022\241\002"
  "\n\014GetExclusion\022&.google.logging.v2.GetEx"
  "clusionRequest\032\037.google.logging.v2.LogEx"
  "clusion\"\307\001\202\323\344\223\002\300\001\022\033/v2/{name=*/*/exclusi"
  "ons/*}Z$\022\"/v2/{name=projects/*/exclusion"
  "s/*}Z)\022\'/v2/{name=organizations/*/exclus"
  "ions/*}Z#\022!/v2/{name=folders/*/exclusion"
  "s/*}Z+\022)/v2/{name=billingAccounts/*/excl"
  "usions/*}\022\336\002\n\017CreateExclusion\022).google.l"
  "ogging.v2.CreateExclusionRequest\032\037.googl"
  "e.logging.v2.LogExclusion\"\376\001\202\323\344\223\002\367\001\"\033/v2"
  "/{parent=*/*}/exclusions:\texclusionZ/\"\"/"
  "v2/{parent=projects/*}/exclusions:\texclu"
  "sionZ4\"\'/v2/{parent=organizations/*}/exc"
  "lusions:\texclusionZ.\"!/v2/{parent=folder"
  "s/*}/exclusions:\texclusionZ6\")/v2/{paren"
  "t=billingAccounts/*}/exclusions:\texclusi"
  "on\022\336\002\n\017UpdateExclusion\022).google.logging."
  "v2.UpdateExclusionRequest\032\037.google.loggi"
  "ng.v2.LogExclusion\"\376\001\202\323\344\223\002\367\0012\033/v2/{name="
  "*/*/exclusions/*}:\texclusionZ/2\"/v2/{nam"
  "e=projects/*/exclusions/*}:\texclusionZ42"
  "\'/v2/{name=organizations/*/exclusions/*}"
  ":\texclusionZ.2!/v2/{name=folders/*/exclu"
  "sions/*}:\texclusionZ62)/v2/{name=billing"
  "Accounts/*/exclusions/*}:\texclusion\022\236\002\n\017"
  "DeleteExclusion\022).google.logging.v2.Dele"
  "teExclusionRequest\032\026.google.protobuf.Emp"
  "ty\"\307\001\202\323\344\223\002\300\001*\033/v2/{name=*/*/exclusions/*"
  "}Z$*\"/v2/{name=projects/*/exclusions/*}Z"
  ")*\'/v2/{name=organizations/*/exclusions/"
  "*}Z#*!/v2/{name=folders/*/exclusions/*}Z"
  "+*)/v2/{name=billingAccounts/*/exclusion"
  "s/*}\032\337\001\312A\026logging.googleapis.com\322A\302\001http"
  "s://www.googleapis.com/auth/cloud-platfo"
  "rm,https://www.googleapis.com/auth/cloud"
  "-platform.read-only,https://www.googleap"
  "is.com/auth/logging.admin,https://www.go"
  "ogleapis.com/auth/logging.readB\236\001\n\025com.g"
  "oogle.logging.v2B\022LoggingConfigProtoP\001Z8"
  "google.golang.org/genproto/googleapis/lo"
  "gging/v2;logging\370\001\001\252\002\027Google.Cloud.Loggi"
  "ng.V2\312\002\027Google\\Cloud\\Logging\\V2b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto_deps[6] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fclient_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2fempty_2eproto,
  &::descriptor_table_google_2fprotobuf_2ffield_5fmask_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto_sccs[15] = {
  &scc_info_BigQueryOptions_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base,
  &scc_info_CreateExclusionRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base,
  &scc_info_CreateSinkRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base,
  &scc_info_DeleteExclusionRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base,
  &scc_info_DeleteSinkRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base,
  &scc_info_GetExclusionRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base,
  &scc_info_GetSinkRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base,
  &scc_info_ListExclusionsRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base,
  &scc_info_ListExclusionsResponse_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base,
  &scc_info_ListSinksRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base,
  &scc_info_ListSinksResponse_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base,
  &scc_info_LogExclusion_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base,
  &scc_info_LogSink_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base,
  &scc_info_UpdateExclusionRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base,
  &scc_info_UpdateSinkRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto_once;
static bool descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto = {
  &descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto_initialized, descriptor_table_protodef_google_2flogging_2fv2_2flogging_5fconfig_2eproto, "google/logging/v2/logging_config.proto", 5639,
  &descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto_once, descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto_sccs, descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto_deps, 15, 6,
  schemas, file_default_instances, TableStruct_google_2flogging_2fv2_2flogging_5fconfig_2eproto::offsets,
  file_level_metadata_google_2flogging_2fv2_2flogging_5fconfig_2eproto, 15, file_level_enum_descriptors_google_2flogging_2fv2_2flogging_5fconfig_2eproto, file_level_service_descriptors_google_2flogging_2fv2_2flogging_5fconfig_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_google_2flogging_2fv2_2flogging_5fconfig_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto), true);
namespace google {
namespace logging {
namespace v2 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogSink_VersionFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto);
  return file_level_enum_descriptors_google_2flogging_2fv2_2flogging_5fconfig_2eproto[0];
}
bool LogSink_VersionFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LogSink_VersionFormat LogSink::VERSION_FORMAT_UNSPECIFIED;
constexpr LogSink_VersionFormat LogSink::V2;
constexpr LogSink_VersionFormat LogSink::V1;
constexpr LogSink_VersionFormat LogSink::VersionFormat_MIN;
constexpr LogSink_VersionFormat LogSink::VersionFormat_MAX;
constexpr int LogSink::VersionFormat_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void LogSink::InitAsDefaultInstance() {
  ::google::logging::v2::_LogSink_default_instance_.bigquery_options_ = const_cast< ::google::logging::v2::BigQueryOptions*>(
      ::google::logging::v2::BigQueryOptions::internal_default_instance());
  ::google::logging::v2::_LogSink_default_instance_._instance.get_mutable()->create_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::google::logging::v2::_LogSink_default_instance_._instance.get_mutable()->update_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::google::logging::v2::_LogSink_default_instance_._instance.get_mutable()->start_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::google::logging::v2::_LogSink_default_instance_._instance.get_mutable()->end_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class LogSink::_Internal {
 public:
  static const ::google::logging::v2::BigQueryOptions& bigquery_options(const LogSink* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& create_time(const LogSink* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& update_time(const LogSink* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& start_time(const LogSink* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& end_time(const LogSink* msg);
};

const ::google::logging::v2::BigQueryOptions&
LogSink::_Internal::bigquery_options(const LogSink* msg) {
  return *msg->options_.bigquery_options_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
LogSink::_Internal::create_time(const LogSink* msg) {
  return *msg->create_time_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
LogSink::_Internal::update_time(const LogSink* msg) {
  return *msg->update_time_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
LogSink::_Internal::start_time(const LogSink* msg) {
  return *msg->start_time_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
LogSink::_Internal::end_time(const LogSink* msg) {
  return *msg->end_time_;
}
void LogSink::set_allocated_bigquery_options(::google::logging::v2::BigQueryOptions* bigquery_options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_options();
  if (bigquery_options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(bigquery_options);
    if (message_arena != submessage_arena) {
      bigquery_options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bigquery_options, submessage_arena);
    }
    set_has_bigquery_options();
    options_.bigquery_options_ = bigquery_options;
  }
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogSink.bigquery_options)
}
void LogSink::unsafe_arena_set_allocated_create_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArenaNoVirtual() == nullptr) {
    delete create_time_;
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogSink.create_time)
}
void LogSink::clear_create_time() {
  if (GetArenaNoVirtual() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
}
void LogSink::unsafe_arena_set_allocated_update_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  if (GetArenaNoVirtual() == nullptr) {
    delete update_time_;
  }
  update_time_ = update_time;
  if (update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogSink.update_time)
}
void LogSink::clear_update_time() {
  if (GetArenaNoVirtual() == nullptr && update_time_ != nullptr) {
    delete update_time_;
  }
  update_time_ = nullptr;
}
void LogSink::unsafe_arena_set_allocated_start_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  if (GetArenaNoVirtual() == nullptr) {
    delete start_time_;
  }
  start_time_ = start_time;
  if (start_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogSink.start_time)
}
void LogSink::clear_start_time() {
  if (GetArenaNoVirtual() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
}
void LogSink::unsafe_arena_set_allocated_end_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  if (GetArenaNoVirtual() == nullptr) {
    delete end_time_;
  }
  end_time_ = end_time;
  if (end_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogSink.end_time)
}
void LogSink::clear_end_time() {
  if (GetArenaNoVirtual() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
}
LogSink::LogSink()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.logging.v2.LogSink)
}
LogSink::LogSink(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.logging.v2.LogSink)
}
LogSink::LogSink(const LogSink& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArenaNoVirtual());
  }
  destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_destination().empty()) {
    destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_destination(),
      GetArenaNoVirtual());
  }
  filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filter().empty()) {
    filter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_filter(),
      GetArenaNoVirtual());
  }
  writer_identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_writer_identity().empty()) {
    writer_identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_writer_identity(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_start_time()) {
    start_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_time_);
  } else {
    start_time_ = nullptr;
  }
  if (from._internal_has_end_time()) {
    end_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.end_time_);
  } else {
    end_time_ = nullptr;
  }
  if (from._internal_has_create_time()) {
    create_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.create_time_);
  } else {
    create_time_ = nullptr;
  }
  if (from._internal_has_update_time()) {
    update_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.update_time_);
  } else {
    update_time_ = nullptr;
  }
  ::memcpy(&output_version_format_, &from.output_version_format_,
    static_cast<size_t>(reinterpret_cast<char*>(&include_children_) -
    reinterpret_cast<char*>(&output_version_format_)) + sizeof(include_children_));
  clear_has_options();
  switch (from.options_case()) {
    case kBigqueryOptions: {
      _internal_mutable_bigquery_options()->::google::logging::v2::BigQueryOptions::MergeFrom(from._internal_bigquery_options());
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.logging.v2.LogSink)
}

void LogSink::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogSink_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  writer_identity_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&include_children_) -
      reinterpret_cast<char*>(&start_time_)) + sizeof(include_children_));
  clear_has_options();
}

LogSink::~LogSink() {
  // @@protoc_insertion_point(destructor:google.logging.v2.LogSink)
  SharedDtor();
}

void LogSink::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  destination_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  writer_identity_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete start_time_;
  if (this != internal_default_instance()) delete end_time_;
  if (this != internal_default_instance()) delete create_time_;
  if (this != internal_default_instance()) delete update_time_;
  if (has_options()) {
    clear_options();
  }
}

void LogSink::ArenaDtor(void* object) {
  LogSink* _this = reinterpret_cast< LogSink* >(object);
  (void)_this;
}
void LogSink::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogSink::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogSink& LogSink::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogSink_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void LogSink::clear_options() {
// @@protoc_insertion_point(one_of_clear_start:google.logging.v2.LogSink)
  switch (options_case()) {
    case kBigqueryOptions: {
      if (GetArenaNoVirtual() == nullptr) {
        delete options_.bigquery_options_;
      }
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OPTIONS_NOT_SET;
}


void LogSink::Clear() {
// @@protoc_insertion_point(message_clear_start:google.logging.v2.LogSink)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  destination_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  filter_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  writer_identity_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && start_time_ != nullptr) {
    delete start_time_;
  }
  start_time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && end_time_ != nullptr) {
    delete end_time_;
  }
  end_time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && update_time_ != nullptr) {
    delete update_time_;
  }
  update_time_ = nullptr;
  ::memset(&output_version_format_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&include_children_) -
      reinterpret_cast<char*>(&output_version_format_)) + sizeof(include_children_));
  clear_options();
  _internal_metadata_.Clear();
}

const char* LogSink::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "google.logging.v2.LogSink.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string destination = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_destination(), ptr, ctx, "google.logging.v2.LogSink.destination");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string filter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_filter(), ptr, ctx, "google.logging.v2.LogSink.filter");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.logging.v2.LogSink.VersionFormat output_version_format = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_output_version_format(static_cast<::google::logging::v2::LogSink_VersionFormat>(val));
        } else goto handle_unusual;
        continue;
      // string writer_identity = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_writer_identity(), ptr, ctx, "google.logging.v2.LogSink.writer_identity");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool include_children = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          include_children_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp start_time = 10 [deprecated = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end_time = 11 [deprecated = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.logging.v2.BigQueryOptions bigquery_options = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_bigquery_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp create_time = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp update_time = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogSink::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.logging.v2.LogSink)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogSink.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string destination = 3;
  if (this->destination().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_destination().data(), static_cast<int>(this->_internal_destination().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogSink.destination");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_destination(), target);
  }

  // string filter = 5;
  if (this->filter().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filter().data(), static_cast<int>(this->_internal_filter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogSink.filter");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_filter(), target);
  }

  // .google.logging.v2.LogSink.VersionFormat output_version_format = 6 [deprecated = true];
  if (this->output_version_format() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_output_version_format(), target);
  }

  // string writer_identity = 8;
  if (this->writer_identity().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_writer_identity().data(), static_cast<int>(this->_internal_writer_identity().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogSink.writer_identity");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_writer_identity(), target);
  }

  // bool include_children = 9;
  if (this->include_children() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(9, this->_internal_include_children(), target);
  }

  // .google.protobuf.Timestamp start_time = 10 [deprecated = true];
  if (this->has_start_time()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::start_time(this), target, stream);
  }

  // .google.protobuf.Timestamp end_time = 11 [deprecated = true];
  if (this->has_end_time()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, _Internal::end_time(this), target, stream);
  }

  // .google.logging.v2.BigQueryOptions bigquery_options = 12;
  if (_internal_has_bigquery_options()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, _Internal::bigquery_options(this), target, stream);
  }

  // .google.protobuf.Timestamp create_time = 13;
  if (this->has_create_time()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, _Internal::create_time(this), target, stream);
  }

  // .google.protobuf.Timestamp update_time = 14;
  if (this->has_update_time()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, _Internal::update_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.logging.v2.LogSink)
  return target;
}

size_t LogSink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.logging.v2.LogSink)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string destination = 3;
  if (this->destination().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_destination());
  }

  // string filter = 5;
  if (this->filter().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filter());
  }

  // string writer_identity = 8;
  if (this->writer_identity().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_writer_identity());
  }

  // .google.protobuf.Timestamp start_time = 10 [deprecated = true];
  if (this->has_start_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_time_);
  }

  // .google.protobuf.Timestamp end_time = 11 [deprecated = true];
  if (this->has_end_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_time_);
  }

  // .google.protobuf.Timestamp create_time = 13;
  if (this->has_create_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *create_time_);
  }

  // .google.protobuf.Timestamp update_time = 14;
  if (this->has_update_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_time_);
  }

  // .google.logging.v2.LogSink.VersionFormat output_version_format = 6 [deprecated = true];
  if (this->output_version_format() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_output_version_format());
  }

  // bool include_children = 9;
  if (this->include_children() != 0) {
    total_size += 1 + 1;
  }

  switch (options_case()) {
    // .google.logging.v2.BigQueryOptions bigquery_options = 12;
    case kBigqueryOptions: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *options_.bigquery_options_);
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogSink::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.logging.v2.LogSink)
  GOOGLE_DCHECK_NE(&from, this);
  const LogSink* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogSink>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.logging.v2.LogSink)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.logging.v2.LogSink)
    MergeFrom(*source);
  }
}

void LogSink::MergeFrom(const LogSink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.logging.v2.LogSink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.destination().size() > 0) {
    _internal_set_destination(from._internal_destination());
  }
  if (from.filter().size() > 0) {
    _internal_set_filter(from._internal_filter());
  }
  if (from.writer_identity().size() > 0) {
    _internal_set_writer_identity(from._internal_writer_identity());
  }
  if (from.has_start_time()) {
    _internal_mutable_start_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start_time());
  }
  if (from.has_end_time()) {
    _internal_mutable_end_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_end_time());
  }
  if (from.has_create_time()) {
    _internal_mutable_create_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_create_time());
  }
  if (from.has_update_time()) {
    _internal_mutable_update_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_update_time());
  }
  if (from.output_version_format() != 0) {
    _internal_set_output_version_format(from._internal_output_version_format());
  }
  if (from.include_children() != 0) {
    _internal_set_include_children(from._internal_include_children());
  }
  switch (from.options_case()) {
    case kBigqueryOptions: {
      _internal_mutable_bigquery_options()->::google::logging::v2::BigQueryOptions::MergeFrom(from._internal_bigquery_options());
      break;
    }
    case OPTIONS_NOT_SET: {
      break;
    }
  }
}

void LogSink::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.logging.v2.LogSink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogSink::CopyFrom(const LogSink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.logging.v2.LogSink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogSink::IsInitialized() const {
  return true;
}

void LogSink::InternalSwap(LogSink* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  destination_.Swap(&other->destination_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filter_.Swap(&other->filter_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  writer_identity_.Swap(&other->writer_identity_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_time_, other->start_time_);
  swap(end_time_, other->end_time_);
  swap(create_time_, other->create_time_);
  swap(update_time_, other->update_time_);
  swap(output_version_format_, other->output_version_format_);
  swap(include_children_, other->include_children_);
  swap(options_, other->options_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogSink::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BigQueryOptions::InitAsDefaultInstance() {
}
class BigQueryOptions::_Internal {
 public:
};

BigQueryOptions::BigQueryOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.logging.v2.BigQueryOptions)
}
BigQueryOptions::BigQueryOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.logging.v2.BigQueryOptions)
}
BigQueryOptions::BigQueryOptions(const BigQueryOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  use_partitioned_tables_ = from.use_partitioned_tables_;
  // @@protoc_insertion_point(copy_constructor:google.logging.v2.BigQueryOptions)
}

void BigQueryOptions::SharedCtor() {
  use_partitioned_tables_ = false;
}

BigQueryOptions::~BigQueryOptions() {
  // @@protoc_insertion_point(destructor:google.logging.v2.BigQueryOptions)
  SharedDtor();
}

void BigQueryOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
}

void BigQueryOptions::ArenaDtor(void* object) {
  BigQueryOptions* _this = reinterpret_cast< BigQueryOptions* >(object);
  (void)_this;
}
void BigQueryOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BigQueryOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BigQueryOptions& BigQueryOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BigQueryOptions_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void BigQueryOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:google.logging.v2.BigQueryOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  use_partitioned_tables_ = false;
  _internal_metadata_.Clear();
}

const char* BigQueryOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool use_partitioned_tables = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          use_partitioned_tables_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BigQueryOptions::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.logging.v2.BigQueryOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool use_partitioned_tables = 1;
  if (this->use_partitioned_tables() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_use_partitioned_tables(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.logging.v2.BigQueryOptions)
  return target;
}

size_t BigQueryOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.logging.v2.BigQueryOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool use_partitioned_tables = 1;
  if (this->use_partitioned_tables() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BigQueryOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.logging.v2.BigQueryOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const BigQueryOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BigQueryOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.logging.v2.BigQueryOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.logging.v2.BigQueryOptions)
    MergeFrom(*source);
  }
}

void BigQueryOptions::MergeFrom(const BigQueryOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.logging.v2.BigQueryOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.use_partitioned_tables() != 0) {
    _internal_set_use_partitioned_tables(from._internal_use_partitioned_tables());
  }
}

void BigQueryOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.logging.v2.BigQueryOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigQueryOptions::CopyFrom(const BigQueryOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.logging.v2.BigQueryOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigQueryOptions::IsInitialized() const {
  return true;
}

void BigQueryOptions::InternalSwap(BigQueryOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(use_partitioned_tables_, other->use_partitioned_tables_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BigQueryOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListSinksRequest::InitAsDefaultInstance() {
}
class ListSinksRequest::_Internal {
 public:
};

ListSinksRequest::ListSinksRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.logging.v2.ListSinksRequest)
}
ListSinksRequest::ListSinksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.logging.v2.ListSinksRequest)
}
ListSinksRequest::ListSinksRequest(const ListSinksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parent().empty()) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_parent(),
      GetArenaNoVirtual());
  }
  page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_page_token().empty()) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_page_token(),
      GetArenaNoVirtual());
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:google.logging.v2.ListSinksRequest)
}

void ListSinksRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListSinksRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base);
  parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
}

ListSinksRequest::~ListSinksRequest() {
  // @@protoc_insertion_point(destructor:google.logging.v2.ListSinksRequest)
  SharedDtor();
}

void ListSinksRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  parent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListSinksRequest::ArenaDtor(void* object) {
  ListSinksRequest* _this = reinterpret_cast< ListSinksRequest* >(object);
  (void)_this;
}
void ListSinksRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListSinksRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListSinksRequest& ListSinksRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListSinksRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ListSinksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.logging.v2.ListSinksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_size_ = 0;
  _internal_metadata_.Clear();
}

const char* ListSinksRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string parent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_parent(), ptr, ctx, "google.logging.v2.ListSinksRequest.parent");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_page_token(), ptr, ctx, "google.logging.v2.ListSinksRequest.page_token");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 page_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListSinksRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.logging.v2.ListSinksRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1;
  if (this->parent().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent().data(), static_cast<int>(this->_internal_parent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.ListSinksRequest.parent");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_parent(), target);
  }

  // string page_token = 2;
  if (this->page_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page_token().data(), static_cast<int>(this->_internal_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.ListSinksRequest.page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_page_token(), target);
  }

  // int32 page_size = 3;
  if (this->page_size() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_page_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.logging.v2.ListSinksRequest)
  return target;
}

size_t ListSinksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.logging.v2.ListSinksRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1;
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent());
  }

  // string page_token = 2;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page_token());
  }

  // int32 page_size = 3;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_page_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListSinksRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.logging.v2.ListSinksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListSinksRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListSinksRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.logging.v2.ListSinksRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.logging.v2.ListSinksRequest)
    MergeFrom(*source);
  }
}

void ListSinksRequest::MergeFrom(const ListSinksRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.logging.v2.ListSinksRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.parent().size() > 0) {
    _internal_set_parent(from._internal_parent());
  }
  if (from.page_token().size() > 0) {
    _internal_set_page_token(from._internal_page_token());
  }
  if (from.page_size() != 0) {
    _internal_set_page_size(from._internal_page_size());
  }
}

void ListSinksRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.logging.v2.ListSinksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListSinksRequest::CopyFrom(const ListSinksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.logging.v2.ListSinksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSinksRequest::IsInitialized() const {
  return true;
}

void ListSinksRequest::InternalSwap(ListSinksRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  parent_.Swap(&other->parent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  page_token_.Swap(&other->page_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(page_size_, other->page_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSinksRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListSinksResponse::InitAsDefaultInstance() {
}
class ListSinksResponse::_Internal {
 public:
};

ListSinksResponse::ListSinksResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.logging.v2.ListSinksResponse)
}
ListSinksResponse::ListSinksResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  sinks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.logging.v2.ListSinksResponse)
}
ListSinksResponse::ListSinksResponse(const ListSinksResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      sinks_(from.sinks_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_next_page_token().empty()) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_next_page_token(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.logging.v2.ListSinksResponse)
}

void ListSinksResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListSinksResponse_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base);
  next_page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListSinksResponse::~ListSinksResponse() {
  // @@protoc_insertion_point(destructor:google.logging.v2.ListSinksResponse)
  SharedDtor();
}

void ListSinksResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  next_page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListSinksResponse::ArenaDtor(void* object) {
  ListSinksResponse* _this = reinterpret_cast< ListSinksResponse* >(object);
  (void)_this;
}
void ListSinksResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListSinksResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListSinksResponse& ListSinksResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListSinksResponse_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ListSinksResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.logging.v2.ListSinksResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sinks_.Clear();
  next_page_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

const char* ListSinksResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .google.logging.v2.LogSink sinks = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sinks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string next_page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_next_page_token(), ptr, ctx, "google.logging.v2.ListSinksResponse.next_page_token");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListSinksResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.logging.v2.ListSinksResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.logging.v2.LogSink sinks = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sinks_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_sinks(i), target, stream);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_page_token().data(), static_cast<int>(this->_internal_next_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.ListSinksResponse.next_page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.logging.v2.ListSinksResponse)
  return target;
}

size_t ListSinksResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.logging.v2.ListSinksResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.logging.v2.LogSink sinks = 1;
  total_size += 1UL * this->_internal_sinks_size();
  for (const auto& msg : this->sinks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_page_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListSinksResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.logging.v2.ListSinksResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListSinksResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListSinksResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.logging.v2.ListSinksResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.logging.v2.ListSinksResponse)
    MergeFrom(*source);
  }
}

void ListSinksResponse::MergeFrom(const ListSinksResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.logging.v2.ListSinksResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sinks_.MergeFrom(from.sinks_);
  if (from.next_page_token().size() > 0) {
    _internal_set_next_page_token(from._internal_next_page_token());
  }
}

void ListSinksResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.logging.v2.ListSinksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListSinksResponse::CopyFrom(const ListSinksResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.logging.v2.ListSinksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSinksResponse::IsInitialized() const {
  return true;
}

void ListSinksResponse::InternalSwap(ListSinksResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sinks_.InternalSwap(&other->sinks_);
  next_page_token_.Swap(&other->next_page_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSinksResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetSinkRequest::InitAsDefaultInstance() {
}
class GetSinkRequest::_Internal {
 public:
};

GetSinkRequest::GetSinkRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.logging.v2.GetSinkRequest)
}
GetSinkRequest::GetSinkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.logging.v2.GetSinkRequest)
}
GetSinkRequest::GetSinkRequest(const GetSinkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sink_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sink_name().empty()) {
    sink_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sink_name(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.logging.v2.GetSinkRequest)
}

void GetSinkRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetSinkRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base);
  sink_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetSinkRequest::~GetSinkRequest() {
  // @@protoc_insertion_point(destructor:google.logging.v2.GetSinkRequest)
  SharedDtor();
}

void GetSinkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  sink_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetSinkRequest::ArenaDtor(void* object) {
  GetSinkRequest* _this = reinterpret_cast< GetSinkRequest* >(object);
  (void)_this;
}
void GetSinkRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSinkRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetSinkRequest& GetSinkRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetSinkRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void GetSinkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.logging.v2.GetSinkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sink_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

const char* GetSinkRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string sink_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_sink_name(), ptr, ctx, "google.logging.v2.GetSinkRequest.sink_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetSinkRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.logging.v2.GetSinkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sink_name = 1;
  if (this->sink_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sink_name().data(), static_cast<int>(this->_internal_sink_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.GetSinkRequest.sink_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sink_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.logging.v2.GetSinkRequest)
  return target;
}

size_t GetSinkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.logging.v2.GetSinkRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sink_name = 1;
  if (this->sink_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sink_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSinkRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.logging.v2.GetSinkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSinkRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetSinkRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.logging.v2.GetSinkRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.logging.v2.GetSinkRequest)
    MergeFrom(*source);
  }
}

void GetSinkRequest::MergeFrom(const GetSinkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.logging.v2.GetSinkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sink_name().size() > 0) {
    _internal_set_sink_name(from._internal_sink_name());
  }
}

void GetSinkRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.logging.v2.GetSinkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSinkRequest::CopyFrom(const GetSinkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.logging.v2.GetSinkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSinkRequest::IsInitialized() const {
  return true;
}

void GetSinkRequest::InternalSwap(GetSinkRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sink_name_.Swap(&other->sink_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSinkRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateSinkRequest::InitAsDefaultInstance() {
  ::google::logging::v2::_CreateSinkRequest_default_instance_._instance.get_mutable()->sink_ = const_cast< ::google::logging::v2::LogSink*>(
      ::google::logging::v2::LogSink::internal_default_instance());
}
class CreateSinkRequest::_Internal {
 public:
  static const ::google::logging::v2::LogSink& sink(const CreateSinkRequest* msg);
};

const ::google::logging::v2::LogSink&
CreateSinkRequest::_Internal::sink(const CreateSinkRequest* msg) {
  return *msg->sink_;
}
void CreateSinkRequest::unsafe_arena_set_allocated_sink(
    ::google::logging::v2::LogSink* sink) {
  if (GetArenaNoVirtual() == nullptr) {
    delete sink_;
  }
  sink_ = sink;
  if (sink) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.CreateSinkRequest.sink)
}
CreateSinkRequest::CreateSinkRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.logging.v2.CreateSinkRequest)
}
CreateSinkRequest::CreateSinkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.logging.v2.CreateSinkRequest)
}
CreateSinkRequest::CreateSinkRequest(const CreateSinkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parent().empty()) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_parent(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_sink()) {
    sink_ = new ::google::logging::v2::LogSink(*from.sink_);
  } else {
    sink_ = nullptr;
  }
  unique_writer_identity_ = from.unique_writer_identity_;
  // @@protoc_insertion_point(copy_constructor:google.logging.v2.CreateSinkRequest)
}

void CreateSinkRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateSinkRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base);
  parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sink_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unique_writer_identity_) -
      reinterpret_cast<char*>(&sink_)) + sizeof(unique_writer_identity_));
}

CreateSinkRequest::~CreateSinkRequest() {
  // @@protoc_insertion_point(destructor:google.logging.v2.CreateSinkRequest)
  SharedDtor();
}

void CreateSinkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  parent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sink_;
}

void CreateSinkRequest::ArenaDtor(void* object) {
  CreateSinkRequest* _this = reinterpret_cast< CreateSinkRequest* >(object);
  (void)_this;
}
void CreateSinkRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateSinkRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateSinkRequest& CreateSinkRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateSinkRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void CreateSinkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.logging.v2.CreateSinkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && sink_ != nullptr) {
    delete sink_;
  }
  sink_ = nullptr;
  unique_writer_identity_ = false;
  _internal_metadata_.Clear();
}

const char* CreateSinkRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string parent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_parent(), ptr, ctx, "google.logging.v2.CreateSinkRequest.parent");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.logging.v2.LogSink sink = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sink(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool unique_writer_identity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          unique_writer_identity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateSinkRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.logging.v2.CreateSinkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1;
  if (this->parent().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent().data(), static_cast<int>(this->_internal_parent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.CreateSinkRequest.parent");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_parent(), target);
  }

  // .google.logging.v2.LogSink sink = 2;
  if (this->has_sink()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::sink(this), target, stream);
  }

  // bool unique_writer_identity = 3;
  if (this->unique_writer_identity() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_unique_writer_identity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.logging.v2.CreateSinkRequest)
  return target;
}

size_t CreateSinkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.logging.v2.CreateSinkRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1;
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent());
  }

  // .google.logging.v2.LogSink sink = 2;
  if (this->has_sink()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sink_);
  }

  // bool unique_writer_identity = 3;
  if (this->unique_writer_identity() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateSinkRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.logging.v2.CreateSinkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateSinkRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateSinkRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.logging.v2.CreateSinkRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.logging.v2.CreateSinkRequest)
    MergeFrom(*source);
  }
}

void CreateSinkRequest::MergeFrom(const CreateSinkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.logging.v2.CreateSinkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.parent().size() > 0) {
    _internal_set_parent(from._internal_parent());
  }
  if (from.has_sink()) {
    _internal_mutable_sink()->::google::logging::v2::LogSink::MergeFrom(from._internal_sink());
  }
  if (from.unique_writer_identity() != 0) {
    _internal_set_unique_writer_identity(from._internal_unique_writer_identity());
  }
}

void CreateSinkRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.logging.v2.CreateSinkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateSinkRequest::CopyFrom(const CreateSinkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.logging.v2.CreateSinkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSinkRequest::IsInitialized() const {
  return true;
}

void CreateSinkRequest::InternalSwap(CreateSinkRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  parent_.Swap(&other->parent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sink_, other->sink_);
  swap(unique_writer_identity_, other->unique_writer_identity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateSinkRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateSinkRequest::InitAsDefaultInstance() {
  ::google::logging::v2::_UpdateSinkRequest_default_instance_._instance.get_mutable()->sink_ = const_cast< ::google::logging::v2::LogSink*>(
      ::google::logging::v2::LogSink::internal_default_instance());
  ::google::logging::v2::_UpdateSinkRequest_default_instance_._instance.get_mutable()->update_mask_ = const_cast< PROTOBUF_NAMESPACE_ID::FieldMask*>(
      PROTOBUF_NAMESPACE_ID::FieldMask::internal_default_instance());
}
class UpdateSinkRequest::_Internal {
 public:
  static const ::google::logging::v2::LogSink& sink(const UpdateSinkRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::FieldMask& update_mask(const UpdateSinkRequest* msg);
};

const ::google::logging::v2::LogSink&
UpdateSinkRequest::_Internal::sink(const UpdateSinkRequest* msg) {
  return *msg->sink_;
}
const PROTOBUF_NAMESPACE_ID::FieldMask&
UpdateSinkRequest::_Internal::update_mask(const UpdateSinkRequest* msg) {
  return *msg->update_mask_;
}
void UpdateSinkRequest::unsafe_arena_set_allocated_sink(
    ::google::logging::v2::LogSink* sink) {
  if (GetArenaNoVirtual() == nullptr) {
    delete sink_;
  }
  sink_ = sink;
  if (sink) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.UpdateSinkRequest.sink)
}
void UpdateSinkRequest::unsafe_arena_set_allocated_update_mask(
    PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaNoVirtual() == nullptr) {
    delete update_mask_;
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.UpdateSinkRequest.update_mask)
}
void UpdateSinkRequest::clear_update_mask() {
  if (GetArenaNoVirtual() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
}
UpdateSinkRequest::UpdateSinkRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.logging.v2.UpdateSinkRequest)
}
UpdateSinkRequest::UpdateSinkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.logging.v2.UpdateSinkRequest)
}
UpdateSinkRequest::UpdateSinkRequest(const UpdateSinkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sink_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sink_name().empty()) {
    sink_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sink_name(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_sink()) {
    sink_ = new ::google::logging::v2::LogSink(*from.sink_);
  } else {
    sink_ = nullptr;
  }
  if (from._internal_has_update_mask()) {
    update_mask_ = new PROTOBUF_NAMESPACE_ID::FieldMask(*from.update_mask_);
  } else {
    update_mask_ = nullptr;
  }
  unique_writer_identity_ = from.unique_writer_identity_;
  // @@protoc_insertion_point(copy_constructor:google.logging.v2.UpdateSinkRequest)
}

void UpdateSinkRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateSinkRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base);
  sink_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sink_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&unique_writer_identity_) -
      reinterpret_cast<char*>(&sink_)) + sizeof(unique_writer_identity_));
}

UpdateSinkRequest::~UpdateSinkRequest() {
  // @@protoc_insertion_point(destructor:google.logging.v2.UpdateSinkRequest)
  SharedDtor();
}

void UpdateSinkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  sink_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sink_;
  if (this != internal_default_instance()) delete update_mask_;
}

void UpdateSinkRequest::ArenaDtor(void* object) {
  UpdateSinkRequest* _this = reinterpret_cast< UpdateSinkRequest* >(object);
  (void)_this;
}
void UpdateSinkRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateSinkRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateSinkRequest& UpdateSinkRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateSinkRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void UpdateSinkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.logging.v2.UpdateSinkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sink_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && sink_ != nullptr) {
    delete sink_;
  }
  sink_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
  unique_writer_identity_ = false;
  _internal_metadata_.Clear();
}

const char* UpdateSinkRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string sink_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_sink_name(), ptr, ctx, "google.logging.v2.UpdateSinkRequest.sink_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.logging.v2.LogSink sink = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sink(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool unique_writer_identity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          unique_writer_identity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FieldMask update_mask = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_mask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateSinkRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.logging.v2.UpdateSinkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sink_name = 1;
  if (this->sink_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sink_name().data(), static_cast<int>(this->_internal_sink_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.UpdateSinkRequest.sink_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sink_name(), target);
  }

  // .google.logging.v2.LogSink sink = 2;
  if (this->has_sink()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::sink(this), target, stream);
  }

  // bool unique_writer_identity = 3;
  if (this->unique_writer_identity() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_unique_writer_identity(), target);
  }

  // .google.protobuf.FieldMask update_mask = 4;
  if (this->has_update_mask()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::update_mask(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.logging.v2.UpdateSinkRequest)
  return target;
}

size_t UpdateSinkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.logging.v2.UpdateSinkRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sink_name = 1;
  if (this->sink_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sink_name());
  }

  // .google.logging.v2.LogSink sink = 2;
  if (this->has_sink()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sink_);
  }

  // .google.protobuf.FieldMask update_mask = 4;
  if (this->has_update_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_mask_);
  }

  // bool unique_writer_identity = 3;
  if (this->unique_writer_identity() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateSinkRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.logging.v2.UpdateSinkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateSinkRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateSinkRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.logging.v2.UpdateSinkRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.logging.v2.UpdateSinkRequest)
    MergeFrom(*source);
  }
}

void UpdateSinkRequest::MergeFrom(const UpdateSinkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.logging.v2.UpdateSinkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sink_name().size() > 0) {
    _internal_set_sink_name(from._internal_sink_name());
  }
  if (from.has_sink()) {
    _internal_mutable_sink()->::google::logging::v2::LogSink::MergeFrom(from._internal_sink());
  }
  if (from.has_update_mask()) {
    _internal_mutable_update_mask()->PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(from._internal_update_mask());
  }
  if (from.unique_writer_identity() != 0) {
    _internal_set_unique_writer_identity(from._internal_unique_writer_identity());
  }
}

void UpdateSinkRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.logging.v2.UpdateSinkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateSinkRequest::CopyFrom(const UpdateSinkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.logging.v2.UpdateSinkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSinkRequest::IsInitialized() const {
  return true;
}

void UpdateSinkRequest::InternalSwap(UpdateSinkRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sink_name_.Swap(&other->sink_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sink_, other->sink_);
  swap(update_mask_, other->update_mask_);
  swap(unique_writer_identity_, other->unique_writer_identity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateSinkRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteSinkRequest::InitAsDefaultInstance() {
}
class DeleteSinkRequest::_Internal {
 public:
};

DeleteSinkRequest::DeleteSinkRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.logging.v2.DeleteSinkRequest)
}
DeleteSinkRequest::DeleteSinkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.logging.v2.DeleteSinkRequest)
}
DeleteSinkRequest::DeleteSinkRequest(const DeleteSinkRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sink_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sink_name().empty()) {
    sink_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sink_name(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.logging.v2.DeleteSinkRequest)
}

void DeleteSinkRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteSinkRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base);
  sink_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteSinkRequest::~DeleteSinkRequest() {
  // @@protoc_insertion_point(destructor:google.logging.v2.DeleteSinkRequest)
  SharedDtor();
}

void DeleteSinkRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  sink_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteSinkRequest::ArenaDtor(void* object) {
  DeleteSinkRequest* _this = reinterpret_cast< DeleteSinkRequest* >(object);
  (void)_this;
}
void DeleteSinkRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteSinkRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteSinkRequest& DeleteSinkRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteSinkRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void DeleteSinkRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.logging.v2.DeleteSinkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sink_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

const char* DeleteSinkRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string sink_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_sink_name(), ptr, ctx, "google.logging.v2.DeleteSinkRequest.sink_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteSinkRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.logging.v2.DeleteSinkRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string sink_name = 1;
  if (this->sink_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sink_name().data(), static_cast<int>(this->_internal_sink_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.DeleteSinkRequest.sink_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_sink_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.logging.v2.DeleteSinkRequest)
  return target;
}

size_t DeleteSinkRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.logging.v2.DeleteSinkRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string sink_name = 1;
  if (this->sink_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sink_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteSinkRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.logging.v2.DeleteSinkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteSinkRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteSinkRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.logging.v2.DeleteSinkRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.logging.v2.DeleteSinkRequest)
    MergeFrom(*source);
  }
}

void DeleteSinkRequest::MergeFrom(const DeleteSinkRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.logging.v2.DeleteSinkRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sink_name().size() > 0) {
    _internal_set_sink_name(from._internal_sink_name());
  }
}

void DeleteSinkRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.logging.v2.DeleteSinkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteSinkRequest::CopyFrom(const DeleteSinkRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.logging.v2.DeleteSinkRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSinkRequest::IsInitialized() const {
  return true;
}

void DeleteSinkRequest::InternalSwap(DeleteSinkRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  sink_name_.Swap(&other->sink_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteSinkRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogExclusion::InitAsDefaultInstance() {
  ::google::logging::v2::_LogExclusion_default_instance_._instance.get_mutable()->create_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::google::logging::v2::_LogExclusion_default_instance_._instance.get_mutable()->update_time_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
}
class LogExclusion::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& create_time(const LogExclusion* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& update_time(const LogExclusion* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
LogExclusion::_Internal::create_time(const LogExclusion* msg) {
  return *msg->create_time_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
LogExclusion::_Internal::update_time(const LogExclusion* msg) {
  return *msg->update_time_;
}
void LogExclusion::unsafe_arena_set_allocated_create_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  if (GetArenaNoVirtual() == nullptr) {
    delete create_time_;
  }
  create_time_ = create_time;
  if (create_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogExclusion.create_time)
}
void LogExclusion::clear_create_time() {
  if (GetArenaNoVirtual() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
}
void LogExclusion::unsafe_arena_set_allocated_update_time(
    PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  if (GetArenaNoVirtual() == nullptr) {
    delete update_time_;
  }
  update_time_ = update_time;
  if (update_time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogExclusion.update_time)
}
void LogExclusion::clear_update_time() {
  if (GetArenaNoVirtual() == nullptr && update_time_ != nullptr) {
    delete update_time_;
  }
  update_time_ = nullptr;
}
LogExclusion::LogExclusion()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.logging.v2.LogExclusion)
}
LogExclusion::LogExclusion(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.logging.v2.LogExclusion)
}
LogExclusion::LogExclusion(const LogExclusion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArenaNoVirtual());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_description(),
      GetArenaNoVirtual());
  }
  filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filter().empty()) {
    filter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_filter(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_create_time()) {
    create_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.create_time_);
  } else {
    create_time_ = nullptr;
  }
  if (from._internal_has_update_time()) {
    update_time_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.update_time_);
  } else {
    update_time_ = nullptr;
  }
  disabled_ = from.disabled_;
  // @@protoc_insertion_point(copy_constructor:google.logging.v2.LogExclusion)
}

void LogExclusion::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogExclusion_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&create_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&disabled_) -
      reinterpret_cast<char*>(&create_time_)) + sizeof(disabled_));
}

LogExclusion::~LogExclusion() {
  // @@protoc_insertion_point(destructor:google.logging.v2.LogExclusion)
  SharedDtor();
}

void LogExclusion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  filter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete create_time_;
  if (this != internal_default_instance()) delete update_time_;
}

void LogExclusion::ArenaDtor(void* object) {
  LogExclusion* _this = reinterpret_cast< LogExclusion* >(object);
  (void)_this;
}
void LogExclusion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogExclusion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogExclusion& LogExclusion::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogExclusion_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void LogExclusion::Clear() {
// @@protoc_insertion_point(message_clear_start:google.logging.v2.LogExclusion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  filter_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && create_time_ != nullptr) {
    delete create_time_;
  }
  create_time_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && update_time_ != nullptr) {
    delete update_time_;
  }
  update_time_ = nullptr;
  disabled_ = false;
  _internal_metadata_.Clear();
}

const char* LogExclusion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "google.logging.v2.LogExclusion.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_description(), ptr, ctx, "google.logging.v2.LogExclusion.description");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string filter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_filter(), ptr, ctx, "google.logging.v2.LogExclusion.filter");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool disabled = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          disabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp create_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp update_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_time(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogExclusion::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.logging.v2.LogExclusion)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogExclusion.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogExclusion.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // string filter = 3;
  if (this->filter().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filter().data(), static_cast<int>(this->_internal_filter().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogExclusion.filter");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_filter(), target);
  }

  // bool disabled = 4;
  if (this->disabled() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_disabled(), target);
  }

  // .google.protobuf.Timestamp create_time = 5;
  if (this->has_create_time()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::create_time(this), target, stream);
  }

  // .google.protobuf.Timestamp update_time = 6;
  if (this->has_update_time()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::update_time(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.logging.v2.LogExclusion)
  return target;
}

size_t LogExclusion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.logging.v2.LogExclusion)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string filter = 3;
  if (this->filter().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filter());
  }

  // .google.protobuf.Timestamp create_time = 5;
  if (this->has_create_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *create_time_);
  }

  // .google.protobuf.Timestamp update_time = 6;
  if (this->has_update_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_time_);
  }

  // bool disabled = 4;
  if (this->disabled() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogExclusion::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.logging.v2.LogExclusion)
  GOOGLE_DCHECK_NE(&from, this);
  const LogExclusion* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogExclusion>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.logging.v2.LogExclusion)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.logging.v2.LogExclusion)
    MergeFrom(*source);
  }
}

void LogExclusion::MergeFrom(const LogExclusion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.logging.v2.LogExclusion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.filter().size() > 0) {
    _internal_set_filter(from._internal_filter());
  }
  if (from.has_create_time()) {
    _internal_mutable_create_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_create_time());
  }
  if (from.has_update_time()) {
    _internal_mutable_update_time()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_update_time());
  }
  if (from.disabled() != 0) {
    _internal_set_disabled(from._internal_disabled());
  }
}

void LogExclusion::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.logging.v2.LogExclusion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogExclusion::CopyFrom(const LogExclusion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.logging.v2.LogExclusion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogExclusion::IsInitialized() const {
  return true;
}

void LogExclusion::InternalSwap(LogExclusion* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  filter_.Swap(&other->filter_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(create_time_, other->create_time_);
  swap(update_time_, other->update_time_);
  swap(disabled_, other->disabled_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogExclusion::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListExclusionsRequest::InitAsDefaultInstance() {
}
class ListExclusionsRequest::_Internal {
 public:
};

ListExclusionsRequest::ListExclusionsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.logging.v2.ListExclusionsRequest)
}
ListExclusionsRequest::ListExclusionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.logging.v2.ListExclusionsRequest)
}
ListExclusionsRequest::ListExclusionsRequest(const ListExclusionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parent().empty()) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_parent(),
      GetArenaNoVirtual());
  }
  page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_page_token().empty()) {
    page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_page_token(),
      GetArenaNoVirtual());
  }
  page_size_ = from.page_size_;
  // @@protoc_insertion_point(copy_constructor:google.logging.v2.ListExclusionsRequest)
}

void ListExclusionsRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListExclusionsRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base);
  parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_size_ = 0;
}

ListExclusionsRequest::~ListExclusionsRequest() {
  // @@protoc_insertion_point(destructor:google.logging.v2.ListExclusionsRequest)
  SharedDtor();
}

void ListExclusionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  parent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListExclusionsRequest::ArenaDtor(void* object) {
  ListExclusionsRequest* _this = reinterpret_cast< ListExclusionsRequest* >(object);
  (void)_this;
}
void ListExclusionsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListExclusionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListExclusionsRequest& ListExclusionsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListExclusionsRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ListExclusionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.logging.v2.ListExclusionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  page_size_ = 0;
  _internal_metadata_.Clear();
}

const char* ListExclusionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string parent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_parent(), ptr, ctx, "google.logging.v2.ListExclusionsRequest.parent");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_page_token(), ptr, ctx, "google.logging.v2.ListExclusionsRequest.page_token");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 page_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListExclusionsRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.logging.v2.ListExclusionsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1;
  if (this->parent().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent().data(), static_cast<int>(this->_internal_parent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.ListExclusionsRequest.parent");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_parent(), target);
  }

  // string page_token = 2;
  if (this->page_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_page_token().data(), static_cast<int>(this->_internal_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.ListExclusionsRequest.page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_page_token(), target);
  }

  // int32 page_size = 3;
  if (this->page_size() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_page_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.logging.v2.ListExclusionsRequest)
  return target;
}

size_t ListExclusionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.logging.v2.ListExclusionsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1;
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent());
  }

  // string page_token = 2;
  if (this->page_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_page_token());
  }

  // int32 page_size = 3;
  if (this->page_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_page_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListExclusionsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.logging.v2.ListExclusionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const ListExclusionsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListExclusionsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.logging.v2.ListExclusionsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.logging.v2.ListExclusionsRequest)
    MergeFrom(*source);
  }
}

void ListExclusionsRequest::MergeFrom(const ListExclusionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.logging.v2.ListExclusionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.parent().size() > 0) {
    _internal_set_parent(from._internal_parent());
  }
  if (from.page_token().size() > 0) {
    _internal_set_page_token(from._internal_page_token());
  }
  if (from.page_size() != 0) {
    _internal_set_page_size(from._internal_page_size());
  }
}

void ListExclusionsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.logging.v2.ListExclusionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListExclusionsRequest::CopyFrom(const ListExclusionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.logging.v2.ListExclusionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListExclusionsRequest::IsInitialized() const {
  return true;
}

void ListExclusionsRequest::InternalSwap(ListExclusionsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  parent_.Swap(&other->parent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  page_token_.Swap(&other->page_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(page_size_, other->page_size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListExclusionsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ListExclusionsResponse::InitAsDefaultInstance() {
}
class ListExclusionsResponse::_Internal {
 public:
};

ListExclusionsResponse::ListExclusionsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.logging.v2.ListExclusionsResponse)
}
ListExclusionsResponse::ListExclusionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  exclusions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.logging.v2.ListExclusionsResponse)
}
ListExclusionsResponse::ListExclusionsResponse(const ListExclusionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      exclusions_(from.exclusions_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  next_page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_next_page_token().empty()) {
    next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_next_page_token(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.logging.v2.ListExclusionsResponse)
}

void ListExclusionsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ListExclusionsResponse_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base);
  next_page_token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListExclusionsResponse::~ListExclusionsResponse() {
  // @@protoc_insertion_point(destructor:google.logging.v2.ListExclusionsResponse)
  SharedDtor();
}

void ListExclusionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  next_page_token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListExclusionsResponse::ArenaDtor(void* object) {
  ListExclusionsResponse* _this = reinterpret_cast< ListExclusionsResponse* >(object);
  (void)_this;
}
void ListExclusionsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListExclusionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ListExclusionsResponse& ListExclusionsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ListExclusionsResponse_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void ListExclusionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:google.logging.v2.ListExclusionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  exclusions_.Clear();
  next_page_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

const char* ListExclusionsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .google.logging.v2.LogExclusion exclusions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_exclusions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string next_page_token = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_next_page_token(), ptr, ctx, "google.logging.v2.ListExclusionsResponse.next_page_token");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListExclusionsResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.logging.v2.ListExclusionsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.logging.v2.LogExclusion exclusions = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_exclusions_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_exclusions(i), target, stream);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_next_page_token().data(), static_cast<int>(this->_internal_next_page_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.ListExclusionsResponse.next_page_token");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_next_page_token(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.logging.v2.ListExclusionsResponse)
  return target;
}

size_t ListExclusionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.logging.v2.ListExclusionsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.logging.v2.LogExclusion exclusions = 1;
  total_size += 1UL * this->_internal_exclusions_size();
  for (const auto& msg : this->exclusions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_page_token = 2;
  if (this->next_page_token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_next_page_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListExclusionsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.logging.v2.ListExclusionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ListExclusionsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ListExclusionsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.logging.v2.ListExclusionsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.logging.v2.ListExclusionsResponse)
    MergeFrom(*source);
  }
}

void ListExclusionsResponse::MergeFrom(const ListExclusionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.logging.v2.ListExclusionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  exclusions_.MergeFrom(from.exclusions_);
  if (from.next_page_token().size() > 0) {
    _internal_set_next_page_token(from._internal_next_page_token());
  }
}

void ListExclusionsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.logging.v2.ListExclusionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ListExclusionsResponse::CopyFrom(const ListExclusionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.logging.v2.ListExclusionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListExclusionsResponse::IsInitialized() const {
  return true;
}

void ListExclusionsResponse::InternalSwap(ListExclusionsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  exclusions_.InternalSwap(&other->exclusions_);
  next_page_token_.Swap(&other->next_page_token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ListExclusionsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetExclusionRequest::InitAsDefaultInstance() {
}
class GetExclusionRequest::_Internal {
 public:
};

GetExclusionRequest::GetExclusionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.logging.v2.GetExclusionRequest)
}
GetExclusionRequest::GetExclusionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.logging.v2.GetExclusionRequest)
}
GetExclusionRequest::GetExclusionRequest(const GetExclusionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.logging.v2.GetExclusionRequest)
}

void GetExclusionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetExclusionRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetExclusionRequest::~GetExclusionRequest() {
  // @@protoc_insertion_point(destructor:google.logging.v2.GetExclusionRequest)
  SharedDtor();
}

void GetExclusionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetExclusionRequest::ArenaDtor(void* object) {
  GetExclusionRequest* _this = reinterpret_cast< GetExclusionRequest* >(object);
  (void)_this;
}
void GetExclusionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetExclusionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetExclusionRequest& GetExclusionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetExclusionRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void GetExclusionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.logging.v2.GetExclusionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

const char* GetExclusionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "google.logging.v2.GetExclusionRequest.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetExclusionRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.logging.v2.GetExclusionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.GetExclusionRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.logging.v2.GetExclusionRequest)
  return target;
}

size_t GetExclusionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.logging.v2.GetExclusionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetExclusionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.logging.v2.GetExclusionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetExclusionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetExclusionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.logging.v2.GetExclusionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.logging.v2.GetExclusionRequest)
    MergeFrom(*source);
  }
}

void GetExclusionRequest::MergeFrom(const GetExclusionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.logging.v2.GetExclusionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void GetExclusionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.logging.v2.GetExclusionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetExclusionRequest::CopyFrom(const GetExclusionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.logging.v2.GetExclusionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetExclusionRequest::IsInitialized() const {
  return true;
}

void GetExclusionRequest::InternalSwap(GetExclusionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata GetExclusionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CreateExclusionRequest::InitAsDefaultInstance() {
  ::google::logging::v2::_CreateExclusionRequest_default_instance_._instance.get_mutable()->exclusion_ = const_cast< ::google::logging::v2::LogExclusion*>(
      ::google::logging::v2::LogExclusion::internal_default_instance());
}
class CreateExclusionRequest::_Internal {
 public:
  static const ::google::logging::v2::LogExclusion& exclusion(const CreateExclusionRequest* msg);
};

const ::google::logging::v2::LogExclusion&
CreateExclusionRequest::_Internal::exclusion(const CreateExclusionRequest* msg) {
  return *msg->exclusion_;
}
void CreateExclusionRequest::unsafe_arena_set_allocated_exclusion(
    ::google::logging::v2::LogExclusion* exclusion) {
  if (GetArenaNoVirtual() == nullptr) {
    delete exclusion_;
  }
  exclusion_ = exclusion;
  if (exclusion) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.CreateExclusionRequest.exclusion)
}
CreateExclusionRequest::CreateExclusionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.logging.v2.CreateExclusionRequest)
}
CreateExclusionRequest::CreateExclusionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.logging.v2.CreateExclusionRequest)
}
CreateExclusionRequest::CreateExclusionRequest(const CreateExclusionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_parent().empty()) {
    parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_parent(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_exclusion()) {
    exclusion_ = new ::google::logging::v2::LogExclusion(*from.exclusion_);
  } else {
    exclusion_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.logging.v2.CreateExclusionRequest)
}

void CreateExclusionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateExclusionRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base);
  parent_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  exclusion_ = nullptr;
}

CreateExclusionRequest::~CreateExclusionRequest() {
  // @@protoc_insertion_point(destructor:google.logging.v2.CreateExclusionRequest)
  SharedDtor();
}

void CreateExclusionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  parent_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete exclusion_;
}

void CreateExclusionRequest::ArenaDtor(void* object) {
  CreateExclusionRequest* _this = reinterpret_cast< CreateExclusionRequest* >(object);
  (void)_this;
}
void CreateExclusionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateExclusionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateExclusionRequest& CreateExclusionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateExclusionRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void CreateExclusionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.logging.v2.CreateExclusionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parent_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && exclusion_ != nullptr) {
    delete exclusion_;
  }
  exclusion_ = nullptr;
  _internal_metadata_.Clear();
}

const char* CreateExclusionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string parent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_parent(), ptr, ctx, "google.logging.v2.CreateExclusionRequest.parent");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.logging.v2.LogExclusion exclusion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_exclusion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateExclusionRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.logging.v2.CreateExclusionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1;
  if (this->parent().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_parent().data(), static_cast<int>(this->_internal_parent().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.CreateExclusionRequest.parent");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_parent(), target);
  }

  // .google.logging.v2.LogExclusion exclusion = 2;
  if (this->has_exclusion()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::exclusion(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.logging.v2.CreateExclusionRequest)
  return target;
}

size_t CreateExclusionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.logging.v2.CreateExclusionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string parent = 1;
  if (this->parent().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_parent());
  }

  // .google.logging.v2.LogExclusion exclusion = 2;
  if (this->has_exclusion()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *exclusion_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateExclusionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.logging.v2.CreateExclusionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateExclusionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateExclusionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.logging.v2.CreateExclusionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.logging.v2.CreateExclusionRequest)
    MergeFrom(*source);
  }
}

void CreateExclusionRequest::MergeFrom(const CreateExclusionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.logging.v2.CreateExclusionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.parent().size() > 0) {
    _internal_set_parent(from._internal_parent());
  }
  if (from.has_exclusion()) {
    _internal_mutable_exclusion()->::google::logging::v2::LogExclusion::MergeFrom(from._internal_exclusion());
  }
}

void CreateExclusionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.logging.v2.CreateExclusionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateExclusionRequest::CopyFrom(const CreateExclusionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.logging.v2.CreateExclusionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateExclusionRequest::IsInitialized() const {
  return true;
}

void CreateExclusionRequest::InternalSwap(CreateExclusionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  parent_.Swap(&other->parent_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(exclusion_, other->exclusion_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateExclusionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpdateExclusionRequest::InitAsDefaultInstance() {
  ::google::logging::v2::_UpdateExclusionRequest_default_instance_._instance.get_mutable()->exclusion_ = const_cast< ::google::logging::v2::LogExclusion*>(
      ::google::logging::v2::LogExclusion::internal_default_instance());
  ::google::logging::v2::_UpdateExclusionRequest_default_instance_._instance.get_mutable()->update_mask_ = const_cast< PROTOBUF_NAMESPACE_ID::FieldMask*>(
      PROTOBUF_NAMESPACE_ID::FieldMask::internal_default_instance());
}
class UpdateExclusionRequest::_Internal {
 public:
  static const ::google::logging::v2::LogExclusion& exclusion(const UpdateExclusionRequest* msg);
  static const PROTOBUF_NAMESPACE_ID::FieldMask& update_mask(const UpdateExclusionRequest* msg);
};

const ::google::logging::v2::LogExclusion&
UpdateExclusionRequest::_Internal::exclusion(const UpdateExclusionRequest* msg) {
  return *msg->exclusion_;
}
const PROTOBUF_NAMESPACE_ID::FieldMask&
UpdateExclusionRequest::_Internal::update_mask(const UpdateExclusionRequest* msg) {
  return *msg->update_mask_;
}
void UpdateExclusionRequest::unsafe_arena_set_allocated_exclusion(
    ::google::logging::v2::LogExclusion* exclusion) {
  if (GetArenaNoVirtual() == nullptr) {
    delete exclusion_;
  }
  exclusion_ = exclusion;
  if (exclusion) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.UpdateExclusionRequest.exclusion)
}
void UpdateExclusionRequest::unsafe_arena_set_allocated_update_mask(
    PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  if (GetArenaNoVirtual() == nullptr) {
    delete update_mask_;
  }
  update_mask_ = update_mask;
  if (update_mask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.UpdateExclusionRequest.update_mask)
}
void UpdateExclusionRequest::clear_update_mask() {
  if (GetArenaNoVirtual() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
}
UpdateExclusionRequest::UpdateExclusionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.logging.v2.UpdateExclusionRequest)
}
UpdateExclusionRequest::UpdateExclusionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.logging.v2.UpdateExclusionRequest)
}
UpdateExclusionRequest::UpdateExclusionRequest(const UpdateExclusionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_exclusion()) {
    exclusion_ = new ::google::logging::v2::LogExclusion(*from.exclusion_);
  } else {
    exclusion_ = nullptr;
  }
  if (from._internal_has_update_mask()) {
    update_mask_ = new PROTOBUF_NAMESPACE_ID::FieldMask(*from.update_mask_);
  } else {
    update_mask_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:google.logging.v2.UpdateExclusionRequest)
}

void UpdateExclusionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateExclusionRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&exclusion_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&update_mask_) -
      reinterpret_cast<char*>(&exclusion_)) + sizeof(update_mask_));
}

UpdateExclusionRequest::~UpdateExclusionRequest() {
  // @@protoc_insertion_point(destructor:google.logging.v2.UpdateExclusionRequest)
  SharedDtor();
}

void UpdateExclusionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete exclusion_;
  if (this != internal_default_instance()) delete update_mask_;
}

void UpdateExclusionRequest::ArenaDtor(void* object) {
  UpdateExclusionRequest* _this = reinterpret_cast< UpdateExclusionRequest* >(object);
  (void)_this;
}
void UpdateExclusionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateExclusionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateExclusionRequest& UpdateExclusionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateExclusionRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void UpdateExclusionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.logging.v2.UpdateExclusionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && exclusion_ != nullptr) {
    delete exclusion_;
  }
  exclusion_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && update_mask_ != nullptr) {
    delete update_mask_;
  }
  update_mask_ = nullptr;
  _internal_metadata_.Clear();
}

const char* UpdateExclusionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "google.logging.v2.UpdateExclusionRequest.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.logging.v2.LogExclusion exclusion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_exclusion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.FieldMask update_mask = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_mask(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateExclusionRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.logging.v2.UpdateExclusionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.UpdateExclusionRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .google.logging.v2.LogExclusion exclusion = 2;
  if (this->has_exclusion()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::exclusion(this), target, stream);
  }

  // .google.protobuf.FieldMask update_mask = 3;
  if (this->has_update_mask()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::update_mask(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.logging.v2.UpdateExclusionRequest)
  return target;
}

size_t UpdateExclusionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.logging.v2.UpdateExclusionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.logging.v2.LogExclusion exclusion = 2;
  if (this->has_exclusion()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *exclusion_);
  }

  // .google.protobuf.FieldMask update_mask = 3;
  if (this->has_update_mask()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_mask_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateExclusionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.logging.v2.UpdateExclusionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateExclusionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateExclusionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.logging.v2.UpdateExclusionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.logging.v2.UpdateExclusionRequest)
    MergeFrom(*source);
  }
}

void UpdateExclusionRequest::MergeFrom(const UpdateExclusionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.logging.v2.UpdateExclusionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_exclusion()) {
    _internal_mutable_exclusion()->::google::logging::v2::LogExclusion::MergeFrom(from._internal_exclusion());
  }
  if (from.has_update_mask()) {
    _internal_mutable_update_mask()->PROTOBUF_NAMESPACE_ID::FieldMask::MergeFrom(from._internal_update_mask());
  }
}

void UpdateExclusionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.logging.v2.UpdateExclusionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateExclusionRequest::CopyFrom(const UpdateExclusionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.logging.v2.UpdateExclusionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateExclusionRequest::IsInitialized() const {
  return true;
}

void UpdateExclusionRequest::InternalSwap(UpdateExclusionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(exclusion_, other->exclusion_);
  swap(update_mask_, other->update_mask_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateExclusionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeleteExclusionRequest::InitAsDefaultInstance() {
}
class DeleteExclusionRequest::_Internal {
 public:
};

DeleteExclusionRequest::DeleteExclusionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.logging.v2.DeleteExclusionRequest)
}
DeleteExclusionRequest::DeleteExclusionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.logging.v2.DeleteExclusionRequest)
}
DeleteExclusionRequest::DeleteExclusionRequest(const DeleteExclusionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(copy_constructor:google.logging.v2.DeleteExclusionRequest)
}

void DeleteExclusionRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteExclusionRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteExclusionRequest::~DeleteExclusionRequest() {
  // @@protoc_insertion_point(destructor:google.logging.v2.DeleteExclusionRequest)
  SharedDtor();
}

void DeleteExclusionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteExclusionRequest::ArenaDtor(void* object) {
  DeleteExclusionRequest* _this = reinterpret_cast< DeleteExclusionRequest* >(object);
  (void)_this;
}
void DeleteExclusionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteExclusionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteExclusionRequest& DeleteExclusionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteExclusionRequest_google_2flogging_2fv2_2flogging_5fconfig_2eproto.base);
  return *internal_default_instance();
}


void DeleteExclusionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:google.logging.v2.DeleteExclusionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  _internal_metadata_.Clear();
}

const char* DeleteExclusionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "google.logging.v2.DeleteExclusionRequest.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteExclusionRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.logging.v2.DeleteExclusionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.DeleteExclusionRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.logging.v2.DeleteExclusionRequest)
  return target;
}

size_t DeleteExclusionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.logging.v2.DeleteExclusionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteExclusionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.logging.v2.DeleteExclusionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteExclusionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteExclusionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.logging.v2.DeleteExclusionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.logging.v2.DeleteExclusionRequest)
    MergeFrom(*source);
  }
}

void DeleteExclusionRequest::MergeFrom(const DeleteExclusionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.logging.v2.DeleteExclusionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {
    _internal_set_name(from._internal_name());
  }
}

void DeleteExclusionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.logging.v2.DeleteExclusionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteExclusionRequest::CopyFrom(const DeleteExclusionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.logging.v2.DeleteExclusionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteExclusionRequest::IsInitialized() const {
  return true;
}

void DeleteExclusionRequest::InternalSwap(DeleteExclusionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteExclusionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace logging
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::google::logging::v2::LogSink* Arena::CreateMaybeMessage< ::google::logging::v2::LogSink >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::logging::v2::LogSink >(arena);
}
template<> PROTOBUF_NOINLINE ::google::logging::v2::BigQueryOptions* Arena::CreateMaybeMessage< ::google::logging::v2::BigQueryOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::logging::v2::BigQueryOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::google::logging::v2::ListSinksRequest* Arena::CreateMaybeMessage< ::google::logging::v2::ListSinksRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::logging::v2::ListSinksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::logging::v2::ListSinksResponse* Arena::CreateMaybeMessage< ::google::logging::v2::ListSinksResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::logging::v2::ListSinksResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::logging::v2::GetSinkRequest* Arena::CreateMaybeMessage< ::google::logging::v2::GetSinkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::logging::v2::GetSinkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::logging::v2::CreateSinkRequest* Arena::CreateMaybeMessage< ::google::logging::v2::CreateSinkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::logging::v2::CreateSinkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::logging::v2::UpdateSinkRequest* Arena::CreateMaybeMessage< ::google::logging::v2::UpdateSinkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::logging::v2::UpdateSinkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::logging::v2::DeleteSinkRequest* Arena::CreateMaybeMessage< ::google::logging::v2::DeleteSinkRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::logging::v2::DeleteSinkRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::logging::v2::LogExclusion* Arena::CreateMaybeMessage< ::google::logging::v2::LogExclusion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::logging::v2::LogExclusion >(arena);
}
template<> PROTOBUF_NOINLINE ::google::logging::v2::ListExclusionsRequest* Arena::CreateMaybeMessage< ::google::logging::v2::ListExclusionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::logging::v2::ListExclusionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::logging::v2::ListExclusionsResponse* Arena::CreateMaybeMessage< ::google::logging::v2::ListExclusionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::logging::v2::ListExclusionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::logging::v2::GetExclusionRequest* Arena::CreateMaybeMessage< ::google::logging::v2::GetExclusionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::logging::v2::GetExclusionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::logging::v2::CreateExclusionRequest* Arena::CreateMaybeMessage< ::google::logging::v2::CreateExclusionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::logging::v2::CreateExclusionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::logging::v2::UpdateExclusionRequest* Arena::CreateMaybeMessage< ::google::logging::v2::UpdateExclusionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::logging::v2::UpdateExclusionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::google::logging::v2::DeleteExclusionRequest* Arena::CreateMaybeMessage< ::google::logging::v2::DeleteExclusionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::logging::v2::DeleteExclusionRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
