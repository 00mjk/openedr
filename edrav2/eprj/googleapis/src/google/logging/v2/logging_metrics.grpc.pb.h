// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/logging/v2/logging_metrics.proto
// Original file comments:
// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
//
#ifndef GRPC_google_2flogging_2fv2_2flogging_5fmetrics_2eproto__INCLUDED
#define GRPC_google_2flogging_2fv2_2flogging_5fmetrics_2eproto__INCLUDED

#include "google/logging/v2/logging_metrics.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace google {
namespace logging {
namespace v2 {

// Service for configuring logs-based metrics.
class MetricsServiceV2 final {
 public:
  static constexpr char const* service_full_name() {
    return "google.logging.v2.MetricsServiceV2";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Lists logs-based metrics.
    virtual ::grpc::Status ListLogMetrics(::grpc::ClientContext* context, const ::google::logging::v2::ListLogMetricsRequest& request, ::google::logging::v2::ListLogMetricsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::ListLogMetricsResponse>> AsyncListLogMetrics(::grpc::ClientContext* context, const ::google::logging::v2::ListLogMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::ListLogMetricsResponse>>(AsyncListLogMetricsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::ListLogMetricsResponse>> PrepareAsyncListLogMetrics(::grpc::ClientContext* context, const ::google::logging::v2::ListLogMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::ListLogMetricsResponse>>(PrepareAsyncListLogMetricsRaw(context, request, cq));
    }
    // Gets a logs-based metric.
    virtual ::grpc::Status GetLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::GetLogMetricRequest& request, ::google::logging::v2::LogMetric* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogMetric>> AsyncGetLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::GetLogMetricRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogMetric>>(AsyncGetLogMetricRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogMetric>> PrepareAsyncGetLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::GetLogMetricRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogMetric>>(PrepareAsyncGetLogMetricRaw(context, request, cq));
    }
    // Creates a logs-based metric.
    virtual ::grpc::Status CreateLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::CreateLogMetricRequest& request, ::google::logging::v2::LogMetric* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogMetric>> AsyncCreateLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::CreateLogMetricRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogMetric>>(AsyncCreateLogMetricRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogMetric>> PrepareAsyncCreateLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::CreateLogMetricRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogMetric>>(PrepareAsyncCreateLogMetricRaw(context, request, cq));
    }
    // Creates or updates a logs-based metric.
    virtual ::grpc::Status UpdateLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::UpdateLogMetricRequest& request, ::google::logging::v2::LogMetric* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogMetric>> AsyncUpdateLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::UpdateLogMetricRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogMetric>>(AsyncUpdateLogMetricRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogMetric>> PrepareAsyncUpdateLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::UpdateLogMetricRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogMetric>>(PrepareAsyncUpdateLogMetricRaw(context, request, cq));
    }
    // Deletes a logs-based metric.
    virtual ::grpc::Status DeleteLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::DeleteLogMetricRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncDeleteLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::DeleteLogMetricRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncDeleteLogMetricRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncDeleteLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::DeleteLogMetricRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncDeleteLogMetricRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Lists logs-based metrics.
      virtual void ListLogMetrics(::grpc::ClientContext* context, const ::google::logging::v2::ListLogMetricsRequest* request, ::google::logging::v2::ListLogMetricsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListLogMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::logging::v2::ListLogMetricsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListLogMetrics(::grpc::ClientContext* context, const ::google::logging::v2::ListLogMetricsRequest* request, ::google::logging::v2::ListLogMetricsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void ListLogMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::logging::v2::ListLogMetricsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Gets a logs-based metric.
      virtual void GetLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::GetLogMetricRequest* request, ::google::logging::v2::LogMetric* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLogMetric(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::logging::v2::LogMetric* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::GetLogMetricRequest* request, ::google::logging::v2::LogMetric* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void GetLogMetric(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::logging::v2::LogMetric* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Creates a logs-based metric.
      virtual void CreateLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::CreateLogMetricRequest* request, ::google::logging::v2::LogMetric* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateLogMetric(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::logging::v2::LogMetric* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::CreateLogMetricRequest* request, ::google::logging::v2::LogMetric* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void CreateLogMetric(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::logging::v2::LogMetric* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Creates or updates a logs-based metric.
      virtual void UpdateLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::UpdateLogMetricRequest* request, ::google::logging::v2::LogMetric* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateLogMetric(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::logging::v2::LogMetric* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::UpdateLogMetricRequest* request, ::google::logging::v2::LogMetric* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateLogMetric(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::logging::v2::LogMetric* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Deletes a logs-based metric.
      virtual void DeleteLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::DeleteLogMetricRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteLogMetric(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::DeleteLogMetricRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteLogMetric(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::ListLogMetricsResponse>* AsyncListLogMetricsRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListLogMetricsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::ListLogMetricsResponse>* PrepareAsyncListLogMetricsRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListLogMetricsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogMetric>* AsyncGetLogMetricRaw(::grpc::ClientContext* context, const ::google::logging::v2::GetLogMetricRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogMetric>* PrepareAsyncGetLogMetricRaw(::grpc::ClientContext* context, const ::google::logging::v2::GetLogMetricRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogMetric>* AsyncCreateLogMetricRaw(::grpc::ClientContext* context, const ::google::logging::v2::CreateLogMetricRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogMetric>* PrepareAsyncCreateLogMetricRaw(::grpc::ClientContext* context, const ::google::logging::v2::CreateLogMetricRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogMetric>* AsyncUpdateLogMetricRaw(::grpc::ClientContext* context, const ::google::logging::v2::UpdateLogMetricRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::logging::v2::LogMetric>* PrepareAsyncUpdateLogMetricRaw(::grpc::ClientContext* context, const ::google::logging::v2::UpdateLogMetricRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncDeleteLogMetricRaw(::grpc::ClientContext* context, const ::google::logging::v2::DeleteLogMetricRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncDeleteLogMetricRaw(::grpc::ClientContext* context, const ::google::logging::v2::DeleteLogMetricRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ListLogMetrics(::grpc::ClientContext* context, const ::google::logging::v2::ListLogMetricsRequest& request, ::google::logging::v2::ListLogMetricsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListLogMetricsResponse>> AsyncListLogMetrics(::grpc::ClientContext* context, const ::google::logging::v2::ListLogMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListLogMetricsResponse>>(AsyncListLogMetricsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListLogMetricsResponse>> PrepareAsyncListLogMetrics(::grpc::ClientContext* context, const ::google::logging::v2::ListLogMetricsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListLogMetricsResponse>>(PrepareAsyncListLogMetricsRaw(context, request, cq));
    }
    ::grpc::Status GetLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::GetLogMetricRequest& request, ::google::logging::v2::LogMetric* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogMetric>> AsyncGetLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::GetLogMetricRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogMetric>>(AsyncGetLogMetricRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogMetric>> PrepareAsyncGetLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::GetLogMetricRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogMetric>>(PrepareAsyncGetLogMetricRaw(context, request, cq));
    }
    ::grpc::Status CreateLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::CreateLogMetricRequest& request, ::google::logging::v2::LogMetric* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogMetric>> AsyncCreateLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::CreateLogMetricRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogMetric>>(AsyncCreateLogMetricRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogMetric>> PrepareAsyncCreateLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::CreateLogMetricRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogMetric>>(PrepareAsyncCreateLogMetricRaw(context, request, cq));
    }
    ::grpc::Status UpdateLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::UpdateLogMetricRequest& request, ::google::logging::v2::LogMetric* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogMetric>> AsyncUpdateLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::UpdateLogMetricRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogMetric>>(AsyncUpdateLogMetricRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogMetric>> PrepareAsyncUpdateLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::UpdateLogMetricRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogMetric>>(PrepareAsyncUpdateLogMetricRaw(context, request, cq));
    }
    ::grpc::Status DeleteLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::DeleteLogMetricRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncDeleteLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::DeleteLogMetricRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncDeleteLogMetricRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncDeleteLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::DeleteLogMetricRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncDeleteLogMetricRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void ListLogMetrics(::grpc::ClientContext* context, const ::google::logging::v2::ListLogMetricsRequest* request, ::google::logging::v2::ListLogMetricsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListLogMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::logging::v2::ListLogMetricsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListLogMetrics(::grpc::ClientContext* context, const ::google::logging::v2::ListLogMetricsRequest* request, ::google::logging::v2::ListLogMetricsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void ListLogMetrics(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::logging::v2::ListLogMetricsResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::GetLogMetricRequest* request, ::google::logging::v2::LogMetric* response, std::function<void(::grpc::Status)>) override;
      void GetLogMetric(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::logging::v2::LogMetric* response, std::function<void(::grpc::Status)>) override;
      void GetLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::GetLogMetricRequest* request, ::google::logging::v2::LogMetric* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void GetLogMetric(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::logging::v2::LogMetric* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::CreateLogMetricRequest* request, ::google::logging::v2::LogMetric* response, std::function<void(::grpc::Status)>) override;
      void CreateLogMetric(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::logging::v2::LogMetric* response, std::function<void(::grpc::Status)>) override;
      void CreateLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::CreateLogMetricRequest* request, ::google::logging::v2::LogMetric* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void CreateLogMetric(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::logging::v2::LogMetric* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void UpdateLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::UpdateLogMetricRequest* request, ::google::logging::v2::LogMetric* response, std::function<void(::grpc::Status)>) override;
      void UpdateLogMetric(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::logging::v2::LogMetric* response, std::function<void(::grpc::Status)>) override;
      void UpdateLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::UpdateLogMetricRequest* request, ::google::logging::v2::LogMetric* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void UpdateLogMetric(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::logging::v2::LogMetric* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DeleteLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::DeleteLogMetricRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteLogMetric(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void DeleteLogMetric(::grpc::ClientContext* context, const ::google::logging::v2::DeleteLogMetricRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void DeleteLogMetric(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::google::protobuf::Empty* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListLogMetricsResponse>* AsyncListLogMetricsRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListLogMetricsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::ListLogMetricsResponse>* PrepareAsyncListLogMetricsRaw(::grpc::ClientContext* context, const ::google::logging::v2::ListLogMetricsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogMetric>* AsyncGetLogMetricRaw(::grpc::ClientContext* context, const ::google::logging::v2::GetLogMetricRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogMetric>* PrepareAsyncGetLogMetricRaw(::grpc::ClientContext* context, const ::google::logging::v2::GetLogMetricRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogMetric>* AsyncCreateLogMetricRaw(::grpc::ClientContext* context, const ::google::logging::v2::CreateLogMetricRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogMetric>* PrepareAsyncCreateLogMetricRaw(::grpc::ClientContext* context, const ::google::logging::v2::CreateLogMetricRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogMetric>* AsyncUpdateLogMetricRaw(::grpc::ClientContext* context, const ::google::logging::v2::UpdateLogMetricRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::logging::v2::LogMetric>* PrepareAsyncUpdateLogMetricRaw(::grpc::ClientContext* context, const ::google::logging::v2::UpdateLogMetricRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncDeleteLogMetricRaw(::grpc::ClientContext* context, const ::google::logging::v2::DeleteLogMetricRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncDeleteLogMetricRaw(::grpc::ClientContext* context, const ::google::logging::v2::DeleteLogMetricRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListLogMetrics_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLogMetric_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateLogMetric_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateLogMetric_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteLogMetric_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Lists logs-based metrics.
    virtual ::grpc::Status ListLogMetrics(::grpc::ServerContext* context, const ::google::logging::v2::ListLogMetricsRequest* request, ::google::logging::v2::ListLogMetricsResponse* response);
    // Gets a logs-based metric.
    virtual ::grpc::Status GetLogMetric(::grpc::ServerContext* context, const ::google::logging::v2::GetLogMetricRequest* request, ::google::logging::v2::LogMetric* response);
    // Creates a logs-based metric.
    virtual ::grpc::Status CreateLogMetric(::grpc::ServerContext* context, const ::google::logging::v2::CreateLogMetricRequest* request, ::google::logging::v2::LogMetric* response);
    // Creates or updates a logs-based metric.
    virtual ::grpc::Status UpdateLogMetric(::grpc::ServerContext* context, const ::google::logging::v2::UpdateLogMetricRequest* request, ::google::logging::v2::LogMetric* response);
    // Deletes a logs-based metric.
    virtual ::grpc::Status DeleteLogMetric(::grpc::ServerContext* context, const ::google::logging::v2::DeleteLogMetricRequest* request, ::google::protobuf::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListLogMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListLogMetrics() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListLogMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLogMetrics(::grpc::ServerContext* context, const ::google::logging::v2::ListLogMetricsRequest* request, ::google::logging::v2::ListLogMetricsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListLogMetrics(::grpc::ServerContext* context, ::google::logging::v2::ListLogMetricsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::logging::v2::ListLogMetricsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLogMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetLogMetric() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetLogMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLogMetric(::grpc::ServerContext* context, const ::google::logging::v2::GetLogMetricRequest* request, ::google::logging::v2::LogMetric* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLogMetric(::grpc::ServerContext* context, ::google::logging::v2::GetLogMetricRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::logging::v2::LogMetric>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateLogMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateLogMetric() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateLogMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateLogMetric(::grpc::ServerContext* context, const ::google::logging::v2::CreateLogMetricRequest* request, ::google::logging::v2::LogMetric* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateLogMetric(::grpc::ServerContext* context, ::google::logging::v2::CreateLogMetricRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::logging::v2::LogMetric>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateLogMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateLogMetric() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateLogMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateLogMetric(::grpc::ServerContext* context, const ::google::logging::v2::UpdateLogMetricRequest* request, ::google::logging::v2::LogMetric* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateLogMetric(::grpc::ServerContext* context, ::google::logging::v2::UpdateLogMetricRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::logging::v2::LogMetric>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteLogMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteLogMetric() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteLogMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLogMetric(::grpc::ServerContext* context, const ::google::logging::v2::DeleteLogMetricRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteLogMetric(::grpc::ServerContext* context, ::google::logging::v2::DeleteLogMetricRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListLogMetrics<WithAsyncMethod_GetLogMetric<WithAsyncMethod_CreateLogMetric<WithAsyncMethod_UpdateLogMetric<WithAsyncMethod_DeleteLogMetric<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_ListLogMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_ListLogMetrics() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::google::logging::v2::ListLogMetricsRequest, ::google::logging::v2::ListLogMetricsResponse>(
          [this](::grpc::ServerContext* context,
                 const ::google::logging::v2::ListLogMetricsRequest* request,
                 ::google::logging::v2::ListLogMetricsResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->ListLogMetrics(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_ListLogMetrics(
        ::grpc::experimental::MessageAllocator< ::google::logging::v2::ListLogMetricsRequest, ::google::logging::v2::ListLogMetricsResponse>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::google::logging::v2::ListLogMetricsRequest, ::google::logging::v2::ListLogMetricsResponse>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_ListLogMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLogMetrics(::grpc::ServerContext* context, const ::google::logging::v2::ListLogMetricsRequest* request, ::google::logging::v2::ListLogMetricsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListLogMetrics(::grpc::ServerContext* context, const ::google::logging::v2::ListLogMetricsRequest* request, ::google::logging::v2::ListLogMetricsResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetLogMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetLogMetric() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::google::logging::v2::GetLogMetricRequest, ::google::logging::v2::LogMetric>(
          [this](::grpc::ServerContext* context,
                 const ::google::logging::v2::GetLogMetricRequest* request,
                 ::google::logging::v2::LogMetric* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->GetLogMetric(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_GetLogMetric(
        ::grpc::experimental::MessageAllocator< ::google::logging::v2::GetLogMetricRequest, ::google::logging::v2::LogMetric>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::google::logging::v2::GetLogMetricRequest, ::google::logging::v2::LogMetric>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_GetLogMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLogMetric(::grpc::ServerContext* context, const ::google::logging::v2::GetLogMetricRequest* request, ::google::logging::v2::LogMetric* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetLogMetric(::grpc::ServerContext* context, const ::google::logging::v2::GetLogMetricRequest* request, ::google::logging::v2::LogMetric* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_CreateLogMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_CreateLogMetric() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::google::logging::v2::CreateLogMetricRequest, ::google::logging::v2::LogMetric>(
          [this](::grpc::ServerContext* context,
                 const ::google::logging::v2::CreateLogMetricRequest* request,
                 ::google::logging::v2::LogMetric* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->CreateLogMetric(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_CreateLogMetric(
        ::grpc::experimental::MessageAllocator< ::google::logging::v2::CreateLogMetricRequest, ::google::logging::v2::LogMetric>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::google::logging::v2::CreateLogMetricRequest, ::google::logging::v2::LogMetric>*>(
          ::grpc::Service::experimental().GetHandler(2))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_CreateLogMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateLogMetric(::grpc::ServerContext* context, const ::google::logging::v2::CreateLogMetricRequest* request, ::google::logging::v2::LogMetric* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateLogMetric(::grpc::ServerContext* context, const ::google::logging::v2::CreateLogMetricRequest* request, ::google::logging::v2::LogMetric* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_UpdateLogMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_UpdateLogMetric() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::google::logging::v2::UpdateLogMetricRequest, ::google::logging::v2::LogMetric>(
          [this](::grpc::ServerContext* context,
                 const ::google::logging::v2::UpdateLogMetricRequest* request,
                 ::google::logging::v2::LogMetric* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->UpdateLogMetric(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_UpdateLogMetric(
        ::grpc::experimental::MessageAllocator< ::google::logging::v2::UpdateLogMetricRequest, ::google::logging::v2::LogMetric>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::google::logging::v2::UpdateLogMetricRequest, ::google::logging::v2::LogMetric>*>(
          ::grpc::Service::experimental().GetHandler(3))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_UpdateLogMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateLogMetric(::grpc::ServerContext* context, const ::google::logging::v2::UpdateLogMetricRequest* request, ::google::logging::v2::LogMetric* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void UpdateLogMetric(::grpc::ServerContext* context, const ::google::logging::v2::UpdateLogMetricRequest* request, ::google::logging::v2::LogMetric* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_DeleteLogMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_DeleteLogMetric() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::google::logging::v2::DeleteLogMetricRequest, ::google::protobuf::Empty>(
          [this](::grpc::ServerContext* context,
                 const ::google::logging::v2::DeleteLogMetricRequest* request,
                 ::google::protobuf::Empty* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->DeleteLogMetric(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_DeleteLogMetric(
        ::grpc::experimental::MessageAllocator< ::google::logging::v2::DeleteLogMetricRequest, ::google::protobuf::Empty>* allocator) {
      static_cast<::grpc_impl::internal::CallbackUnaryHandler< ::google::logging::v2::DeleteLogMetricRequest, ::google::protobuf::Empty>*>(
          ::grpc::Service::experimental().GetHandler(4))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_DeleteLogMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLogMetric(::grpc::ServerContext* context, const ::google::logging::v2::DeleteLogMetricRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeleteLogMetric(::grpc::ServerContext* context, const ::google::logging::v2::DeleteLogMetricRequest* request, ::google::protobuf::Empty* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_ListLogMetrics<ExperimentalWithCallbackMethod_GetLogMetric<ExperimentalWithCallbackMethod_CreateLogMetric<ExperimentalWithCallbackMethod_UpdateLogMetric<ExperimentalWithCallbackMethod_DeleteLogMetric<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ListLogMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListLogMetrics() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListLogMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLogMetrics(::grpc::ServerContext* context, const ::google::logging::v2::ListLogMetricsRequest* request, ::google::logging::v2::ListLogMetricsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLogMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetLogMetric() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetLogMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLogMetric(::grpc::ServerContext* context, const ::google::logging::v2::GetLogMetricRequest* request, ::google::logging::v2::LogMetric* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateLogMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateLogMetric() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateLogMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateLogMetric(::grpc::ServerContext* context, const ::google::logging::v2::CreateLogMetricRequest* request, ::google::logging::v2::LogMetric* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateLogMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateLogMetric() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateLogMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateLogMetric(::grpc::ServerContext* context, const ::google::logging::v2::UpdateLogMetricRequest* request, ::google::logging::v2::LogMetric* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteLogMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteLogMetric() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteLogMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLogMetric(::grpc::ServerContext* context, const ::google::logging::v2::DeleteLogMetricRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListLogMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListLogMetrics() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ListLogMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLogMetrics(::grpc::ServerContext* context, const ::google::logging::v2::ListLogMetricsRequest* request, ::google::logging::v2::ListLogMetricsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListLogMetrics(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLogMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetLogMetric() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetLogMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLogMetric(::grpc::ServerContext* context, const ::google::logging::v2::GetLogMetricRequest* request, ::google::logging::v2::LogMetric* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLogMetric(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateLogMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateLogMetric() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreateLogMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateLogMetric(::grpc::ServerContext* context, const ::google::logging::v2::CreateLogMetricRequest* request, ::google::logging::v2::LogMetric* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateLogMetric(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateLogMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UpdateLogMetric() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateLogMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateLogMetric(::grpc::ServerContext* context, const ::google::logging::v2::UpdateLogMetricRequest* request, ::google::logging::v2::LogMetric* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateLogMetric(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteLogMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeleteLogMetric() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DeleteLogMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLogMetric(::grpc::ServerContext* context, const ::google::logging::v2::DeleteLogMetricRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteLogMetric(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_ListLogMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_ListLogMetrics() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->ListLogMetrics(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_ListLogMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListLogMetrics(::grpc::ServerContext* context, const ::google::logging::v2::ListLogMetricsRequest* request, ::google::logging::v2::ListLogMetricsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void ListLogMetrics(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetLogMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetLogMetric() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->GetLogMetric(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_GetLogMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLogMetric(::grpc::ServerContext* context, const ::google::logging::v2::GetLogMetricRequest* request, ::google::logging::v2::LogMetric* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void GetLogMetric(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_CreateLogMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_CreateLogMetric() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->CreateLogMetric(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_CreateLogMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateLogMetric(::grpc::ServerContext* context, const ::google::logging::v2::CreateLogMetricRequest* request, ::google::logging::v2::LogMetric* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void CreateLogMetric(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_UpdateLogMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_UpdateLogMetric() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->UpdateLogMetric(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_UpdateLogMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateLogMetric(::grpc::ServerContext* context, const ::google::logging::v2::UpdateLogMetricRequest* request, ::google::logging::v2::LogMetric* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void UpdateLogMetric(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_DeleteLogMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_DeleteLogMetric() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc_impl::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->DeleteLogMetric(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_DeleteLogMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteLogMetric(::grpc::ServerContext* context, const ::google::logging::v2::DeleteLogMetricRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void DeleteLogMetric(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListLogMetrics : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListLogMetrics() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::google::logging::v2::ListLogMetricsRequest, ::google::logging::v2::ListLogMetricsResponse>(std::bind(&WithStreamedUnaryMethod_ListLogMetrics<BaseClass>::StreamedListLogMetrics, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListLogMetrics() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListLogMetrics(::grpc::ServerContext* context, const ::google::logging::v2::ListLogMetricsRequest* request, ::google::logging::v2::ListLogMetricsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListLogMetrics(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::logging::v2::ListLogMetricsRequest,::google::logging::v2::ListLogMetricsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLogMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetLogMetric() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::google::logging::v2::GetLogMetricRequest, ::google::logging::v2::LogMetric>(std::bind(&WithStreamedUnaryMethod_GetLogMetric<BaseClass>::StreamedGetLogMetric, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetLogMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLogMetric(::grpc::ServerContext* context, const ::google::logging::v2::GetLogMetricRequest* request, ::google::logging::v2::LogMetric* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLogMetric(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::logging::v2::GetLogMetricRequest,::google::logging::v2::LogMetric>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateLogMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateLogMetric() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::google::logging::v2::CreateLogMetricRequest, ::google::logging::v2::LogMetric>(std::bind(&WithStreamedUnaryMethod_CreateLogMetric<BaseClass>::StreamedCreateLogMetric, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateLogMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateLogMetric(::grpc::ServerContext* context, const ::google::logging::v2::CreateLogMetricRequest* request, ::google::logging::v2::LogMetric* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateLogMetric(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::logging::v2::CreateLogMetricRequest,::google::logging::v2::LogMetric>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateLogMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateLogMetric() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::google::logging::v2::UpdateLogMetricRequest, ::google::logging::v2::LogMetric>(std::bind(&WithStreamedUnaryMethod_UpdateLogMetric<BaseClass>::StreamedUpdateLogMetric, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateLogMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateLogMetric(::grpc::ServerContext* context, const ::google::logging::v2::UpdateLogMetricRequest* request, ::google::logging::v2::LogMetric* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateLogMetric(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::logging::v2::UpdateLogMetricRequest,::google::logging::v2::LogMetric>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteLogMetric : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteLogMetric() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::google::logging::v2::DeleteLogMetricRequest, ::google::protobuf::Empty>(std::bind(&WithStreamedUnaryMethod_DeleteLogMetric<BaseClass>::StreamedDeleteLogMetric, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteLogMetric() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteLogMetric(::grpc::ServerContext* context, const ::google::logging::v2::DeleteLogMetricRequest* request, ::google::protobuf::Empty* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteLogMetric(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::logging::v2::DeleteLogMetricRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListLogMetrics<WithStreamedUnaryMethod_GetLogMetric<WithStreamedUnaryMethod_CreateLogMetric<WithStreamedUnaryMethod_UpdateLogMetric<WithStreamedUnaryMethod_DeleteLogMetric<Service > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListLogMetrics<WithStreamedUnaryMethod_GetLogMetric<WithStreamedUnaryMethod_CreateLogMetric<WithStreamedUnaryMethod_UpdateLogMetric<WithStreamedUnaryMethod_DeleteLogMetric<Service > > > > > StreamedService;
};

}  // namespace v2
}  // namespace logging
}  // namespace google


#endif  // GRPC_google_2flogging_2fv2_2flogging_5fmetrics_2eproto__INCLUDED
