// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/logging/v2/log_entry.proto

#include "google/logging/v2/log_entry.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fmonitored_5fresource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MonitoredResource_google_2fapi_2fmonitored_5fresource_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fapi_2fmonitored_5fresource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MonitoredResourceMetadata_google_2fapi_2fmonitored_5fresource_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2flogging_2ftype_2fhttp_5frequest_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_HttpRequest_google_2flogging_2ftype_2fhttp_5frequest_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2flogging_2fv2_2flog_5fentry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogEntry_LabelsEntry_DoNotUse_google_2flogging_2fv2_2flog_5fentry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2flogging_2fv2_2flog_5fentry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogEntryOperation_google_2flogging_2fv2_2flog_5fentry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2flogging_2fv2_2flog_5fentry_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogEntrySourceLocation_google_2flogging_2fv2_2flog_5fentry_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fany_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Any_google_2fprotobuf_2fany_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fstruct_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace google {
namespace logging {
namespace v2 {
class LogEntry_LabelsEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogEntry_LabelsEntry_DoNotUse> _instance;
} _LogEntry_LabelsEntry_DoNotUse_default_instance_;
class LogEntryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogEntry> _instance;
  const PROTOBUF_NAMESPACE_ID::Any* proto_payload_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_payload_;
  const PROTOBUF_NAMESPACE_ID::Struct* json_payload_;
} _LogEntry_default_instance_;
class LogEntryOperationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogEntryOperation> _instance;
} _LogEntryOperation_default_instance_;
class LogEntrySourceLocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogEntrySourceLocation> _instance;
} _LogEntrySourceLocation_default_instance_;
}  // namespace v2
}  // namespace logging
}  // namespace google
static void InitDefaultsscc_info_LogEntry_google_2flogging_2fv2_2flog_5fentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::logging::v2::_LogEntry_default_instance_;
    new (ptr) ::google::logging::v2::LogEntry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::logging::v2::LogEntry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<9> scc_info_LogEntry_google_2flogging_2fv2_2flog_5fentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 9, 0, InitDefaultsscc_info_LogEntry_google_2flogging_2fv2_2flog_5fentry_2eproto}, {
      &scc_info_MonitoredResource_google_2fapi_2fmonitored_5fresource_2eproto.base,
      &scc_info_Any_google_2fprotobuf_2fany_2eproto.base,
      &scc_info_ListValue_google_2fprotobuf_2fstruct_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_HttpRequest_google_2flogging_2ftype_2fhttp_5frequest_2eproto.base,
      &scc_info_LogEntry_LabelsEntry_DoNotUse_google_2flogging_2fv2_2flog_5fentry_2eproto.base,
      &scc_info_MonitoredResourceMetadata_google_2fapi_2fmonitored_5fresource_2eproto.base,
      &scc_info_LogEntryOperation_google_2flogging_2fv2_2flog_5fentry_2eproto.base,
      &scc_info_LogEntrySourceLocation_google_2flogging_2fv2_2flog_5fentry_2eproto.base,}};

static void InitDefaultsscc_info_LogEntry_LabelsEntry_DoNotUse_google_2flogging_2fv2_2flog_5fentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::logging::v2::_LogEntry_LabelsEntry_DoNotUse_default_instance_;
    new (ptr) ::google::logging::v2::LogEntry_LabelsEntry_DoNotUse();
  }
  ::google::logging::v2::LogEntry_LabelsEntry_DoNotUse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogEntry_LabelsEntry_DoNotUse_google_2flogging_2fv2_2flog_5fentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogEntry_LabelsEntry_DoNotUse_google_2flogging_2fv2_2flog_5fentry_2eproto}, {}};

static void InitDefaultsscc_info_LogEntryOperation_google_2flogging_2fv2_2flog_5fentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::logging::v2::_LogEntryOperation_default_instance_;
    new (ptr) ::google::logging::v2::LogEntryOperation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::logging::v2::LogEntryOperation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogEntryOperation_google_2flogging_2fv2_2flog_5fentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogEntryOperation_google_2flogging_2fv2_2flog_5fentry_2eproto}, {}};

static void InitDefaultsscc_info_LogEntrySourceLocation_google_2flogging_2fv2_2flog_5fentry_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::google::logging::v2::_LogEntrySourceLocation_default_instance_;
    new (ptr) ::google::logging::v2::LogEntrySourceLocation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::google::logging::v2::LogEntrySourceLocation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogEntrySourceLocation_google_2flogging_2fv2_2flog_5fentry_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogEntrySourceLocation_google_2flogging_2fv2_2flog_5fentry_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_google_2flogging_2fv2_2flog_5fentry_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_google_2flogging_2fv2_2flog_5fentry_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_google_2flogging_2fv2_2flog_5fentry_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_google_2flogging_2fv2_2flog_5fentry_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntry_LabelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntry_LabelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntry_LabelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntry_LabelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntry, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntry, log_name_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntry, resource_),
  offsetof(::google::logging::v2::LogEntryDefaultTypeInternal, proto_payload_),
  offsetof(::google::logging::v2::LogEntryDefaultTypeInternal, text_payload_),
  offsetof(::google::logging::v2::LogEntryDefaultTypeInternal, json_payload_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntry, timestamp_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntry, receive_timestamp_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntry, severity_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntry, insert_id_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntry, http_request_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntry, labels_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntry, metadata_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntry, operation_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntry, trace_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntry, span_id_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntry, trace_sampled_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntry, source_location_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntry, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntryOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntryOperation, id_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntryOperation, producer_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntryOperation, first_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntryOperation, last_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntrySourceLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntrySourceLocation, file_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntrySourceLocation, line_),
  PROTOBUF_FIELD_OFFSET(::google::logging::v2::LogEntrySourceLocation, function_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::google::logging::v2::LogEntry_LabelsEntry_DoNotUse)},
  { 9, -1, sizeof(::google::logging::v2::LogEntry)},
  { 32, -1, sizeof(::google::logging::v2::LogEntryOperation)},
  { 41, -1, sizeof(::google::logging::v2::LogEntrySourceLocation)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::logging::v2::_LogEntry_LabelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::logging::v2::_LogEntry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::logging::v2::_LogEntryOperation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::google::logging::v2::_LogEntrySourceLocation_default_instance_),
};

const char descriptor_table_protodef_google_2flogging_2fv2_2flog_5fentry_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!google/logging/v2/log_entry.proto\022\021goo"
  "gle.logging.v2\032#google/api/monitored_res"
  "ource.proto\032&google/logging/type/http_re"
  "quest.proto\032&google/logging/type/log_sev"
  "erity.proto\032\031google/protobuf/any.proto\032\034"
  "google/protobuf/struct.proto\032\037google/pro"
  "tobuf/timestamp.proto\032\027google/rpc/status"
  ".proto\032\034google/api/annotations.proto\"\216\006\n"
  "\010LogEntry\022\020\n\010log_name\030\014 \001(\t\022/\n\010resource\030"
  "\010 \001(\0132\035.google.api.MonitoredResource\022-\n\r"
  "proto_payload\030\002 \001(\0132\024.google.protobuf.An"
  "yH\000\022\026\n\014text_payload\030\003 \001(\tH\000\022/\n\014json_payl"
  "oad\030\006 \001(\0132\027.google.protobuf.StructH\000\022-\n\t"
  "timestamp\030\t \001(\0132\032.google.protobuf.Timest"
  "amp\0225\n\021receive_timestamp\030\030 \001(\0132\032.google."
  "protobuf.Timestamp\0222\n\010severity\030\n \001(\0162 .g"
  "oogle.logging.type.LogSeverity\022\021\n\tinsert"
  "_id\030\004 \001(\t\0226\n\014http_request\030\007 \001(\0132 .google"
  ".logging.type.HttpRequest\0227\n\006labels\030\013 \003("
  "\0132\'.google.logging.v2.LogEntry.LabelsEnt"
  "ry\022;\n\010metadata\030\031 \001(\0132%.google.api.Monito"
  "redResourceMetadataB\002\030\001\0227\n\toperation\030\017 \001"
  "(\0132$.google.logging.v2.LogEntryOperation"
  "\022\r\n\005trace\030\026 \001(\t\022\017\n\007span_id\030\033 \001(\t\022\025\n\rtrac"
  "e_sampled\030\036 \001(\010\022B\n\017source_location\030\027 \001(\013"
  "2).google.logging.v2.LogEntrySourceLocat"
  "ion\032-\n\013LabelsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
  "\030\002 \001(\t:\0028\001B\t\n\007payload\"N\n\021LogEntryOperati"
  "on\022\n\n\002id\030\001 \001(\t\022\020\n\010producer\030\002 \001(\t\022\r\n\005firs"
  "t\030\003 \001(\010\022\014\n\004last\030\004 \001(\010\"F\n\026LogEntrySourceL"
  "ocation\022\014\n\004file\030\001 \001(\t\022\014\n\004line\030\002 \001(\003\022\020\n\010f"
  "unction\030\003 \001(\tB\231\001\n\025com.google.logging.v2B"
  "\rLogEntryProtoP\001Z8google.golang.org/genp"
  "roto/googleapis/logging/v2;logging\370\001\001\252\002\027"
  "Google.Cloud.Logging.V2\312\002\027Google\\Cloud\\L"
  "ogging\\V2b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_google_2flogging_2fv2_2flog_5fentry_2eproto_deps[8] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fmonitored_5fresource_2eproto,
  &::descriptor_table_google_2flogging_2ftype_2fhttp_5frequest_2eproto,
  &::descriptor_table_google_2flogging_2ftype_2flog_5fseverity_2eproto,
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_google_2frpc_2fstatus_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_google_2flogging_2fv2_2flog_5fentry_2eproto_sccs[4] = {
  &scc_info_LogEntry_google_2flogging_2fv2_2flog_5fentry_2eproto.base,
  &scc_info_LogEntry_LabelsEntry_DoNotUse_google_2flogging_2fv2_2flog_5fentry_2eproto.base,
  &scc_info_LogEntryOperation_google_2flogging_2fv2_2flog_5fentry_2eproto.base,
  &scc_info_LogEntrySourceLocation_google_2flogging_2fv2_2flog_5fentry_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_google_2flogging_2fv2_2flog_5fentry_2eproto_once;
static bool descriptor_table_google_2flogging_2fv2_2flog_5fentry_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2flogging_2fv2_2flog_5fentry_2eproto = {
  &descriptor_table_google_2flogging_2fv2_2flog_5fentry_2eproto_initialized, descriptor_table_protodef_google_2flogging_2fv2_2flog_5fentry_2eproto, "google/logging/v2/log_entry.proto", 1417,
  &descriptor_table_google_2flogging_2fv2_2flog_5fentry_2eproto_once, descriptor_table_google_2flogging_2fv2_2flog_5fentry_2eproto_sccs, descriptor_table_google_2flogging_2fv2_2flog_5fentry_2eproto_deps, 4, 8,
  schemas, file_default_instances, TableStruct_google_2flogging_2fv2_2flog_5fentry_2eproto::offsets,
  file_level_metadata_google_2flogging_2fv2_2flog_5fentry_2eproto, 4, file_level_enum_descriptors_google_2flogging_2fv2_2flog_5fentry_2eproto, file_level_service_descriptors_google_2flogging_2fv2_2flog_5fentry_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_google_2flogging_2fv2_2flog_5fentry_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_google_2flogging_2fv2_2flog_5fentry_2eproto), true);
namespace google {
namespace logging {
namespace v2 {

// ===================================================================

LogEntry_LabelsEntry_DoNotUse::LogEntry_LabelsEntry_DoNotUse() {}
LogEntry_LabelsEntry_DoNotUse::LogEntry_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void LogEntry_LabelsEntry_DoNotUse::MergeFrom(const LogEntry_LabelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata LogEntry_LabelsEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void LogEntry_LabelsEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

void LogEntry::InitAsDefaultInstance() {
  ::google::logging::v2::_LogEntry_default_instance_._instance.get_mutable()->resource_ = const_cast< ::google::api::MonitoredResource*>(
      ::google::api::MonitoredResource::internal_default_instance());
  ::google::logging::v2::_LogEntry_default_instance_.proto_payload_ = const_cast< PROTOBUF_NAMESPACE_ID::Any*>(
      PROTOBUF_NAMESPACE_ID::Any::internal_default_instance());
  ::google::logging::v2::_LogEntry_default_instance_.text_payload_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::google::logging::v2::_LogEntry_default_instance_.json_payload_ = const_cast< PROTOBUF_NAMESPACE_ID::Struct*>(
      PROTOBUF_NAMESPACE_ID::Struct::internal_default_instance());
  ::google::logging::v2::_LogEntry_default_instance_._instance.get_mutable()->timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::google::logging::v2::_LogEntry_default_instance_._instance.get_mutable()->receive_timestamp_ = const_cast< PROTOBUF_NAMESPACE_ID::Timestamp*>(
      PROTOBUF_NAMESPACE_ID::Timestamp::internal_default_instance());
  ::google::logging::v2::_LogEntry_default_instance_._instance.get_mutable()->http_request_ = const_cast< ::google::logging::type::HttpRequest*>(
      ::google::logging::type::HttpRequest::internal_default_instance());
  ::google::logging::v2::_LogEntry_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::google::api::MonitoredResourceMetadata*>(
      ::google::api::MonitoredResourceMetadata::internal_default_instance());
  ::google::logging::v2::_LogEntry_default_instance_._instance.get_mutable()->operation_ = const_cast< ::google::logging::v2::LogEntryOperation*>(
      ::google::logging::v2::LogEntryOperation::internal_default_instance());
  ::google::logging::v2::_LogEntry_default_instance_._instance.get_mutable()->source_location_ = const_cast< ::google::logging::v2::LogEntrySourceLocation*>(
      ::google::logging::v2::LogEntrySourceLocation::internal_default_instance());
}
class LogEntry::_Internal {
 public:
  static const ::google::api::MonitoredResource& resource(const LogEntry* msg);
  static const PROTOBUF_NAMESPACE_ID::Any& proto_payload(const LogEntry* msg);
  static const PROTOBUF_NAMESPACE_ID::Struct& json_payload(const LogEntry* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const LogEntry* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& receive_timestamp(const LogEntry* msg);
  static const ::google::logging::type::HttpRequest& http_request(const LogEntry* msg);
  static const ::google::api::MonitoredResourceMetadata& metadata(const LogEntry* msg);
  static const ::google::logging::v2::LogEntryOperation& operation(const LogEntry* msg);
  static const ::google::logging::v2::LogEntrySourceLocation& source_location(const LogEntry* msg);
};

const ::google::api::MonitoredResource&
LogEntry::_Internal::resource(const LogEntry* msg) {
  return *msg->resource_;
}
const PROTOBUF_NAMESPACE_ID::Any&
LogEntry::_Internal::proto_payload(const LogEntry* msg) {
  return *msg->payload_.proto_payload_;
}
const PROTOBUF_NAMESPACE_ID::Struct&
LogEntry::_Internal::json_payload(const LogEntry* msg) {
  return *msg->payload_.json_payload_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
LogEntry::_Internal::timestamp(const LogEntry* msg) {
  return *msg->timestamp_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
LogEntry::_Internal::receive_timestamp(const LogEntry* msg) {
  return *msg->receive_timestamp_;
}
const ::google::logging::type::HttpRequest&
LogEntry::_Internal::http_request(const LogEntry* msg) {
  return *msg->http_request_;
}
const ::google::api::MonitoredResourceMetadata&
LogEntry::_Internal::metadata(const LogEntry* msg) {
  return *msg->metadata_;
}
const ::google::logging::v2::LogEntryOperation&
LogEntry::_Internal::operation(const LogEntry* msg) {
  return *msg->operation_;
}
const ::google::logging::v2::LogEntrySourceLocation&
LogEntry::_Internal::source_location(const LogEntry* msg) {
  return *msg->source_location_;
}
void LogEntry::unsafe_arena_set_allocated_resource(
    ::google::api::MonitoredResource* resource) {
  if (GetArenaNoVirtual() == nullptr) {
    delete resource_;
  }
  resource_ = resource;
  if (resource) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntry.resource)
}
void LogEntry::clear_resource() {
  if (GetArenaNoVirtual() == nullptr && resource_ != nullptr) {
    delete resource_;
  }
  resource_ = nullptr;
}
void LogEntry::set_allocated_proto_payload(PROTOBUF_NAMESPACE_ID::Any* proto_payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (proto_payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      proto_payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proto_payload, submessage_arena);
    }
    set_has_proto_payload();
    payload_.proto_payload_ = proto_payload;
  }
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntry.proto_payload)
}
void LogEntry::clear_proto_payload() {
  if (_internal_has_proto_payload()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete payload_.proto_payload_;
    }
    clear_has_payload();
  }
}
void LogEntry::set_allocated_json_payload(PROTOBUF_NAMESPACE_ID::Struct* json_payload) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_payload();
  if (json_payload) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(json_payload)->GetArena();
    if (message_arena != submessage_arena) {
      json_payload = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, json_payload, submessage_arena);
    }
    set_has_json_payload();
    payload_.json_payload_ = json_payload;
  }
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogEntry.json_payload)
}
void LogEntry::clear_json_payload() {
  if (_internal_has_json_payload()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete payload_.json_payload_;
    }
    clear_has_payload();
  }
}
void LogEntry::unsafe_arena_set_allocated_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* timestamp) {
  if (GetArenaNoVirtual() == nullptr) {
    delete timestamp_;
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntry.timestamp)
}
void LogEntry::clear_timestamp() {
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
void LogEntry::unsafe_arena_set_allocated_receive_timestamp(
    PROTOBUF_NAMESPACE_ID::Timestamp* receive_timestamp) {
  if (GetArenaNoVirtual() == nullptr) {
    delete receive_timestamp_;
  }
  receive_timestamp_ = receive_timestamp;
  if (receive_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntry.receive_timestamp)
}
void LogEntry::clear_receive_timestamp() {
  if (GetArenaNoVirtual() == nullptr && receive_timestamp_ != nullptr) {
    delete receive_timestamp_;
  }
  receive_timestamp_ = nullptr;
}
void LogEntry::unsafe_arena_set_allocated_http_request(
    ::google::logging::type::HttpRequest* http_request) {
  if (GetArenaNoVirtual() == nullptr) {
    delete http_request_;
  }
  http_request_ = http_request;
  if (http_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntry.http_request)
}
void LogEntry::clear_http_request() {
  if (GetArenaNoVirtual() == nullptr && http_request_ != nullptr) {
    delete http_request_;
  }
  http_request_ = nullptr;
}
void LogEntry::unsafe_arena_set_allocated_metadata(
    ::google::api::MonitoredResourceMetadata* metadata) {
  if (GetArenaNoVirtual() == nullptr) {
    delete metadata_;
  }
  metadata_ = metadata;
  if (metadata) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntry.metadata)
}
void LogEntry::clear_metadata() {
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
}
void LogEntry::unsafe_arena_set_allocated_operation(
    ::google::logging::v2::LogEntryOperation* operation) {
  if (GetArenaNoVirtual() == nullptr) {
    delete operation_;
  }
  operation_ = operation;
  if (operation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntry.operation)
}
void LogEntry::unsafe_arena_set_allocated_source_location(
    ::google::logging::v2::LogEntrySourceLocation* source_location) {
  if (GetArenaNoVirtual() == nullptr) {
    delete source_location_;
  }
  source_location_ = source_location;
  if (source_location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogEntry.source_location)
}
LogEntry::LogEntry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.logging.v2.LogEntry)
}
LogEntry::LogEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena),
  labels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.logging.v2.LogEntry)
}
LogEntry::LogEntry(const LogEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  labels_.MergeFrom(from.labels_);
  insert_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_insert_id().empty()) {
    insert_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_insert_id(),
      GetArenaNoVirtual());
  }
  log_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_log_name().empty()) {
    log_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_log_name(),
      GetArenaNoVirtual());
  }
  trace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_trace().empty()) {
    trace_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_trace(),
      GetArenaNoVirtual());
  }
  span_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_span_id().empty()) {
    span_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_span_id(),
      GetArenaNoVirtual());
  }
  if (from._internal_has_http_request()) {
    http_request_ = new ::google::logging::type::HttpRequest(*from.http_request_);
  } else {
    http_request_ = nullptr;
  }
  if (from._internal_has_resource()) {
    resource_ = new ::google::api::MonitoredResource(*from.resource_);
  } else {
    resource_ = nullptr;
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  if (from._internal_has_operation()) {
    operation_ = new ::google::logging::v2::LogEntryOperation(*from.operation_);
  } else {
    operation_ = nullptr;
  }
  if (from._internal_has_source_location()) {
    source_location_ = new ::google::logging::v2::LogEntrySourceLocation(*from.source_location_);
  } else {
    source_location_ = nullptr;
  }
  if (from._internal_has_receive_timestamp()) {
    receive_timestamp_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.receive_timestamp_);
  } else {
    receive_timestamp_ = nullptr;
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::google::api::MonitoredResourceMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  ::memcpy(&severity_, &from.severity_,
    static_cast<size_t>(reinterpret_cast<char*>(&trace_sampled_) -
    reinterpret_cast<char*>(&severity_)) + sizeof(trace_sampled_));
  clear_has_payload();
  switch (from.payload_case()) {
    case kProtoPayload: {
      _internal_mutable_proto_payload()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_proto_payload());
      break;
    }
    case kTextPayload: {
      _internal_set_text_payload(from._internal_text_payload());
      break;
    }
    case kJsonPayload: {
      _internal_mutable_json_payload()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_json_payload());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:google.logging.v2.LogEntry)
}

void LogEntry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogEntry_google_2flogging_2fv2_2flog_5fentry_2eproto.base);
  insert_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trace_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  span_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&http_request_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trace_sampled_) -
      reinterpret_cast<char*>(&http_request_)) + sizeof(trace_sampled_));
  clear_has_payload();
}

LogEntry::~LogEntry() {
  // @@protoc_insertion_point(destructor:google.logging.v2.LogEntry)
  SharedDtor();
}

void LogEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  insert_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  log_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trace_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  span_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete http_request_;
  if (this != internal_default_instance()) delete resource_;
  if (this != internal_default_instance()) delete timestamp_;
  if (this != internal_default_instance()) delete operation_;
  if (this != internal_default_instance()) delete source_location_;
  if (this != internal_default_instance()) delete receive_timestamp_;
  if (this != internal_default_instance()) delete metadata_;
  if (has_payload()) {
    clear_payload();
  }
}

void LogEntry::ArenaDtor(void* object) {
  LogEntry* _this = reinterpret_cast< LogEntry* >(object);
  (void)_this;
}
void LogEntry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogEntry& LogEntry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogEntry_google_2flogging_2fv2_2flog_5fentry_2eproto.base);
  return *internal_default_instance();
}


void LogEntry::clear_payload() {
// @@protoc_insertion_point(one_of_clear_start:google.logging.v2.LogEntry)
  switch (payload_case()) {
    case kProtoPayload: {
      if (GetArenaNoVirtual() == nullptr) {
        delete payload_.proto_payload_;
      }
      break;
    }
    case kTextPayload: {
      payload_.text_payload_.Destroy(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
          GetArenaNoVirtual());
      break;
    }
    case kJsonPayload: {
      if (GetArenaNoVirtual() == nullptr) {
        delete payload_.json_payload_;
      }
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = PAYLOAD_NOT_SET;
}


void LogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:google.logging.v2.LogEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  labels_.Clear();
  insert_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  log_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  trace_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  span_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  if (GetArenaNoVirtual() == nullptr && http_request_ != nullptr) {
    delete http_request_;
  }
  http_request_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && resource_ != nullptr) {
    delete resource_;
  }
  resource_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && operation_ != nullptr) {
    delete operation_;
  }
  operation_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && source_location_ != nullptr) {
    delete source_location_;
  }
  source_location_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && receive_timestamp_ != nullptr) {
    delete receive_timestamp_;
  }
  receive_timestamp_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  ::memset(&severity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trace_sampled_) -
      reinterpret_cast<char*>(&severity_)) + sizeof(trace_sampled_));
  clear_payload();
  _internal_metadata_.Clear();
}

const char* LogEntry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Any proto_payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_proto_payload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string text_payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_text_payload(), ptr, ctx, "google.logging.v2.LogEntry.text_payload");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string insert_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_insert_id(), ptr, ctx, "google.logging.v2.LogEntry.insert_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Struct json_payload = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_json_payload(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.logging.type.HttpRequest http_request = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_http_request(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.api.MonitoredResource resource = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_resource(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.logging.type.LogSeverity severity = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_severity(static_cast<::google::logging::type::LogSeverity>(val));
        } else goto handle_unusual;
        continue;
      // map<string, string> labels = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&labels_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // string log_name = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_log_name(), ptr, ctx, "google.logging.v2.LogEntry.log_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.logging.v2.LogEntryOperation operation = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_operation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string trace = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_trace(), ptr, ctx, "google.logging.v2.LogEntry.trace");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.logging.v2.LogEntrySourceLocation source_location = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp receive_timestamp = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_receive_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.api.MonitoredResourceMetadata metadata = 25 [deprecated = true];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string span_id = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_span_id(), ptr, ctx, "google.logging.v2.LogEntry.span_id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool trace_sampled = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          trace_sampled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogEntry::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.logging.v2.LogEntry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Any proto_payload = 2;
  if (_internal_has_proto_payload()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::proto_payload(this), target, stream);
  }

  // string text_payload = 3;
  if (_internal_has_text_payload()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text_payload().data(), static_cast<int>(this->_internal_text_payload().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntry.text_payload");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_text_payload(), target);
  }

  // string insert_id = 4;
  if (this->insert_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_insert_id().data(), static_cast<int>(this->_internal_insert_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntry.insert_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_insert_id(), target);
  }

  // .google.protobuf.Struct json_payload = 6;
  if (_internal_has_json_payload()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::json_payload(this), target, stream);
  }

  // .google.logging.type.HttpRequest http_request = 7;
  if (this->has_http_request()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::http_request(this), target, stream);
  }

  // .google.api.MonitoredResource resource = 8;
  if (this->has_resource()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::resource(this), target, stream);
  }

  // .google.protobuf.Timestamp timestamp = 9;
  if (this->has_timestamp()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::timestamp(this), target, stream);
  }

  // .google.logging.type.LogSeverity severity = 10;
  if (this->severity() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_severity(), target);
  }

  // map<string, string> labels = 11;
  if (!this->_internal_labels().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "google.logging.v2.LogEntry.LabelsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "google.logging.v2.LogEntry.LabelsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_labels().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_labels().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = LogEntry_LabelsEntry_DoNotUse::Funcs::InternalSerialize(11, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_labels().begin();
          it != this->_internal_labels().end(); ++it) {
        target = LogEntry_LabelsEntry_DoNotUse::Funcs::InternalSerialize(11, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // string log_name = 12;
  if (this->log_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_log_name().data(), static_cast<int>(this->_internal_log_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntry.log_name");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_log_name(), target);
  }

  // .google.logging.v2.LogEntryOperation operation = 15;
  if (this->has_operation()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, _Internal::operation(this), target, stream);
  }

  // string trace = 22;
  if (this->trace().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trace().data(), static_cast<int>(this->_internal_trace().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntry.trace");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_trace(), target);
  }

  // .google.logging.v2.LogEntrySourceLocation source_location = 23;
  if (this->has_source_location()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        23, _Internal::source_location(this), target, stream);
  }

  // .google.protobuf.Timestamp receive_timestamp = 24;
  if (this->has_receive_timestamp()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        24, _Internal::receive_timestamp(this), target, stream);
  }

  // .google.api.MonitoredResourceMetadata metadata = 25 [deprecated = true];
  if (this->has_metadata()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        25, _Internal::metadata(this), target, stream);
  }

  // string span_id = 27;
  if (this->span_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_span_id().data(), static_cast<int>(this->_internal_span_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntry.span_id");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_span_id(), target);
  }

  // bool trace_sampled = 30;
  if (this->trace_sampled() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_trace_sampled(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.logging.v2.LogEntry)
  return target;
}

size_t LogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.logging.v2.LogEntry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> labels = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_labels_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_labels().begin();
      it != this->_internal_labels().end(); ++it) {
    total_size += LogEntry_LabelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string insert_id = 4;
  if (this->insert_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_insert_id());
  }

  // string log_name = 12;
  if (this->log_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_log_name());
  }

  // string trace = 22;
  if (this->trace().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trace());
  }

  // string span_id = 27;
  if (this->span_id().size() > 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_span_id());
  }

  // .google.logging.type.HttpRequest http_request = 7;
  if (this->has_http_request()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *http_request_);
  }

  // .google.api.MonitoredResource resource = 8;
  if (this->has_resource()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *resource_);
  }

  // .google.protobuf.Timestamp timestamp = 9;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .google.logging.v2.LogEntryOperation operation = 15;
  if (this->has_operation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *operation_);
  }

  // .google.logging.v2.LogEntrySourceLocation source_location = 23;
  if (this->has_source_location()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_location_);
  }

  // .google.protobuf.Timestamp receive_timestamp = 24;
  if (this->has_receive_timestamp()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *receive_timestamp_);
  }

  // .google.api.MonitoredResourceMetadata metadata = 25 [deprecated = true];
  if (this->has_metadata()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .google.logging.type.LogSeverity severity = 10;
  if (this->severity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_severity());
  }

  // bool trace_sampled = 30;
  if (this->trace_sampled() != 0) {
    total_size += 2 + 1;
  }

  switch (payload_case()) {
    // .google.protobuf.Any proto_payload = 2;
    case kProtoPayload: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.proto_payload_);
      break;
    }
    // string text_payload = 3;
    case kTextPayload: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text_payload());
      break;
    }
    // .google.protobuf.Struct json_payload = 6;
    case kJsonPayload: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *payload_.json_payload_);
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogEntry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.logging.v2.LogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const LogEntry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogEntry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.logging.v2.LogEntry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.logging.v2.LogEntry)
    MergeFrom(*source);
  }
}

void LogEntry::MergeFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.logging.v2.LogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  labels_.MergeFrom(from.labels_);
  if (from.insert_id().size() > 0) {
    _internal_set_insert_id(from._internal_insert_id());
  }
  if (from.log_name().size() > 0) {
    _internal_set_log_name(from._internal_log_name());
  }
  if (from.trace().size() > 0) {
    _internal_set_trace(from._internal_trace());
  }
  if (from.span_id().size() > 0) {
    _internal_set_span_id(from._internal_span_id());
  }
  if (from.has_http_request()) {
    _internal_mutable_http_request()->::google::logging::type::HttpRequest::MergeFrom(from._internal_http_request());
  }
  if (from.has_resource()) {
    _internal_mutable_resource()->::google::api::MonitoredResource::MergeFrom(from._internal_resource());
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from.has_operation()) {
    _internal_mutable_operation()->::google::logging::v2::LogEntryOperation::MergeFrom(from._internal_operation());
  }
  if (from.has_source_location()) {
    _internal_mutable_source_location()->::google::logging::v2::LogEntrySourceLocation::MergeFrom(from._internal_source_location());
  }
  if (from.has_receive_timestamp()) {
    _internal_mutable_receive_timestamp()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_receive_timestamp());
  }
  if (from.has_metadata()) {
    _internal_mutable_metadata()->::google::api::MonitoredResourceMetadata::MergeFrom(from._internal_metadata());
  }
  if (from.severity() != 0) {
    _internal_set_severity(from._internal_severity());
  }
  if (from.trace_sampled() != 0) {
    _internal_set_trace_sampled(from._internal_trace_sampled());
  }
  switch (from.payload_case()) {
    case kProtoPayload: {
      _internal_mutable_proto_payload()->PROTOBUF_NAMESPACE_ID::Any::MergeFrom(from._internal_proto_payload());
      break;
    }
    case kTextPayload: {
      _internal_set_text_payload(from._internal_text_payload());
      break;
    }
    case kJsonPayload: {
      _internal_mutable_json_payload()->PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_json_payload());
      break;
    }
    case PAYLOAD_NOT_SET: {
      break;
    }
  }
}

void LogEntry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.logging.v2.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogEntry::CopyFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.logging.v2.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntry::IsInitialized() const {
  return true;
}

void LogEntry::InternalSwap(LogEntry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  labels_.Swap(&other->labels_);
  insert_id_.Swap(&other->insert_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  log_name_.Swap(&other->log_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  trace_.Swap(&other->trace_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  span_id_.Swap(&other->span_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(http_request_, other->http_request_);
  swap(resource_, other->resource_);
  swap(timestamp_, other->timestamp_);
  swap(operation_, other->operation_);
  swap(source_location_, other->source_location_);
  swap(receive_timestamp_, other->receive_timestamp_);
  swap(metadata_, other->metadata_);
  swap(severity_, other->severity_);
  swap(trace_sampled_, other->trace_sampled_);
  swap(payload_, other->payload_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogEntry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogEntryOperation::InitAsDefaultInstance() {
}
class LogEntryOperation::_Internal {
 public:
};

LogEntryOperation::LogEntryOperation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.logging.v2.LogEntryOperation)
}
LogEntryOperation::LogEntryOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.logging.v2.LogEntryOperation)
}
LogEntryOperation::LogEntryOperation(const LogEntryOperation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArenaNoVirtual());
  }
  producer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_producer().empty()) {
    producer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_producer(),
      GetArenaNoVirtual());
  }
  ::memcpy(&first_, &from.first_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_) -
    reinterpret_cast<char*>(&first_)) + sizeof(last_));
  // @@protoc_insertion_point(copy_constructor:google.logging.v2.LogEntryOperation)
}

void LogEntryOperation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogEntryOperation_google_2flogging_2fv2_2flog_5fentry_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  producer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&first_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_) -
      reinterpret_cast<char*>(&first_)) + sizeof(last_));
}

LogEntryOperation::~LogEntryOperation() {
  // @@protoc_insertion_point(destructor:google.logging.v2.LogEntryOperation)
  SharedDtor();
}

void LogEntryOperation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  producer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogEntryOperation::ArenaDtor(void* object) {
  LogEntryOperation* _this = reinterpret_cast< LogEntryOperation* >(object);
  (void)_this;
}
void LogEntryOperation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogEntryOperation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogEntryOperation& LogEntryOperation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogEntryOperation_google_2flogging_2fv2_2flog_5fentry_2eproto.base);
  return *internal_default_instance();
}


void LogEntryOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.logging.v2.LogEntryOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  producer_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  ::memset(&first_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_) -
      reinterpret_cast<char*>(&first_)) + sizeof(last_));
  _internal_metadata_.Clear();
}

const char* LogEntryOperation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_id(), ptr, ctx, "google.logging.v2.LogEntryOperation.id");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string producer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_producer(), ptr, ctx, "google.logging.v2.LogEntryOperation.producer");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool first = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          first_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool last = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          last_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogEntryOperation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.logging.v2.LogEntryOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntryOperation.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string producer = 2;
  if (this->producer().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_producer().data(), static_cast<int>(this->_internal_producer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntryOperation.producer");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_producer(), target);
  }

  // bool first = 3;
  if (this->first() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_first(), target);
  }

  // bool last = 4;
  if (this->last() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_last(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.logging.v2.LogEntryOperation)
  return target;
}

size_t LogEntryOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.logging.v2.LogEntryOperation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string producer = 2;
  if (this->producer().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_producer());
  }

  // bool first = 3;
  if (this->first() != 0) {
    total_size += 1 + 1;
  }

  // bool last = 4;
  if (this->last() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogEntryOperation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.logging.v2.LogEntryOperation)
  GOOGLE_DCHECK_NE(&from, this);
  const LogEntryOperation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogEntryOperation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.logging.v2.LogEntryOperation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.logging.v2.LogEntryOperation)
    MergeFrom(*source);
  }
}

void LogEntryOperation::MergeFrom(const LogEntryOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.logging.v2.LogEntryOperation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {
    _internal_set_id(from._internal_id());
  }
  if (from.producer().size() > 0) {
    _internal_set_producer(from._internal_producer());
  }
  if (from.first() != 0) {
    _internal_set_first(from._internal_first());
  }
  if (from.last() != 0) {
    _internal_set_last(from._internal_last());
  }
}

void LogEntryOperation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.logging.v2.LogEntryOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogEntryOperation::CopyFrom(const LogEntryOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.logging.v2.LogEntryOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntryOperation::IsInitialized() const {
  return true;
}

void LogEntryOperation::InternalSwap(LogEntryOperation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  producer_.Swap(&other->producer_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(first_, other->first_);
  swap(last_, other->last_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogEntryOperation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogEntrySourceLocation::InitAsDefaultInstance() {
}
class LogEntrySourceLocation::_Internal {
 public:
};

LogEntrySourceLocation::LogEntrySourceLocation()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:google.logging.v2.LogEntrySourceLocation)
}
LogEntrySourceLocation::LogEntrySourceLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
  _internal_metadata_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:google.logging.v2.LogEntrySourceLocation)
}
LogEntrySourceLocation::LogEntrySourceLocation(const LogEntrySourceLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file().empty()) {
    file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_file(),
      GetArenaNoVirtual());
  }
  function_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_function().empty()) {
    function_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_function(),
      GetArenaNoVirtual());
  }
  line_ = from.line_;
  // @@protoc_insertion_point(copy_constructor:google.logging.v2.LogEntrySourceLocation)
}

void LogEntrySourceLocation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogEntrySourceLocation_google_2flogging_2fv2_2flog_5fentry_2eproto.base);
  file_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  function_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  line_ = PROTOBUF_LONGLONG(0);
}

LogEntrySourceLocation::~LogEntrySourceLocation() {
  // @@protoc_insertion_point(destructor:google.logging.v2.LogEntrySourceLocation)
  SharedDtor();
}

void LogEntrySourceLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaNoVirtual() == nullptr);
  file_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  function_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogEntrySourceLocation::ArenaDtor(void* object) {
  LogEntrySourceLocation* _this = reinterpret_cast< LogEntrySourceLocation* >(object);
  (void)_this;
}
void LogEntrySourceLocation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LogEntrySourceLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogEntrySourceLocation& LogEntrySourceLocation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogEntrySourceLocation_google_2flogging_2fv2_2flog_5fentry_2eproto.base);
  return *internal_default_instance();
}


void LogEntrySourceLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:google.logging.v2.LogEntrySourceLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  function_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
  line_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear();
}

const char* LogEntrySourceLocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaNoVirtual(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string file = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_file(), ptr, ctx, "google.logging.v2.LogEntrySourceLocation.file");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 line = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string function = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_function(), ptr, ctx, "google.logging.v2.LogEntrySourceLocation.function");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogEntrySourceLocation::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:google.logging.v2.LogEntrySourceLocation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file = 1;
  if (this->file().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file().data(), static_cast<int>(this->_internal_file().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntrySourceLocation.file");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file(), target);
  }

  // int64 line = 2;
  if (this->line() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_line(), target);
  }

  // string function = 3;
  if (this->function().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_function().data(), static_cast<int>(this->_internal_function().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "google.logging.v2.LogEntrySourceLocation.function");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_function(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:google.logging.v2.LogEntrySourceLocation)
  return target;
}

size_t LogEntrySourceLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:google.logging.v2.LogEntrySourceLocation)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file = 1;
  if (this->file().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file());
  }

  // string function = 3;
  if (this->function().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_function());
  }

  // int64 line = 2;
  if (this->line() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_line());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogEntrySourceLocation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:google.logging.v2.LogEntrySourceLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const LogEntrySourceLocation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogEntrySourceLocation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:google.logging.v2.LogEntrySourceLocation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:google.logging.v2.LogEntrySourceLocation)
    MergeFrom(*source);
  }
}

void LogEntrySourceLocation::MergeFrom(const LogEntrySourceLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:google.logging.v2.LogEntrySourceLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file().size() > 0) {
    _internal_set_file(from._internal_file());
  }
  if (from.function().size() > 0) {
    _internal_set_function(from._internal_function());
  }
  if (from.line() != 0) {
    _internal_set_line(from._internal_line());
  }
}

void LogEntrySourceLocation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:google.logging.v2.LogEntrySourceLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogEntrySourceLocation::CopyFrom(const LogEntrySourceLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:google.logging.v2.LogEntrySourceLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntrySourceLocation::IsInitialized() const {
  return true;
}

void LogEntrySourceLocation::InternalSwap(LogEntrySourceLocation* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  file_.Swap(&other->file_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  function_.Swap(&other->function_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(line_, other->line_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogEntrySourceLocation::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace logging
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::google::logging::v2::LogEntry_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::google::logging::v2::LogEntry_LabelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::logging::v2::LogEntry_LabelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::google::logging::v2::LogEntry* Arena::CreateMaybeMessage< ::google::logging::v2::LogEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::logging::v2::LogEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::google::logging::v2::LogEntryOperation* Arena::CreateMaybeMessage< ::google::logging::v2::LogEntryOperation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::logging::v2::LogEntryOperation >(arena);
}
template<> PROTOBUF_NOINLINE ::google::logging::v2::LogEntrySourceLocation* Arena::CreateMaybeMessage< ::google::logging::v2::LogEntrySourceLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::google::logging::v2::LogEntrySourceLocation >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
