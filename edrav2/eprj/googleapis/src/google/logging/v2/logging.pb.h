// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/logging/v2/logging.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2flogging_2fv2_2flogging_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2flogging_2fv2_2flogging_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/monitored_resource.pb.h"
#include "google/logging/v2/log_entry.pb.h"
#include "google/logging/v2/logging_config.pb.h"
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "google/rpc/status.pb.h"
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2flogging_2fv2_2flogging_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2flogging_2fv2_2flogging_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[12]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2flogging_2fv2_2flogging_2eproto;
namespace google {
namespace logging {
namespace v2 {
class DeleteLogRequest;
class DeleteLogRequestDefaultTypeInternal;
extern DeleteLogRequestDefaultTypeInternal _DeleteLogRequest_default_instance_;
class ListLogEntriesRequest;
class ListLogEntriesRequestDefaultTypeInternal;
extern ListLogEntriesRequestDefaultTypeInternal _ListLogEntriesRequest_default_instance_;
class ListLogEntriesResponse;
class ListLogEntriesResponseDefaultTypeInternal;
extern ListLogEntriesResponseDefaultTypeInternal _ListLogEntriesResponse_default_instance_;
class ListLogsRequest;
class ListLogsRequestDefaultTypeInternal;
extern ListLogsRequestDefaultTypeInternal _ListLogsRequest_default_instance_;
class ListLogsResponse;
class ListLogsResponseDefaultTypeInternal;
extern ListLogsResponseDefaultTypeInternal _ListLogsResponse_default_instance_;
class ListMonitoredResourceDescriptorsRequest;
class ListMonitoredResourceDescriptorsRequestDefaultTypeInternal;
extern ListMonitoredResourceDescriptorsRequestDefaultTypeInternal _ListMonitoredResourceDescriptorsRequest_default_instance_;
class ListMonitoredResourceDescriptorsResponse;
class ListMonitoredResourceDescriptorsResponseDefaultTypeInternal;
extern ListMonitoredResourceDescriptorsResponseDefaultTypeInternal _ListMonitoredResourceDescriptorsResponse_default_instance_;
class WriteLogEntriesPartialErrors;
class WriteLogEntriesPartialErrorsDefaultTypeInternal;
extern WriteLogEntriesPartialErrorsDefaultTypeInternal _WriteLogEntriesPartialErrors_default_instance_;
class WriteLogEntriesPartialErrors_LogEntryErrorsEntry_DoNotUse;
class WriteLogEntriesPartialErrors_LogEntryErrorsEntry_DoNotUseDefaultTypeInternal;
extern WriteLogEntriesPartialErrors_LogEntryErrorsEntry_DoNotUseDefaultTypeInternal _WriteLogEntriesPartialErrors_LogEntryErrorsEntry_DoNotUse_default_instance_;
class WriteLogEntriesRequest;
class WriteLogEntriesRequestDefaultTypeInternal;
extern WriteLogEntriesRequestDefaultTypeInternal _WriteLogEntriesRequest_default_instance_;
class WriteLogEntriesRequest_LabelsEntry_DoNotUse;
class WriteLogEntriesRequest_LabelsEntry_DoNotUseDefaultTypeInternal;
extern WriteLogEntriesRequest_LabelsEntry_DoNotUseDefaultTypeInternal _WriteLogEntriesRequest_LabelsEntry_DoNotUse_default_instance_;
class WriteLogEntriesResponse;
class WriteLogEntriesResponseDefaultTypeInternal;
extern WriteLogEntriesResponseDefaultTypeInternal _WriteLogEntriesResponse_default_instance_;
}  // namespace v2
}  // namespace logging
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::logging::v2::DeleteLogRequest* Arena::CreateMaybeMessage<::google::logging::v2::DeleteLogRequest>(Arena*);
template<> ::google::logging::v2::ListLogEntriesRequest* Arena::CreateMaybeMessage<::google::logging::v2::ListLogEntriesRequest>(Arena*);
template<> ::google::logging::v2::ListLogEntriesResponse* Arena::CreateMaybeMessage<::google::logging::v2::ListLogEntriesResponse>(Arena*);
template<> ::google::logging::v2::ListLogsRequest* Arena::CreateMaybeMessage<::google::logging::v2::ListLogsRequest>(Arena*);
template<> ::google::logging::v2::ListLogsResponse* Arena::CreateMaybeMessage<::google::logging::v2::ListLogsResponse>(Arena*);
template<> ::google::logging::v2::ListMonitoredResourceDescriptorsRequest* Arena::CreateMaybeMessage<::google::logging::v2::ListMonitoredResourceDescriptorsRequest>(Arena*);
template<> ::google::logging::v2::ListMonitoredResourceDescriptorsResponse* Arena::CreateMaybeMessage<::google::logging::v2::ListMonitoredResourceDescriptorsResponse>(Arena*);
template<> ::google::logging::v2::WriteLogEntriesPartialErrors* Arena::CreateMaybeMessage<::google::logging::v2::WriteLogEntriesPartialErrors>(Arena*);
template<> ::google::logging::v2::WriteLogEntriesPartialErrors_LogEntryErrorsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::logging::v2::WriteLogEntriesPartialErrors_LogEntryErrorsEntry_DoNotUse>(Arena*);
template<> ::google::logging::v2::WriteLogEntriesRequest* Arena::CreateMaybeMessage<::google::logging::v2::WriteLogEntriesRequest>(Arena*);
template<> ::google::logging::v2::WriteLogEntriesRequest_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::logging::v2::WriteLogEntriesRequest_LabelsEntry_DoNotUse>(Arena*);
template<> ::google::logging::v2::WriteLogEntriesResponse* Arena::CreateMaybeMessage<::google::logging::v2::WriteLogEntriesResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace logging {
namespace v2 {

// ===================================================================

class DeleteLogRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.DeleteLogRequest) */ {
 public:
  DeleteLogRequest();
  virtual ~DeleteLogRequest();

  DeleteLogRequest(const DeleteLogRequest& from);
  DeleteLogRequest(DeleteLogRequest&& from) noexcept
    : DeleteLogRequest() {
    *this = ::std::move(from);
  }

  inline DeleteLogRequest& operator=(const DeleteLogRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteLogRequest& operator=(DeleteLogRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteLogRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteLogRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteLogRequest*>(
               &_DeleteLogRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DeleteLogRequest& a, DeleteLogRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteLogRequest* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteLogRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteLogRequest* New() const final {
    return CreateMaybeMessage<DeleteLogRequest>(nullptr);
  }

  DeleteLogRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteLogRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteLogRequest& from);
  void MergeFrom(const DeleteLogRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteLogRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.logging.v2.DeleteLogRequest";
  }
  protected:
  explicit DeleteLogRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2flogging_2fv2_2flogging_2eproto);
    return ::descriptor_table_google_2flogging_2fv2_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogNameFieldNumber = 1,
  };
  // string log_name = 1;
  void clear_log_name();
  const std::string& log_name() const;
  void set_log_name(const std::string& value);
  void set_log_name(std::string&& value);
  void set_log_name(const char* value);
  void set_log_name(const char* value, size_t size);
  std::string* mutable_log_name();
  std::string* release_log_name();
  void set_allocated_log_name(std::string* log_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_log_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_log_name(
      std::string* log_name);
  private:
  const std::string& _internal_log_name() const;
  void _internal_set_log_name(const std::string& value);
  std::string* _internal_mutable_log_name();
  public:

  // @@protoc_insertion_point(class_scope:google.logging.v2.DeleteLogRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2flogging_2fv2_2flogging_2eproto;
};
// -------------------------------------------------------------------

class WriteLogEntriesRequest_LabelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<WriteLogEntriesRequest_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<WriteLogEntriesRequest_LabelsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  WriteLogEntriesRequest_LabelsEntry_DoNotUse();
  WriteLogEntriesRequest_LabelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const WriteLogEntriesRequest_LabelsEntry_DoNotUse& other);
  static const WriteLogEntriesRequest_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const WriteLogEntriesRequest_LabelsEntry_DoNotUse*>(&_WriteLogEntriesRequest_LabelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.logging.v2.WriteLogEntriesRequest.LabelsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "google.logging.v2.WriteLogEntriesRequest.LabelsEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2flogging_2fv2_2flogging_2eproto);
    return ::descriptor_table_google_2flogging_2fv2_2flogging_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class WriteLogEntriesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.WriteLogEntriesRequest) */ {
 public:
  WriteLogEntriesRequest();
  virtual ~WriteLogEntriesRequest();

  WriteLogEntriesRequest(const WriteLogEntriesRequest& from);
  WriteLogEntriesRequest(WriteLogEntriesRequest&& from) noexcept
    : WriteLogEntriesRequest() {
    *this = ::std::move(from);
  }

  inline WriteLogEntriesRequest& operator=(const WriteLogEntriesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteLogEntriesRequest& operator=(WriteLogEntriesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WriteLogEntriesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteLogEntriesRequest* internal_default_instance() {
    return reinterpret_cast<const WriteLogEntriesRequest*>(
               &_WriteLogEntriesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(WriteLogEntriesRequest& a, WriteLogEntriesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteLogEntriesRequest* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteLogEntriesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteLogEntriesRequest* New() const final {
    return CreateMaybeMessage<WriteLogEntriesRequest>(nullptr);
  }

  WriteLogEntriesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteLogEntriesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WriteLogEntriesRequest& from);
  void MergeFrom(const WriteLogEntriesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteLogEntriesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.logging.v2.WriteLogEntriesRequest";
  }
  protected:
  explicit WriteLogEntriesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2flogging_2fv2_2flogging_2eproto);
    return ::descriptor_table_google_2flogging_2fv2_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLabelsFieldNumber = 3,
    kEntriesFieldNumber = 4,
    kLogNameFieldNumber = 1,
    kResourceFieldNumber = 2,
    kPartialSuccessFieldNumber = 5,
    kDryRunFieldNumber = 6,
  };
  // map<string, string> labels = 3;
  int labels_size() const;
  private:
  int _internal_labels_size() const;
  public:
  void clear_labels();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_labels();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      labels() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_labels();

  // repeated .google.logging.v2.LogEntry entries = 4;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::google::logging::v2::LogEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::logging::v2::LogEntry >*
      mutable_entries();
  private:
  const ::google::logging::v2::LogEntry& _internal_entries(int index) const;
  ::google::logging::v2::LogEntry* _internal_add_entries();
  public:
  const ::google::logging::v2::LogEntry& entries(int index) const;
  ::google::logging::v2::LogEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::logging::v2::LogEntry >&
      entries() const;

  // string log_name = 1;
  void clear_log_name();
  const std::string& log_name() const;
  void set_log_name(const std::string& value);
  void set_log_name(std::string&& value);
  void set_log_name(const char* value);
  void set_log_name(const char* value, size_t size);
  std::string* mutable_log_name();
  std::string* release_log_name();
  void set_allocated_log_name(std::string* log_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_log_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_log_name(
      std::string* log_name);
  private:
  const std::string& _internal_log_name() const;
  void _internal_set_log_name(const std::string& value);
  std::string* _internal_mutable_log_name();
  public:

  // .google.api.MonitoredResource resource = 2;
  bool has_resource() const;
  private:
  bool _internal_has_resource() const;
  public:
  void clear_resource();
  const ::google::api::MonitoredResource& resource() const;
  ::google::api::MonitoredResource* release_resource();
  ::google::api::MonitoredResource* mutable_resource();
  void set_allocated_resource(::google::api::MonitoredResource* resource);
  private:
  const ::google::api::MonitoredResource& _internal_resource() const;
  ::google::api::MonitoredResource* _internal_mutable_resource();
  public:
  void unsafe_arena_set_allocated_resource(
      ::google::api::MonitoredResource* resource);
  ::google::api::MonitoredResource* unsafe_arena_release_resource();

  // bool partial_success = 5;
  void clear_partial_success();
  bool partial_success() const;
  void set_partial_success(bool value);
  private:
  bool _internal_partial_success() const;
  void _internal_set_partial_success(bool value);
  public:

  // bool dry_run = 6;
  void clear_dry_run();
  bool dry_run() const;
  void set_dry_run(bool value);
  private:
  bool _internal_dry_run() const;
  void _internal_set_dry_run(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.logging.v2.WriteLogEntriesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      WriteLogEntriesRequest_LabelsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::logging::v2::LogEntry > entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr log_name_;
  ::google::api::MonitoredResource* resource_;
  bool partial_success_;
  bool dry_run_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2flogging_2fv2_2flogging_2eproto;
};
// -------------------------------------------------------------------

class WriteLogEntriesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.WriteLogEntriesResponse) */ {
 public:
  WriteLogEntriesResponse();
  virtual ~WriteLogEntriesResponse();

  WriteLogEntriesResponse(const WriteLogEntriesResponse& from);
  WriteLogEntriesResponse(WriteLogEntriesResponse&& from) noexcept
    : WriteLogEntriesResponse() {
    *this = ::std::move(from);
  }

  inline WriteLogEntriesResponse& operator=(const WriteLogEntriesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteLogEntriesResponse& operator=(WriteLogEntriesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WriteLogEntriesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteLogEntriesResponse* internal_default_instance() {
    return reinterpret_cast<const WriteLogEntriesResponse*>(
               &_WriteLogEntriesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(WriteLogEntriesResponse& a, WriteLogEntriesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteLogEntriesResponse* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteLogEntriesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteLogEntriesResponse* New() const final {
    return CreateMaybeMessage<WriteLogEntriesResponse>(nullptr);
  }

  WriteLogEntriesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteLogEntriesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WriteLogEntriesResponse& from);
  void MergeFrom(const WriteLogEntriesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteLogEntriesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.logging.v2.WriteLogEntriesResponse";
  }
  protected:
  explicit WriteLogEntriesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2flogging_2fv2_2flogging_2eproto);
    return ::descriptor_table_google_2flogging_2fv2_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:google.logging.v2.WriteLogEntriesResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2flogging_2fv2_2flogging_2eproto;
};
// -------------------------------------------------------------------

class WriteLogEntriesPartialErrors_LogEntryErrorsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<WriteLogEntriesPartialErrors_LogEntryErrorsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::google::rpc::Status,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<WriteLogEntriesPartialErrors_LogEntryErrorsEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::google::rpc::Status,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  WriteLogEntriesPartialErrors_LogEntryErrorsEntry_DoNotUse();
  WriteLogEntriesPartialErrors_LogEntryErrorsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const WriteLogEntriesPartialErrors_LogEntryErrorsEntry_DoNotUse& other);
  static const WriteLogEntriesPartialErrors_LogEntryErrorsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const WriteLogEntriesPartialErrors_LogEntryErrorsEntry_DoNotUse*>(&_WriteLogEntriesPartialErrors_LogEntryErrorsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2flogging_2fv2_2flogging_2eproto);
    return ::descriptor_table_google_2flogging_2fv2_2flogging_2eproto.file_level_metadata[4];
  }

  public:
};

// -------------------------------------------------------------------

class WriteLogEntriesPartialErrors :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.WriteLogEntriesPartialErrors) */ {
 public:
  WriteLogEntriesPartialErrors();
  virtual ~WriteLogEntriesPartialErrors();

  WriteLogEntriesPartialErrors(const WriteLogEntriesPartialErrors& from);
  WriteLogEntriesPartialErrors(WriteLogEntriesPartialErrors&& from) noexcept
    : WriteLogEntriesPartialErrors() {
    *this = ::std::move(from);
  }

  inline WriteLogEntriesPartialErrors& operator=(const WriteLogEntriesPartialErrors& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteLogEntriesPartialErrors& operator=(WriteLogEntriesPartialErrors&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WriteLogEntriesPartialErrors& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteLogEntriesPartialErrors* internal_default_instance() {
    return reinterpret_cast<const WriteLogEntriesPartialErrors*>(
               &_WriteLogEntriesPartialErrors_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(WriteLogEntriesPartialErrors& a, WriteLogEntriesPartialErrors& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteLogEntriesPartialErrors* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WriteLogEntriesPartialErrors* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteLogEntriesPartialErrors* New() const final {
    return CreateMaybeMessage<WriteLogEntriesPartialErrors>(nullptr);
  }

  WriteLogEntriesPartialErrors* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteLogEntriesPartialErrors>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WriteLogEntriesPartialErrors& from);
  void MergeFrom(const WriteLogEntriesPartialErrors& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteLogEntriesPartialErrors* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.logging.v2.WriteLogEntriesPartialErrors";
  }
  protected:
  explicit WriteLogEntriesPartialErrors(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2flogging_2fv2_2flogging_2eproto);
    return ::descriptor_table_google_2flogging_2fv2_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kLogEntryErrorsFieldNumber = 1,
  };
  // map<int32, .google.rpc.Status> log_entry_errors = 1;
  int log_entry_errors_size() const;
  private:
  int _internal_log_entry_errors_size() const;
  public:
  void clear_log_entry_errors();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::google::rpc::Status >&
      _internal_log_entry_errors() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::google::rpc::Status >*
      _internal_mutable_log_entry_errors();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::google::rpc::Status >&
      log_entry_errors() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::google::rpc::Status >*
      mutable_log_entry_errors();

  // @@protoc_insertion_point(class_scope:google.logging.v2.WriteLogEntriesPartialErrors)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      WriteLogEntriesPartialErrors_LogEntryErrorsEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::google::rpc::Status,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > log_entry_errors_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2flogging_2fv2_2flogging_2eproto;
};
// -------------------------------------------------------------------

class ListLogEntriesRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.ListLogEntriesRequest) */ {
 public:
  ListLogEntriesRequest();
  virtual ~ListLogEntriesRequest();

  ListLogEntriesRequest(const ListLogEntriesRequest& from);
  ListLogEntriesRequest(ListLogEntriesRequest&& from) noexcept
    : ListLogEntriesRequest() {
    *this = ::std::move(from);
  }

  inline ListLogEntriesRequest& operator=(const ListLogEntriesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListLogEntriesRequest& operator=(ListLogEntriesRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListLogEntriesRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListLogEntriesRequest* internal_default_instance() {
    return reinterpret_cast<const ListLogEntriesRequest*>(
               &_ListLogEntriesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ListLogEntriesRequest& a, ListLogEntriesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListLogEntriesRequest* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListLogEntriesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListLogEntriesRequest* New() const final {
    return CreateMaybeMessage<ListLogEntriesRequest>(nullptr);
  }

  ListLogEntriesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListLogEntriesRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListLogEntriesRequest& from);
  void MergeFrom(const ListLogEntriesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListLogEntriesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.logging.v2.ListLogEntriesRequest";
  }
  protected:
  explicit ListLogEntriesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2flogging_2fv2_2flogging_2eproto);
    return ::descriptor_table_google_2flogging_2fv2_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectIdsFieldNumber = 1,
    kResourceNamesFieldNumber = 8,
    kFilterFieldNumber = 2,
    kOrderByFieldNumber = 3,
    kPageTokenFieldNumber = 5,
    kPageSizeFieldNumber = 4,
  };
  // repeated string project_ids = 1 [deprecated = true];
  PROTOBUF_DEPRECATED int project_ids_size() const;
  private:
  int _internal_project_ids_size() const;
  public:
  PROTOBUF_DEPRECATED void clear_project_ids();
  PROTOBUF_DEPRECATED const std::string& project_ids(int index) const;
  PROTOBUF_DEPRECATED std::string* mutable_project_ids(int index);
  PROTOBUF_DEPRECATED void set_project_ids(int index, const std::string& value);
  PROTOBUF_DEPRECATED void set_project_ids(int index, std::string&& value);
  PROTOBUF_DEPRECATED void set_project_ids(int index, const char* value);
  PROTOBUF_DEPRECATED void set_project_ids(int index, const char* value, size_t size);
  PROTOBUF_DEPRECATED std::string* add_project_ids();
  PROTOBUF_DEPRECATED void add_project_ids(const std::string& value);
  PROTOBUF_DEPRECATED void add_project_ids(std::string&& value);
  PROTOBUF_DEPRECATED void add_project_ids(const char* value);
  PROTOBUF_DEPRECATED void add_project_ids(const char* value, size_t size);
  PROTOBUF_DEPRECATED const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& project_ids() const;
  PROTOBUF_DEPRECATED ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_project_ids();
  private:
  const std::string& _internal_project_ids(int index) const;
  std::string* _internal_add_project_ids();
  public:

  // repeated string resource_names = 8;
  int resource_names_size() const;
  private:
  int _internal_resource_names_size() const;
  public:
  void clear_resource_names();
  const std::string& resource_names(int index) const;
  std::string* mutable_resource_names(int index);
  void set_resource_names(int index, const std::string& value);
  void set_resource_names(int index, std::string&& value);
  void set_resource_names(int index, const char* value);
  void set_resource_names(int index, const char* value, size_t size);
  std::string* add_resource_names();
  void add_resource_names(const std::string& value);
  void add_resource_names(std::string&& value);
  void add_resource_names(const char* value);
  void add_resource_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& resource_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_resource_names();
  private:
  const std::string& _internal_resource_names(int index) const;
  std::string* _internal_add_resource_names();
  public:

  // string filter = 2;
  void clear_filter();
  const std::string& filter() const;
  void set_filter(const std::string& value);
  void set_filter(std::string&& value);
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  std::string* mutable_filter();
  std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_filter();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_filter(
      std::string* filter);
  private:
  const std::string& _internal_filter() const;
  void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // string order_by = 3;
  void clear_order_by();
  const std::string& order_by() const;
  void set_order_by(const std::string& value);
  void set_order_by(std::string&& value);
  void set_order_by(const char* value);
  void set_order_by(const char* value, size_t size);
  std::string* mutable_order_by();
  std::string* release_order_by();
  void set_allocated_order_by(std::string* order_by);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_order_by();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_order_by(
      std::string* order_by);
  private:
  const std::string& _internal_order_by() const;
  void _internal_set_order_by(const std::string& value);
  std::string* _internal_mutable_order_by();
  public:

  // string page_token = 5;
  void clear_page_token();
  const std::string& page_token() const;
  void set_page_token(const std::string& value);
  void set_page_token(std::string&& value);
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  std::string* mutable_page_token();
  std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_page_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_page_token(
      std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 4;
  void clear_page_size();
  ::PROTOBUF_NAMESPACE_ID::int32 page_size() const;
  void set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_size() const;
  void _internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.logging.v2.ListLogEntriesRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> project_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> resource_names_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_by_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2flogging_2fv2_2flogging_2eproto;
};
// -------------------------------------------------------------------

class ListLogEntriesResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.ListLogEntriesResponse) */ {
 public:
  ListLogEntriesResponse();
  virtual ~ListLogEntriesResponse();

  ListLogEntriesResponse(const ListLogEntriesResponse& from);
  ListLogEntriesResponse(ListLogEntriesResponse&& from) noexcept
    : ListLogEntriesResponse() {
    *this = ::std::move(from);
  }

  inline ListLogEntriesResponse& operator=(const ListLogEntriesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListLogEntriesResponse& operator=(ListLogEntriesResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListLogEntriesResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListLogEntriesResponse* internal_default_instance() {
    return reinterpret_cast<const ListLogEntriesResponse*>(
               &_ListLogEntriesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ListLogEntriesResponse& a, ListLogEntriesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListLogEntriesResponse* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListLogEntriesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListLogEntriesResponse* New() const final {
    return CreateMaybeMessage<ListLogEntriesResponse>(nullptr);
  }

  ListLogEntriesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListLogEntriesResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListLogEntriesResponse& from);
  void MergeFrom(const ListLogEntriesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListLogEntriesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.logging.v2.ListLogEntriesResponse";
  }
  protected:
  explicit ListLogEntriesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2flogging_2fv2_2flogging_2eproto);
    return ::descriptor_table_google_2flogging_2fv2_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntriesFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.logging.v2.LogEntry entries = 1;
  int entries_size() const;
  private:
  int _internal_entries_size() const;
  public:
  void clear_entries();
  ::google::logging::v2::LogEntry* mutable_entries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::logging::v2::LogEntry >*
      mutable_entries();
  private:
  const ::google::logging::v2::LogEntry& _internal_entries(int index) const;
  ::google::logging::v2::LogEntry* _internal_add_entries();
  public:
  const ::google::logging::v2::LogEntry& entries(int index) const;
  ::google::logging::v2::LogEntry* add_entries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::logging::v2::LogEntry >&
      entries() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  void set_next_page_token(const std::string& value);
  void set_next_page_token(std::string&& value);
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  std::string* mutable_next_page_token();
  std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_next_page_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_next_page_token(
      std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.logging.v2.ListLogEntriesResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::logging::v2::LogEntry > entries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2flogging_2fv2_2flogging_2eproto;
};
// -------------------------------------------------------------------

class ListMonitoredResourceDescriptorsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.ListMonitoredResourceDescriptorsRequest) */ {
 public:
  ListMonitoredResourceDescriptorsRequest();
  virtual ~ListMonitoredResourceDescriptorsRequest();

  ListMonitoredResourceDescriptorsRequest(const ListMonitoredResourceDescriptorsRequest& from);
  ListMonitoredResourceDescriptorsRequest(ListMonitoredResourceDescriptorsRequest&& from) noexcept
    : ListMonitoredResourceDescriptorsRequest() {
    *this = ::std::move(from);
  }

  inline ListMonitoredResourceDescriptorsRequest& operator=(const ListMonitoredResourceDescriptorsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListMonitoredResourceDescriptorsRequest& operator=(ListMonitoredResourceDescriptorsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListMonitoredResourceDescriptorsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListMonitoredResourceDescriptorsRequest* internal_default_instance() {
    return reinterpret_cast<const ListMonitoredResourceDescriptorsRequest*>(
               &_ListMonitoredResourceDescriptorsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ListMonitoredResourceDescriptorsRequest& a, ListMonitoredResourceDescriptorsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListMonitoredResourceDescriptorsRequest* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListMonitoredResourceDescriptorsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListMonitoredResourceDescriptorsRequest* New() const final {
    return CreateMaybeMessage<ListMonitoredResourceDescriptorsRequest>(nullptr);
  }

  ListMonitoredResourceDescriptorsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListMonitoredResourceDescriptorsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListMonitoredResourceDescriptorsRequest& from);
  void MergeFrom(const ListMonitoredResourceDescriptorsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListMonitoredResourceDescriptorsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.logging.v2.ListMonitoredResourceDescriptorsRequest";
  }
  protected:
  explicit ListMonitoredResourceDescriptorsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2flogging_2fv2_2flogging_2eproto);
    return ::descriptor_table_google_2flogging_2fv2_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPageTokenFieldNumber = 2,
    kPageSizeFieldNumber = 1,
  };
  // string page_token = 2;
  void clear_page_token();
  const std::string& page_token() const;
  void set_page_token(const std::string& value);
  void set_page_token(std::string&& value);
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  std::string* mutable_page_token();
  std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_page_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_page_token(
      std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 1;
  void clear_page_size();
  ::PROTOBUF_NAMESPACE_ID::int32 page_size() const;
  void set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_size() const;
  void _internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.logging.v2.ListMonitoredResourceDescriptorsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2flogging_2fv2_2flogging_2eproto;
};
// -------------------------------------------------------------------

class ListMonitoredResourceDescriptorsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.ListMonitoredResourceDescriptorsResponse) */ {
 public:
  ListMonitoredResourceDescriptorsResponse();
  virtual ~ListMonitoredResourceDescriptorsResponse();

  ListMonitoredResourceDescriptorsResponse(const ListMonitoredResourceDescriptorsResponse& from);
  ListMonitoredResourceDescriptorsResponse(ListMonitoredResourceDescriptorsResponse&& from) noexcept
    : ListMonitoredResourceDescriptorsResponse() {
    *this = ::std::move(from);
  }

  inline ListMonitoredResourceDescriptorsResponse& operator=(const ListMonitoredResourceDescriptorsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListMonitoredResourceDescriptorsResponse& operator=(ListMonitoredResourceDescriptorsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListMonitoredResourceDescriptorsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListMonitoredResourceDescriptorsResponse* internal_default_instance() {
    return reinterpret_cast<const ListMonitoredResourceDescriptorsResponse*>(
               &_ListMonitoredResourceDescriptorsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ListMonitoredResourceDescriptorsResponse& a, ListMonitoredResourceDescriptorsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListMonitoredResourceDescriptorsResponse* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListMonitoredResourceDescriptorsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListMonitoredResourceDescriptorsResponse* New() const final {
    return CreateMaybeMessage<ListMonitoredResourceDescriptorsResponse>(nullptr);
  }

  ListMonitoredResourceDescriptorsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListMonitoredResourceDescriptorsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListMonitoredResourceDescriptorsResponse& from);
  void MergeFrom(const ListMonitoredResourceDescriptorsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListMonitoredResourceDescriptorsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.logging.v2.ListMonitoredResourceDescriptorsResponse";
  }
  protected:
  explicit ListMonitoredResourceDescriptorsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2flogging_2fv2_2flogging_2eproto);
    return ::descriptor_table_google_2flogging_2fv2_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceDescriptorsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.api.MonitoredResourceDescriptor resource_descriptors = 1;
  int resource_descriptors_size() const;
  private:
  int _internal_resource_descriptors_size() const;
  public:
  void clear_resource_descriptors();
  ::google::api::MonitoredResourceDescriptor* mutable_resource_descriptors(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MonitoredResourceDescriptor >*
      mutable_resource_descriptors();
  private:
  const ::google::api::MonitoredResourceDescriptor& _internal_resource_descriptors(int index) const;
  ::google::api::MonitoredResourceDescriptor* _internal_add_resource_descriptors();
  public:
  const ::google::api::MonitoredResourceDescriptor& resource_descriptors(int index) const;
  ::google::api::MonitoredResourceDescriptor* add_resource_descriptors();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MonitoredResourceDescriptor >&
      resource_descriptors() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  void set_next_page_token(const std::string& value);
  void set_next_page_token(std::string&& value);
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  std::string* mutable_next_page_token();
  std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_next_page_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_next_page_token(
      std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.logging.v2.ListMonitoredResourceDescriptorsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MonitoredResourceDescriptor > resource_descriptors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2flogging_2fv2_2flogging_2eproto;
};
// -------------------------------------------------------------------

class ListLogsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.ListLogsRequest) */ {
 public:
  ListLogsRequest();
  virtual ~ListLogsRequest();

  ListLogsRequest(const ListLogsRequest& from);
  ListLogsRequest(ListLogsRequest&& from) noexcept
    : ListLogsRequest() {
    *this = ::std::move(from);
  }

  inline ListLogsRequest& operator=(const ListLogsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListLogsRequest& operator=(ListLogsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListLogsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListLogsRequest* internal_default_instance() {
    return reinterpret_cast<const ListLogsRequest*>(
               &_ListLogsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ListLogsRequest& a, ListLogsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListLogsRequest* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListLogsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListLogsRequest* New() const final {
    return CreateMaybeMessage<ListLogsRequest>(nullptr);
  }

  ListLogsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListLogsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListLogsRequest& from);
  void MergeFrom(const ListLogsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListLogsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.logging.v2.ListLogsRequest";
  }
  protected:
  explicit ListLogsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2flogging_2fv2_2flogging_2eproto);
    return ::descriptor_table_google_2flogging_2fv2_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // string parent = 1;
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_parent();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_parent(
      std::string* parent);
  private:
  const std::string& _internal_parent() const;
  void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 3;
  void clear_page_token();
  const std::string& page_token() const;
  void set_page_token(const std::string& value);
  void set_page_token(std::string&& value);
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  std::string* mutable_page_token();
  std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_page_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_page_token(
      std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 2;
  void clear_page_size();
  ::PROTOBUF_NAMESPACE_ID::int32 page_size() const;
  void set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_size() const;
  void _internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.logging.v2.ListLogsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2flogging_2fv2_2flogging_2eproto;
};
// -------------------------------------------------------------------

class ListLogsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.ListLogsResponse) */ {
 public:
  ListLogsResponse();
  virtual ~ListLogsResponse();

  ListLogsResponse(const ListLogsResponse& from);
  ListLogsResponse(ListLogsResponse&& from) noexcept
    : ListLogsResponse() {
    *this = ::std::move(from);
  }

  inline ListLogsResponse& operator=(const ListLogsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListLogsResponse& operator=(ListLogsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListLogsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListLogsResponse* internal_default_instance() {
    return reinterpret_cast<const ListLogsResponse*>(
               &_ListLogsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ListLogsResponse& a, ListLogsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListLogsResponse* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListLogsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListLogsResponse* New() const final {
    return CreateMaybeMessage<ListLogsResponse>(nullptr);
  }

  ListLogsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListLogsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListLogsResponse& from);
  void MergeFrom(const ListLogsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListLogsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.logging.v2.ListLogsResponse";
  }
  protected:
  explicit ListLogsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2flogging_2fv2_2flogging_2eproto);
    return ::descriptor_table_google_2flogging_2fv2_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogNamesFieldNumber = 3,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated string log_names = 3;
  int log_names_size() const;
  private:
  int _internal_log_names_size() const;
  public:
  void clear_log_names();
  const std::string& log_names(int index) const;
  std::string* mutable_log_names(int index);
  void set_log_names(int index, const std::string& value);
  void set_log_names(int index, std::string&& value);
  void set_log_names(int index, const char* value);
  void set_log_names(int index, const char* value, size_t size);
  std::string* add_log_names();
  void add_log_names(const std::string& value);
  void add_log_names(std::string&& value);
  void add_log_names(const char* value);
  void add_log_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& log_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_log_names();
  private:
  const std::string& _internal_log_names(int index) const;
  std::string* _internal_add_log_names();
  public:

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  void set_next_page_token(const std::string& value);
  void set_next_page_token(std::string&& value);
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  std::string* mutable_next_page_token();
  std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_next_page_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_next_page_token(
      std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.logging.v2.ListLogsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> log_names_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2flogging_2fv2_2flogging_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DeleteLogRequest

// string log_name = 1;
inline void DeleteLogRequest::clear_log_name() {
  log_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& DeleteLogRequest::log_name() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.DeleteLogRequest.log_name)
  return _internal_log_name();
}
inline void DeleteLogRequest::set_log_name(const std::string& value) {
  _internal_set_log_name(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.DeleteLogRequest.log_name)
}
inline std::string* DeleteLogRequest::mutable_log_name() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.DeleteLogRequest.log_name)
  return _internal_mutable_log_name();
}
inline const std::string& DeleteLogRequest::_internal_log_name() const {
  return log_name_.Get();
}
inline void DeleteLogRequest::_internal_set_log_name(const std::string& value) {
  
  log_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void DeleteLogRequest::set_log_name(std::string&& value) {
  
  log_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.DeleteLogRequest.log_name)
}
inline void DeleteLogRequest::set_log_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  log_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.DeleteLogRequest.log_name)
}
inline void DeleteLogRequest::set_log_name(const char* value,
    size_t size) {
  
  log_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.DeleteLogRequest.log_name)
}
inline std::string* DeleteLogRequest::_internal_mutable_log_name() {
  
  return log_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* DeleteLogRequest::release_log_name() {
  // @@protoc_insertion_point(field_release:google.logging.v2.DeleteLogRequest.log_name)
  
  return log_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void DeleteLogRequest::set_allocated_log_name(std::string* log_name) {
  if (log_name != nullptr) {
    
  } else {
    
  }
  log_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), log_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.DeleteLogRequest.log_name)
}
inline std::string* DeleteLogRequest::unsafe_arena_release_log_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.DeleteLogRequest.log_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return log_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DeleteLogRequest::unsafe_arena_set_allocated_log_name(
    std::string* log_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (log_name != nullptr) {
    
  } else {
    
  }
  log_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      log_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.DeleteLogRequest.log_name)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// WriteLogEntriesRequest

// string log_name = 1;
inline void WriteLogEntriesRequest::clear_log_name() {
  log_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& WriteLogEntriesRequest::log_name() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.WriteLogEntriesRequest.log_name)
  return _internal_log_name();
}
inline void WriteLogEntriesRequest::set_log_name(const std::string& value) {
  _internal_set_log_name(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.WriteLogEntriesRequest.log_name)
}
inline std::string* WriteLogEntriesRequest::mutable_log_name() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.WriteLogEntriesRequest.log_name)
  return _internal_mutable_log_name();
}
inline const std::string& WriteLogEntriesRequest::_internal_log_name() const {
  return log_name_.Get();
}
inline void WriteLogEntriesRequest::_internal_set_log_name(const std::string& value) {
  
  log_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void WriteLogEntriesRequest::set_log_name(std::string&& value) {
  
  log_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.WriteLogEntriesRequest.log_name)
}
inline void WriteLogEntriesRequest::set_log_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  log_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.WriteLogEntriesRequest.log_name)
}
inline void WriteLogEntriesRequest::set_log_name(const char* value,
    size_t size) {
  
  log_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.WriteLogEntriesRequest.log_name)
}
inline std::string* WriteLogEntriesRequest::_internal_mutable_log_name() {
  
  return log_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* WriteLogEntriesRequest::release_log_name() {
  // @@protoc_insertion_point(field_release:google.logging.v2.WriteLogEntriesRequest.log_name)
  
  return log_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void WriteLogEntriesRequest::set_allocated_log_name(std::string* log_name) {
  if (log_name != nullptr) {
    
  } else {
    
  }
  log_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), log_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.WriteLogEntriesRequest.log_name)
}
inline std::string* WriteLogEntriesRequest::unsafe_arena_release_log_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.WriteLogEntriesRequest.log_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return log_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void WriteLogEntriesRequest::unsafe_arena_set_allocated_log_name(
    std::string* log_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (log_name != nullptr) {
    
  } else {
    
  }
  log_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      log_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.WriteLogEntriesRequest.log_name)
}

// .google.api.MonitoredResource resource = 2;
inline bool WriteLogEntriesRequest::_internal_has_resource() const {
  return this != internal_default_instance() && resource_ != nullptr;
}
inline bool WriteLogEntriesRequest::has_resource() const {
  return _internal_has_resource();
}
inline const ::google::api::MonitoredResource& WriteLogEntriesRequest::_internal_resource() const {
  const ::google::api::MonitoredResource* p = resource_;
  return p != nullptr ? *p : *reinterpret_cast<const ::google::api::MonitoredResource*>(
      &::google::api::_MonitoredResource_default_instance_);
}
inline const ::google::api::MonitoredResource& WriteLogEntriesRequest::resource() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.WriteLogEntriesRequest.resource)
  return _internal_resource();
}
inline ::google::api::MonitoredResource* WriteLogEntriesRequest::release_resource() {
  auto temp = unsafe_arena_release_resource();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::api::MonitoredResource* WriteLogEntriesRequest::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_release:google.logging.v2.WriteLogEntriesRequest.resource)
  
  ::google::api::MonitoredResource* temp = resource_;
  resource_ = nullptr;
  return temp;
}
inline ::google::api::MonitoredResource* WriteLogEntriesRequest::_internal_mutable_resource() {
  
  if (resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::api::MonitoredResource>(GetArenaNoVirtual());
    resource_ = p;
  }
  return resource_;
}
inline ::google::api::MonitoredResource* WriteLogEntriesRequest::mutable_resource() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.WriteLogEntriesRequest.resource)
  return _internal_mutable_resource();
}
inline void WriteLogEntriesRequest::set_allocated_resource(::google::api::MonitoredResource* resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource_);
  }
  if (resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource)->GetArena();
    if (message_arena != submessage_arena) {
      resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    
  } else {
    
  }
  resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.WriteLogEntriesRequest.resource)
}

// map<string, string> labels = 3;
inline int WriteLogEntriesRequest::_internal_labels_size() const {
  return labels_.size();
}
inline int WriteLogEntriesRequest::labels_size() const {
  return _internal_labels_size();
}
inline void WriteLogEntriesRequest::clear_labels() {
  labels_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
WriteLogEntriesRequest::_internal_labels() const {
  return labels_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
WriteLogEntriesRequest::labels() const {
  // @@protoc_insertion_point(field_map:google.logging.v2.WriteLogEntriesRequest.labels)
  return _internal_labels();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
WriteLogEntriesRequest::_internal_mutable_labels() {
  return labels_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
WriteLogEntriesRequest::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.logging.v2.WriteLogEntriesRequest.labels)
  return _internal_mutable_labels();
}

// repeated .google.logging.v2.LogEntry entries = 4;
inline int WriteLogEntriesRequest::_internal_entries_size() const {
  return entries_.size();
}
inline int WriteLogEntriesRequest::entries_size() const {
  return _internal_entries_size();
}
inline ::google::logging::v2::LogEntry* WriteLogEntriesRequest::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.WriteLogEntriesRequest.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::logging::v2::LogEntry >*
WriteLogEntriesRequest::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:google.logging.v2.WriteLogEntriesRequest.entries)
  return &entries_;
}
inline const ::google::logging::v2::LogEntry& WriteLogEntriesRequest::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::google::logging::v2::LogEntry& WriteLogEntriesRequest::entries(int index) const {
  // @@protoc_insertion_point(field_get:google.logging.v2.WriteLogEntriesRequest.entries)
  return _internal_entries(index);
}
inline ::google::logging::v2::LogEntry* WriteLogEntriesRequest::_internal_add_entries() {
  return entries_.Add();
}
inline ::google::logging::v2::LogEntry* WriteLogEntriesRequest::add_entries() {
  // @@protoc_insertion_point(field_add:google.logging.v2.WriteLogEntriesRequest.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::logging::v2::LogEntry >&
WriteLogEntriesRequest::entries() const {
  // @@protoc_insertion_point(field_list:google.logging.v2.WriteLogEntriesRequest.entries)
  return entries_;
}

// bool partial_success = 5;
inline void WriteLogEntriesRequest::clear_partial_success() {
  partial_success_ = false;
}
inline bool WriteLogEntriesRequest::_internal_partial_success() const {
  return partial_success_;
}
inline bool WriteLogEntriesRequest::partial_success() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.WriteLogEntriesRequest.partial_success)
  return _internal_partial_success();
}
inline void WriteLogEntriesRequest::_internal_set_partial_success(bool value) {
  
  partial_success_ = value;
}
inline void WriteLogEntriesRequest::set_partial_success(bool value) {
  _internal_set_partial_success(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.WriteLogEntriesRequest.partial_success)
}

// bool dry_run = 6;
inline void WriteLogEntriesRequest::clear_dry_run() {
  dry_run_ = false;
}
inline bool WriteLogEntriesRequest::_internal_dry_run() const {
  return dry_run_;
}
inline bool WriteLogEntriesRequest::dry_run() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.WriteLogEntriesRequest.dry_run)
  return _internal_dry_run();
}
inline void WriteLogEntriesRequest::_internal_set_dry_run(bool value) {
  
  dry_run_ = value;
}
inline void WriteLogEntriesRequest::set_dry_run(bool value) {
  _internal_set_dry_run(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.WriteLogEntriesRequest.dry_run)
}

// -------------------------------------------------------------------

// WriteLogEntriesResponse

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// WriteLogEntriesPartialErrors

// map<int32, .google.rpc.Status> log_entry_errors = 1;
inline int WriteLogEntriesPartialErrors::_internal_log_entry_errors_size() const {
  return log_entry_errors_.size();
}
inline int WriteLogEntriesPartialErrors::log_entry_errors_size() const {
  return _internal_log_entry_errors_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::google::rpc::Status >&
WriteLogEntriesPartialErrors::_internal_log_entry_errors() const {
  return log_entry_errors_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::google::rpc::Status >&
WriteLogEntriesPartialErrors::log_entry_errors() const {
  // @@protoc_insertion_point(field_map:google.logging.v2.WriteLogEntriesPartialErrors.log_entry_errors)
  return _internal_log_entry_errors();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::google::rpc::Status >*
WriteLogEntriesPartialErrors::_internal_mutable_log_entry_errors() {
  return log_entry_errors_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::google::rpc::Status >*
WriteLogEntriesPartialErrors::mutable_log_entry_errors() {
  // @@protoc_insertion_point(field_mutable_map:google.logging.v2.WriteLogEntriesPartialErrors.log_entry_errors)
  return _internal_mutable_log_entry_errors();
}

// -------------------------------------------------------------------

// ListLogEntriesRequest

// repeated string project_ids = 1 [deprecated = true];
inline int ListLogEntriesRequest::_internal_project_ids_size() const {
  return project_ids_.size();
}
inline int ListLogEntriesRequest::project_ids_size() const {
  return _internal_project_ids_size();
}
inline void ListLogEntriesRequest::clear_project_ids() {
  project_ids_.Clear();
}
inline std::string* ListLogEntriesRequest::add_project_ids() {
  // @@protoc_insertion_point(field_add_mutable:google.logging.v2.ListLogEntriesRequest.project_ids)
  return _internal_add_project_ids();
}
inline const std::string& ListLogEntriesRequest::_internal_project_ids(int index) const {
  return project_ids_.Get(index);
}
inline const std::string& ListLogEntriesRequest::project_ids(int index) const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListLogEntriesRequest.project_ids)
  return _internal_project_ids(index);
}
inline std::string* ListLogEntriesRequest::mutable_project_ids(int index) {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListLogEntriesRequest.project_ids)
  return project_ids_.Mutable(index);
}
inline void ListLogEntriesRequest::set_project_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:google.logging.v2.ListLogEntriesRequest.project_ids)
  project_ids_.Mutable(index)->assign(value);
}
inline void ListLogEntriesRequest::set_project_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:google.logging.v2.ListLogEntriesRequest.project_ids)
  project_ids_.Mutable(index)->assign(std::move(value));
}
inline void ListLogEntriesRequest::set_project_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  project_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.logging.v2.ListLogEntriesRequest.project_ids)
}
inline void ListLogEntriesRequest::set_project_ids(int index, const char* value, size_t size) {
  project_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.ListLogEntriesRequest.project_ids)
}
inline std::string* ListLogEntriesRequest::_internal_add_project_ids() {
  return project_ids_.Add();
}
inline void ListLogEntriesRequest::add_project_ids(const std::string& value) {
  project_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.logging.v2.ListLogEntriesRequest.project_ids)
}
inline void ListLogEntriesRequest::add_project_ids(std::string&& value) {
  project_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.logging.v2.ListLogEntriesRequest.project_ids)
}
inline void ListLogEntriesRequest::add_project_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  project_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.logging.v2.ListLogEntriesRequest.project_ids)
}
inline void ListLogEntriesRequest::add_project_ids(const char* value, size_t size) {
  project_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.logging.v2.ListLogEntriesRequest.project_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListLogEntriesRequest::project_ids() const {
  // @@protoc_insertion_point(field_list:google.logging.v2.ListLogEntriesRequest.project_ids)
  return project_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListLogEntriesRequest::mutable_project_ids() {
  // @@protoc_insertion_point(field_mutable_list:google.logging.v2.ListLogEntriesRequest.project_ids)
  return &project_ids_;
}

// repeated string resource_names = 8;
inline int ListLogEntriesRequest::_internal_resource_names_size() const {
  return resource_names_.size();
}
inline int ListLogEntriesRequest::resource_names_size() const {
  return _internal_resource_names_size();
}
inline void ListLogEntriesRequest::clear_resource_names() {
  resource_names_.Clear();
}
inline std::string* ListLogEntriesRequest::add_resource_names() {
  // @@protoc_insertion_point(field_add_mutable:google.logging.v2.ListLogEntriesRequest.resource_names)
  return _internal_add_resource_names();
}
inline const std::string& ListLogEntriesRequest::_internal_resource_names(int index) const {
  return resource_names_.Get(index);
}
inline const std::string& ListLogEntriesRequest::resource_names(int index) const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListLogEntriesRequest.resource_names)
  return _internal_resource_names(index);
}
inline std::string* ListLogEntriesRequest::mutable_resource_names(int index) {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListLogEntriesRequest.resource_names)
  return resource_names_.Mutable(index);
}
inline void ListLogEntriesRequest::set_resource_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:google.logging.v2.ListLogEntriesRequest.resource_names)
  resource_names_.Mutable(index)->assign(value);
}
inline void ListLogEntriesRequest::set_resource_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:google.logging.v2.ListLogEntriesRequest.resource_names)
  resource_names_.Mutable(index)->assign(std::move(value));
}
inline void ListLogEntriesRequest::set_resource_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  resource_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.logging.v2.ListLogEntriesRequest.resource_names)
}
inline void ListLogEntriesRequest::set_resource_names(int index, const char* value, size_t size) {
  resource_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.ListLogEntriesRequest.resource_names)
}
inline std::string* ListLogEntriesRequest::_internal_add_resource_names() {
  return resource_names_.Add();
}
inline void ListLogEntriesRequest::add_resource_names(const std::string& value) {
  resource_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.logging.v2.ListLogEntriesRequest.resource_names)
}
inline void ListLogEntriesRequest::add_resource_names(std::string&& value) {
  resource_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.logging.v2.ListLogEntriesRequest.resource_names)
}
inline void ListLogEntriesRequest::add_resource_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  resource_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.logging.v2.ListLogEntriesRequest.resource_names)
}
inline void ListLogEntriesRequest::add_resource_names(const char* value, size_t size) {
  resource_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.logging.v2.ListLogEntriesRequest.resource_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListLogEntriesRequest::resource_names() const {
  // @@protoc_insertion_point(field_list:google.logging.v2.ListLogEntriesRequest.resource_names)
  return resource_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListLogEntriesRequest::mutable_resource_names() {
  // @@protoc_insertion_point(field_mutable_list:google.logging.v2.ListLogEntriesRequest.resource_names)
  return &resource_names_;
}

// string filter = 2;
inline void ListLogEntriesRequest::clear_filter() {
  filter_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& ListLogEntriesRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListLogEntriesRequest.filter)
  return _internal_filter();
}
inline void ListLogEntriesRequest::set_filter(const std::string& value) {
  _internal_set_filter(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.ListLogEntriesRequest.filter)
}
inline std::string* ListLogEntriesRequest::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListLogEntriesRequest.filter)
  return _internal_mutable_filter();
}
inline const std::string& ListLogEntriesRequest::_internal_filter() const {
  return filter_.Get();
}
inline void ListLogEntriesRequest::_internal_set_filter(const std::string& value) {
  
  filter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void ListLogEntriesRequest::set_filter(std::string&& value) {
  
  filter_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.ListLogEntriesRequest.filter)
}
inline void ListLogEntriesRequest::set_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.ListLogEntriesRequest.filter)
}
inline void ListLogEntriesRequest::set_filter(const char* value,
    size_t size) {
  
  filter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.ListLogEntriesRequest.filter)
}
inline std::string* ListLogEntriesRequest::_internal_mutable_filter() {
  
  return filter_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* ListLogEntriesRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.logging.v2.ListLogEntriesRequest.filter)
  
  return filter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListLogEntriesRequest::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filter,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.ListLogEntriesRequest.filter)
}
inline std::string* ListLogEntriesRequest::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.ListLogEntriesRequest.filter)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return filter_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListLogEntriesRequest::unsafe_arena_set_allocated_filter(
    std::string* filter) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      filter, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.ListLogEntriesRequest.filter)
}

// string order_by = 3;
inline void ListLogEntriesRequest::clear_order_by() {
  order_by_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& ListLogEntriesRequest::order_by() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListLogEntriesRequest.order_by)
  return _internal_order_by();
}
inline void ListLogEntriesRequest::set_order_by(const std::string& value) {
  _internal_set_order_by(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.ListLogEntriesRequest.order_by)
}
inline std::string* ListLogEntriesRequest::mutable_order_by() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListLogEntriesRequest.order_by)
  return _internal_mutable_order_by();
}
inline const std::string& ListLogEntriesRequest::_internal_order_by() const {
  return order_by_.Get();
}
inline void ListLogEntriesRequest::_internal_set_order_by(const std::string& value) {
  
  order_by_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void ListLogEntriesRequest::set_order_by(std::string&& value) {
  
  order_by_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.ListLogEntriesRequest.order_by)
}
inline void ListLogEntriesRequest::set_order_by(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  order_by_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.ListLogEntriesRequest.order_by)
}
inline void ListLogEntriesRequest::set_order_by(const char* value,
    size_t size) {
  
  order_by_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.ListLogEntriesRequest.order_by)
}
inline std::string* ListLogEntriesRequest::_internal_mutable_order_by() {
  
  return order_by_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* ListLogEntriesRequest::release_order_by() {
  // @@protoc_insertion_point(field_release:google.logging.v2.ListLogEntriesRequest.order_by)
  
  return order_by_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListLogEntriesRequest::set_allocated_order_by(std::string* order_by) {
  if (order_by != nullptr) {
    
  } else {
    
  }
  order_by_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_by,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.ListLogEntriesRequest.order_by)
}
inline std::string* ListLogEntriesRequest::unsafe_arena_release_order_by() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.ListLogEntriesRequest.order_by)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return order_by_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListLogEntriesRequest::unsafe_arena_set_allocated_order_by(
    std::string* order_by) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (order_by != nullptr) {
    
  } else {
    
  }
  order_by_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      order_by, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.ListLogEntriesRequest.order_by)
}

// int32 page_size = 4;
inline void ListLogEntriesRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListLogEntriesRequest::_internal_page_size() const {
  return page_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListLogEntriesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListLogEntriesRequest.page_size)
  return _internal_page_size();
}
inline void ListLogEntriesRequest::_internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_size_ = value;
}
inline void ListLogEntriesRequest::set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.ListLogEntriesRequest.page_size)
}

// string page_token = 5;
inline void ListLogEntriesRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& ListLogEntriesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListLogEntriesRequest.page_token)
  return _internal_page_token();
}
inline void ListLogEntriesRequest::set_page_token(const std::string& value) {
  _internal_set_page_token(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.ListLogEntriesRequest.page_token)
}
inline std::string* ListLogEntriesRequest::mutable_page_token() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListLogEntriesRequest.page_token)
  return _internal_mutable_page_token();
}
inline const std::string& ListLogEntriesRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListLogEntriesRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void ListLogEntriesRequest::set_page_token(std::string&& value) {
  
  page_token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.ListLogEntriesRequest.page_token)
}
inline void ListLogEntriesRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.ListLogEntriesRequest.page_token)
}
inline void ListLogEntriesRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.ListLogEntriesRequest.page_token)
}
inline std::string* ListLogEntriesRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* ListLogEntriesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.logging.v2.ListLogEntriesRequest.page_token)
  
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListLogEntriesRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.ListLogEntriesRequest.page_token)
}
inline std::string* ListLogEntriesRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.ListLogEntriesRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return page_token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListLogEntriesRequest::unsafe_arena_set_allocated_page_token(
    std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.ListLogEntriesRequest.page_token)
}

// -------------------------------------------------------------------

// ListLogEntriesResponse

// repeated .google.logging.v2.LogEntry entries = 1;
inline int ListLogEntriesResponse::_internal_entries_size() const {
  return entries_.size();
}
inline int ListLogEntriesResponse::entries_size() const {
  return _internal_entries_size();
}
inline ::google::logging::v2::LogEntry* ListLogEntriesResponse::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListLogEntriesResponse.entries)
  return entries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::logging::v2::LogEntry >*
ListLogEntriesResponse::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:google.logging.v2.ListLogEntriesResponse.entries)
  return &entries_;
}
inline const ::google::logging::v2::LogEntry& ListLogEntriesResponse::_internal_entries(int index) const {
  return entries_.Get(index);
}
inline const ::google::logging::v2::LogEntry& ListLogEntriesResponse::entries(int index) const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListLogEntriesResponse.entries)
  return _internal_entries(index);
}
inline ::google::logging::v2::LogEntry* ListLogEntriesResponse::_internal_add_entries() {
  return entries_.Add();
}
inline ::google::logging::v2::LogEntry* ListLogEntriesResponse::add_entries() {
  // @@protoc_insertion_point(field_add:google.logging.v2.ListLogEntriesResponse.entries)
  return _internal_add_entries();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::logging::v2::LogEntry >&
ListLogEntriesResponse::entries() const {
  // @@protoc_insertion_point(field_list:google.logging.v2.ListLogEntriesResponse.entries)
  return entries_;
}

// string next_page_token = 2;
inline void ListLogEntriesResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& ListLogEntriesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListLogEntriesResponse.next_page_token)
  return _internal_next_page_token();
}
inline void ListLogEntriesResponse::set_next_page_token(const std::string& value) {
  _internal_set_next_page_token(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.ListLogEntriesResponse.next_page_token)
}
inline std::string* ListLogEntriesResponse::mutable_next_page_token() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListLogEntriesResponse.next_page_token)
  return _internal_mutable_next_page_token();
}
inline const std::string& ListLogEntriesResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListLogEntriesResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void ListLogEntriesResponse::set_next_page_token(std::string&& value) {
  
  next_page_token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.ListLogEntriesResponse.next_page_token)
}
inline void ListLogEntriesResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.ListLogEntriesResponse.next_page_token)
}
inline void ListLogEntriesResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.ListLogEntriesResponse.next_page_token)
}
inline std::string* ListLogEntriesResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* ListLogEntriesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.logging.v2.ListLogEntriesResponse.next_page_token)
  
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListLogEntriesResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.ListLogEntriesResponse.next_page_token)
}
inline std::string* ListLogEntriesResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.ListLogEntriesResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return next_page_token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListLogEntriesResponse::unsafe_arena_set_allocated_next_page_token(
    std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.ListLogEntriesResponse.next_page_token)
}

// -------------------------------------------------------------------

// ListMonitoredResourceDescriptorsRequest

// int32 page_size = 1;
inline void ListMonitoredResourceDescriptorsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListMonitoredResourceDescriptorsRequest::_internal_page_size() const {
  return page_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListMonitoredResourceDescriptorsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListMonitoredResourceDescriptorsRequest.page_size)
  return _internal_page_size();
}
inline void ListMonitoredResourceDescriptorsRequest::_internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_size_ = value;
}
inline void ListMonitoredResourceDescriptorsRequest::set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.ListMonitoredResourceDescriptorsRequest.page_size)
}

// string page_token = 2;
inline void ListMonitoredResourceDescriptorsRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& ListMonitoredResourceDescriptorsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListMonitoredResourceDescriptorsRequest.page_token)
  return _internal_page_token();
}
inline void ListMonitoredResourceDescriptorsRequest::set_page_token(const std::string& value) {
  _internal_set_page_token(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.ListMonitoredResourceDescriptorsRequest.page_token)
}
inline std::string* ListMonitoredResourceDescriptorsRequest::mutable_page_token() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListMonitoredResourceDescriptorsRequest.page_token)
  return _internal_mutable_page_token();
}
inline const std::string& ListMonitoredResourceDescriptorsRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListMonitoredResourceDescriptorsRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void ListMonitoredResourceDescriptorsRequest::set_page_token(std::string&& value) {
  
  page_token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.ListMonitoredResourceDescriptorsRequest.page_token)
}
inline void ListMonitoredResourceDescriptorsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.ListMonitoredResourceDescriptorsRequest.page_token)
}
inline void ListMonitoredResourceDescriptorsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.ListMonitoredResourceDescriptorsRequest.page_token)
}
inline std::string* ListMonitoredResourceDescriptorsRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* ListMonitoredResourceDescriptorsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.logging.v2.ListMonitoredResourceDescriptorsRequest.page_token)
  
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListMonitoredResourceDescriptorsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.ListMonitoredResourceDescriptorsRequest.page_token)
}
inline std::string* ListMonitoredResourceDescriptorsRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.ListMonitoredResourceDescriptorsRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return page_token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListMonitoredResourceDescriptorsRequest::unsafe_arena_set_allocated_page_token(
    std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.ListMonitoredResourceDescriptorsRequest.page_token)
}

// -------------------------------------------------------------------

// ListMonitoredResourceDescriptorsResponse

// repeated .google.api.MonitoredResourceDescriptor resource_descriptors = 1;
inline int ListMonitoredResourceDescriptorsResponse::_internal_resource_descriptors_size() const {
  return resource_descriptors_.size();
}
inline int ListMonitoredResourceDescriptorsResponse::resource_descriptors_size() const {
  return _internal_resource_descriptors_size();
}
inline ::google::api::MonitoredResourceDescriptor* ListMonitoredResourceDescriptorsResponse::mutable_resource_descriptors(int index) {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListMonitoredResourceDescriptorsResponse.resource_descriptors)
  return resource_descriptors_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MonitoredResourceDescriptor >*
ListMonitoredResourceDescriptorsResponse::mutable_resource_descriptors() {
  // @@protoc_insertion_point(field_mutable_list:google.logging.v2.ListMonitoredResourceDescriptorsResponse.resource_descriptors)
  return &resource_descriptors_;
}
inline const ::google::api::MonitoredResourceDescriptor& ListMonitoredResourceDescriptorsResponse::_internal_resource_descriptors(int index) const {
  return resource_descriptors_.Get(index);
}
inline const ::google::api::MonitoredResourceDescriptor& ListMonitoredResourceDescriptorsResponse::resource_descriptors(int index) const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListMonitoredResourceDescriptorsResponse.resource_descriptors)
  return _internal_resource_descriptors(index);
}
inline ::google::api::MonitoredResourceDescriptor* ListMonitoredResourceDescriptorsResponse::_internal_add_resource_descriptors() {
  return resource_descriptors_.Add();
}
inline ::google::api::MonitoredResourceDescriptor* ListMonitoredResourceDescriptorsResponse::add_resource_descriptors() {
  // @@protoc_insertion_point(field_add:google.logging.v2.ListMonitoredResourceDescriptorsResponse.resource_descriptors)
  return _internal_add_resource_descriptors();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::api::MonitoredResourceDescriptor >&
ListMonitoredResourceDescriptorsResponse::resource_descriptors() const {
  // @@protoc_insertion_point(field_list:google.logging.v2.ListMonitoredResourceDescriptorsResponse.resource_descriptors)
  return resource_descriptors_;
}

// string next_page_token = 2;
inline void ListMonitoredResourceDescriptorsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& ListMonitoredResourceDescriptorsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListMonitoredResourceDescriptorsResponse.next_page_token)
  return _internal_next_page_token();
}
inline void ListMonitoredResourceDescriptorsResponse::set_next_page_token(const std::string& value) {
  _internal_set_next_page_token(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.ListMonitoredResourceDescriptorsResponse.next_page_token)
}
inline std::string* ListMonitoredResourceDescriptorsResponse::mutable_next_page_token() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListMonitoredResourceDescriptorsResponse.next_page_token)
  return _internal_mutable_next_page_token();
}
inline const std::string& ListMonitoredResourceDescriptorsResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListMonitoredResourceDescriptorsResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void ListMonitoredResourceDescriptorsResponse::set_next_page_token(std::string&& value) {
  
  next_page_token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.ListMonitoredResourceDescriptorsResponse.next_page_token)
}
inline void ListMonitoredResourceDescriptorsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.ListMonitoredResourceDescriptorsResponse.next_page_token)
}
inline void ListMonitoredResourceDescriptorsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.ListMonitoredResourceDescriptorsResponse.next_page_token)
}
inline std::string* ListMonitoredResourceDescriptorsResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* ListMonitoredResourceDescriptorsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.logging.v2.ListMonitoredResourceDescriptorsResponse.next_page_token)
  
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListMonitoredResourceDescriptorsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.ListMonitoredResourceDescriptorsResponse.next_page_token)
}
inline std::string* ListMonitoredResourceDescriptorsResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.ListMonitoredResourceDescriptorsResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return next_page_token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListMonitoredResourceDescriptorsResponse::unsafe_arena_set_allocated_next_page_token(
    std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.ListMonitoredResourceDescriptorsResponse.next_page_token)
}

// -------------------------------------------------------------------

// ListLogsRequest

// string parent = 1;
inline void ListLogsRequest::clear_parent() {
  parent_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& ListLogsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListLogsRequest.parent)
  return _internal_parent();
}
inline void ListLogsRequest::set_parent(const std::string& value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.ListLogsRequest.parent)
}
inline std::string* ListLogsRequest::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListLogsRequest.parent)
  return _internal_mutable_parent();
}
inline const std::string& ListLogsRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListLogsRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void ListLogsRequest::set_parent(std::string&& value) {
  
  parent_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.ListLogsRequest.parent)
}
inline void ListLogsRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.ListLogsRequest.parent)
}
inline void ListLogsRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.ListLogsRequest.parent)
}
inline std::string* ListLogsRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* ListLogsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.logging.v2.ListLogsRequest.parent)
  
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListLogsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.ListLogsRequest.parent)
}
inline std::string* ListLogsRequest::unsafe_arena_release_parent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.ListLogsRequest.parent)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return parent_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListLogsRequest::unsafe_arena_set_allocated_parent(
    std::string* parent) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      parent, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.ListLogsRequest.parent)
}

// int32 page_size = 2;
inline void ListLogsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListLogsRequest::_internal_page_size() const {
  return page_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListLogsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListLogsRequest.page_size)
  return _internal_page_size();
}
inline void ListLogsRequest::_internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_size_ = value;
}
inline void ListLogsRequest::set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.ListLogsRequest.page_size)
}

// string page_token = 3;
inline void ListLogsRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& ListLogsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListLogsRequest.page_token)
  return _internal_page_token();
}
inline void ListLogsRequest::set_page_token(const std::string& value) {
  _internal_set_page_token(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.ListLogsRequest.page_token)
}
inline std::string* ListLogsRequest::mutable_page_token() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListLogsRequest.page_token)
  return _internal_mutable_page_token();
}
inline const std::string& ListLogsRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListLogsRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void ListLogsRequest::set_page_token(std::string&& value) {
  
  page_token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.ListLogsRequest.page_token)
}
inline void ListLogsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.ListLogsRequest.page_token)
}
inline void ListLogsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.ListLogsRequest.page_token)
}
inline std::string* ListLogsRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* ListLogsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.logging.v2.ListLogsRequest.page_token)
  
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListLogsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.ListLogsRequest.page_token)
}
inline std::string* ListLogsRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.ListLogsRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return page_token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListLogsRequest::unsafe_arena_set_allocated_page_token(
    std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.ListLogsRequest.page_token)
}

// -------------------------------------------------------------------

// ListLogsResponse

// repeated string log_names = 3;
inline int ListLogsResponse::_internal_log_names_size() const {
  return log_names_.size();
}
inline int ListLogsResponse::log_names_size() const {
  return _internal_log_names_size();
}
inline void ListLogsResponse::clear_log_names() {
  log_names_.Clear();
}
inline std::string* ListLogsResponse::add_log_names() {
  // @@protoc_insertion_point(field_add_mutable:google.logging.v2.ListLogsResponse.log_names)
  return _internal_add_log_names();
}
inline const std::string& ListLogsResponse::_internal_log_names(int index) const {
  return log_names_.Get(index);
}
inline const std::string& ListLogsResponse::log_names(int index) const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListLogsResponse.log_names)
  return _internal_log_names(index);
}
inline std::string* ListLogsResponse::mutable_log_names(int index) {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListLogsResponse.log_names)
  return log_names_.Mutable(index);
}
inline void ListLogsResponse::set_log_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:google.logging.v2.ListLogsResponse.log_names)
  log_names_.Mutable(index)->assign(value);
}
inline void ListLogsResponse::set_log_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:google.logging.v2.ListLogsResponse.log_names)
  log_names_.Mutable(index)->assign(std::move(value));
}
inline void ListLogsResponse::set_log_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  log_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.logging.v2.ListLogsResponse.log_names)
}
inline void ListLogsResponse::set_log_names(int index, const char* value, size_t size) {
  log_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.ListLogsResponse.log_names)
}
inline std::string* ListLogsResponse::_internal_add_log_names() {
  return log_names_.Add();
}
inline void ListLogsResponse::add_log_names(const std::string& value) {
  log_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.logging.v2.ListLogsResponse.log_names)
}
inline void ListLogsResponse::add_log_names(std::string&& value) {
  log_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.logging.v2.ListLogsResponse.log_names)
}
inline void ListLogsResponse::add_log_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  log_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.logging.v2.ListLogsResponse.log_names)
}
inline void ListLogsResponse::add_log_names(const char* value, size_t size) {
  log_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.logging.v2.ListLogsResponse.log_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListLogsResponse::log_names() const {
  // @@protoc_insertion_point(field_list:google.logging.v2.ListLogsResponse.log_names)
  return log_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListLogsResponse::mutable_log_names() {
  // @@protoc_insertion_point(field_mutable_list:google.logging.v2.ListLogsResponse.log_names)
  return &log_names_;
}

// string next_page_token = 2;
inline void ListLogsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& ListLogsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListLogsResponse.next_page_token)
  return _internal_next_page_token();
}
inline void ListLogsResponse::set_next_page_token(const std::string& value) {
  _internal_set_next_page_token(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.ListLogsResponse.next_page_token)
}
inline std::string* ListLogsResponse::mutable_next_page_token() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListLogsResponse.next_page_token)
  return _internal_mutable_next_page_token();
}
inline const std::string& ListLogsResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListLogsResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void ListLogsResponse::set_next_page_token(std::string&& value) {
  
  next_page_token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.ListLogsResponse.next_page_token)
}
inline void ListLogsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.ListLogsResponse.next_page_token)
}
inline void ListLogsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.ListLogsResponse.next_page_token)
}
inline std::string* ListLogsResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* ListLogsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.logging.v2.ListLogsResponse.next_page_token)
  
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListLogsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.ListLogsResponse.next_page_token)
}
inline std::string* ListLogsResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.ListLogsResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return next_page_token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListLogsResponse::unsafe_arena_set_allocated_next_page_token(
    std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.ListLogsResponse.next_page_token)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace logging
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2flogging_2fv2_2flogging_2eproto
