// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/logging/v2/logging_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_google_2flogging_2fv2_2flogging_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_google_2flogging_2fv2_2flogging_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/field_mask.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2flogging_2fv2_2flogging_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2flogging_2fv2_2flogging_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto;
namespace google {
namespace logging {
namespace v2 {
class BigQueryOptions;
class BigQueryOptionsDefaultTypeInternal;
extern BigQueryOptionsDefaultTypeInternal _BigQueryOptions_default_instance_;
class CreateExclusionRequest;
class CreateExclusionRequestDefaultTypeInternal;
extern CreateExclusionRequestDefaultTypeInternal _CreateExclusionRequest_default_instance_;
class CreateSinkRequest;
class CreateSinkRequestDefaultTypeInternal;
extern CreateSinkRequestDefaultTypeInternal _CreateSinkRequest_default_instance_;
class DeleteExclusionRequest;
class DeleteExclusionRequestDefaultTypeInternal;
extern DeleteExclusionRequestDefaultTypeInternal _DeleteExclusionRequest_default_instance_;
class DeleteSinkRequest;
class DeleteSinkRequestDefaultTypeInternal;
extern DeleteSinkRequestDefaultTypeInternal _DeleteSinkRequest_default_instance_;
class GetExclusionRequest;
class GetExclusionRequestDefaultTypeInternal;
extern GetExclusionRequestDefaultTypeInternal _GetExclusionRequest_default_instance_;
class GetSinkRequest;
class GetSinkRequestDefaultTypeInternal;
extern GetSinkRequestDefaultTypeInternal _GetSinkRequest_default_instance_;
class ListExclusionsRequest;
class ListExclusionsRequestDefaultTypeInternal;
extern ListExclusionsRequestDefaultTypeInternal _ListExclusionsRequest_default_instance_;
class ListExclusionsResponse;
class ListExclusionsResponseDefaultTypeInternal;
extern ListExclusionsResponseDefaultTypeInternal _ListExclusionsResponse_default_instance_;
class ListSinksRequest;
class ListSinksRequestDefaultTypeInternal;
extern ListSinksRequestDefaultTypeInternal _ListSinksRequest_default_instance_;
class ListSinksResponse;
class ListSinksResponseDefaultTypeInternal;
extern ListSinksResponseDefaultTypeInternal _ListSinksResponse_default_instance_;
class LogExclusion;
class LogExclusionDefaultTypeInternal;
extern LogExclusionDefaultTypeInternal _LogExclusion_default_instance_;
class LogSink;
class LogSinkDefaultTypeInternal;
extern LogSinkDefaultTypeInternal _LogSink_default_instance_;
class UpdateExclusionRequest;
class UpdateExclusionRequestDefaultTypeInternal;
extern UpdateExclusionRequestDefaultTypeInternal _UpdateExclusionRequest_default_instance_;
class UpdateSinkRequest;
class UpdateSinkRequestDefaultTypeInternal;
extern UpdateSinkRequestDefaultTypeInternal _UpdateSinkRequest_default_instance_;
}  // namespace v2
}  // namespace logging
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::logging::v2::BigQueryOptions* Arena::CreateMaybeMessage<::google::logging::v2::BigQueryOptions>(Arena*);
template<> ::google::logging::v2::CreateExclusionRequest* Arena::CreateMaybeMessage<::google::logging::v2::CreateExclusionRequest>(Arena*);
template<> ::google::logging::v2::CreateSinkRequest* Arena::CreateMaybeMessage<::google::logging::v2::CreateSinkRequest>(Arena*);
template<> ::google::logging::v2::DeleteExclusionRequest* Arena::CreateMaybeMessage<::google::logging::v2::DeleteExclusionRequest>(Arena*);
template<> ::google::logging::v2::DeleteSinkRequest* Arena::CreateMaybeMessage<::google::logging::v2::DeleteSinkRequest>(Arena*);
template<> ::google::logging::v2::GetExclusionRequest* Arena::CreateMaybeMessage<::google::logging::v2::GetExclusionRequest>(Arena*);
template<> ::google::logging::v2::GetSinkRequest* Arena::CreateMaybeMessage<::google::logging::v2::GetSinkRequest>(Arena*);
template<> ::google::logging::v2::ListExclusionsRequest* Arena::CreateMaybeMessage<::google::logging::v2::ListExclusionsRequest>(Arena*);
template<> ::google::logging::v2::ListExclusionsResponse* Arena::CreateMaybeMessage<::google::logging::v2::ListExclusionsResponse>(Arena*);
template<> ::google::logging::v2::ListSinksRequest* Arena::CreateMaybeMessage<::google::logging::v2::ListSinksRequest>(Arena*);
template<> ::google::logging::v2::ListSinksResponse* Arena::CreateMaybeMessage<::google::logging::v2::ListSinksResponse>(Arena*);
template<> ::google::logging::v2::LogExclusion* Arena::CreateMaybeMessage<::google::logging::v2::LogExclusion>(Arena*);
template<> ::google::logging::v2::LogSink* Arena::CreateMaybeMessage<::google::logging::v2::LogSink>(Arena*);
template<> ::google::logging::v2::UpdateExclusionRequest* Arena::CreateMaybeMessage<::google::logging::v2::UpdateExclusionRequest>(Arena*);
template<> ::google::logging::v2::UpdateSinkRequest* Arena::CreateMaybeMessage<::google::logging::v2::UpdateSinkRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace logging {
namespace v2 {

enum LogSink_VersionFormat : int {
  LogSink_VersionFormat_VERSION_FORMAT_UNSPECIFIED = 0,
  LogSink_VersionFormat_V2 = 1,
  LogSink_VersionFormat_V1 = 2,
  LogSink_VersionFormat_LogSink_VersionFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LogSink_VersionFormat_LogSink_VersionFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LogSink_VersionFormat_IsValid(int value);
constexpr LogSink_VersionFormat LogSink_VersionFormat_VersionFormat_MIN = LogSink_VersionFormat_VERSION_FORMAT_UNSPECIFIED;
constexpr LogSink_VersionFormat LogSink_VersionFormat_VersionFormat_MAX = LogSink_VersionFormat_V1;
constexpr int LogSink_VersionFormat_VersionFormat_ARRAYSIZE = LogSink_VersionFormat_VersionFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogSink_VersionFormat_descriptor();
template<typename T>
inline const std::string& LogSink_VersionFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LogSink_VersionFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LogSink_VersionFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LogSink_VersionFormat_descriptor(), enum_t_value);
}
inline bool LogSink_VersionFormat_Parse(
    const std::string& name, LogSink_VersionFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LogSink_VersionFormat>(
    LogSink_VersionFormat_descriptor(), name, value);
}
// ===================================================================

class LogSink :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.LogSink) */ {
 public:
  LogSink();
  virtual ~LogSink();

  LogSink(const LogSink& from);
  LogSink(LogSink&& from) noexcept
    : LogSink() {
    *this = ::std::move(from);
  }

  inline LogSink& operator=(const LogSink& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogSink& operator=(LogSink&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogSink& default_instance();

  enum OptionsCase {
    kBigqueryOptions = 12,
    OPTIONS_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogSink* internal_default_instance() {
    return reinterpret_cast<const LogSink*>(
               &_LogSink_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LogSink& a, LogSink& b) {
    a.Swap(&b);
  }
  inline void Swap(LogSink* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogSink* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogSink* New() const final {
    return CreateMaybeMessage<LogSink>(nullptr);
  }

  LogSink* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogSink>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogSink& from);
  void MergeFrom(const LogSink& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogSink* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.logging.v2.LogSink";
  }
  protected:
  explicit LogSink(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto);
    return ::descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LogSink_VersionFormat VersionFormat;
  static constexpr VersionFormat VERSION_FORMAT_UNSPECIFIED =
    LogSink_VersionFormat_VERSION_FORMAT_UNSPECIFIED;
  static constexpr VersionFormat V2 =
    LogSink_VersionFormat_V2;
  static constexpr VersionFormat V1 =
    LogSink_VersionFormat_V1;
  static inline bool VersionFormat_IsValid(int value) {
    return LogSink_VersionFormat_IsValid(value);
  }
  static constexpr VersionFormat VersionFormat_MIN =
    LogSink_VersionFormat_VersionFormat_MIN;
  static constexpr VersionFormat VersionFormat_MAX =
    LogSink_VersionFormat_VersionFormat_MAX;
  static constexpr int VersionFormat_ARRAYSIZE =
    LogSink_VersionFormat_VersionFormat_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  VersionFormat_descriptor() {
    return LogSink_VersionFormat_descriptor();
  }
  template<typename T>
  static inline const std::string& VersionFormat_Name(T enum_t_value) {
    static_assert(::std::is_same<T, VersionFormat>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function VersionFormat_Name.");
    return LogSink_VersionFormat_Name(enum_t_value);
  }
  static inline bool VersionFormat_Parse(const std::string& name,
      VersionFormat* value) {
    return LogSink_VersionFormat_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDestinationFieldNumber = 3,
    kFilterFieldNumber = 5,
    kWriterIdentityFieldNumber = 8,
    kStartTimeFieldNumber = 10,
    kEndTimeFieldNumber = 11,
    kCreateTimeFieldNumber = 13,
    kUpdateTimeFieldNumber = 14,
    kOutputVersionFormatFieldNumber = 6,
    kIncludeChildrenFieldNumber = 9,
    kBigqueryOptionsFieldNumber = 12,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string destination = 3;
  void clear_destination();
  const std::string& destination() const;
  void set_destination(const std::string& value);
  void set_destination(std::string&& value);
  void set_destination(const char* value);
  void set_destination(const char* value, size_t size);
  std::string* mutable_destination();
  std::string* release_destination();
  void set_allocated_destination(std::string* destination);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_destination();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_destination(
      std::string* destination);
  private:
  const std::string& _internal_destination() const;
  void _internal_set_destination(const std::string& value);
  std::string* _internal_mutable_destination();
  public:

  // string filter = 5;
  void clear_filter();
  const std::string& filter() const;
  void set_filter(const std::string& value);
  void set_filter(std::string&& value);
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  std::string* mutable_filter();
  std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_filter();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_filter(
      std::string* filter);
  private:
  const std::string& _internal_filter() const;
  void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // string writer_identity = 8;
  void clear_writer_identity();
  const std::string& writer_identity() const;
  void set_writer_identity(const std::string& value);
  void set_writer_identity(std::string&& value);
  void set_writer_identity(const char* value);
  void set_writer_identity(const char* value, size_t size);
  std::string* mutable_writer_identity();
  std::string* release_writer_identity();
  void set_allocated_writer_identity(std::string* writer_identity);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_writer_identity();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_writer_identity(
      std::string* writer_identity);
  private:
  const std::string& _internal_writer_identity() const;
  void _internal_set_writer_identity(const std::string& value);
  std::string* _internal_mutable_writer_identity();
  public:

  // .google.protobuf.Timestamp start_time = 10 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_start_time() const;
  private:
  bool _internal_has_start_time() const;
  public:
  PROTOBUF_DEPRECATED void clear_start_time();
  PROTOBUF_DEPRECATED const PROTOBUF_NAMESPACE_ID::Timestamp& start_time() const;
  PROTOBUF_DEPRECATED PROTOBUF_NAMESPACE_ID::Timestamp* release_start_time();
  PROTOBUF_DEPRECATED PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start_time();
  PROTOBUF_DEPRECATED void set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start_time();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_start_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* start_time);
  PROTOBUF_DEPRECATED PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start_time();

  // .google.protobuf.Timestamp end_time = 11 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_end_time() const;
  private:
  bool _internal_has_end_time() const;
  public:
  PROTOBUF_DEPRECATED void clear_end_time();
  PROTOBUF_DEPRECATED const PROTOBUF_NAMESPACE_ID::Timestamp& end_time() const;
  PROTOBUF_DEPRECATED PROTOBUF_NAMESPACE_ID::Timestamp* release_end_time();
  PROTOBUF_DEPRECATED PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end_time();
  PROTOBUF_DEPRECATED void set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end_time();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_end_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* end_time);
  PROTOBUF_DEPRECATED PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end_time();

  // .google.protobuf.Timestamp create_time = 13;
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // .google.protobuf.Timestamp update_time = 14;
  bool has_update_time() const;
  private:
  bool _internal_has_update_time() const;
  public:
  void clear_update_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& update_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_update_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_update_time();
  void set_allocated_update_time(PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_update_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_update_time();
  public:
  void unsafe_arena_set_allocated_update_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_update_time();

  // .google.logging.v2.LogSink.VersionFormat output_version_format = 6 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_output_version_format();
  PROTOBUF_DEPRECATED ::google::logging::v2::LogSink_VersionFormat output_version_format() const;
  PROTOBUF_DEPRECATED void set_output_version_format(::google::logging::v2::LogSink_VersionFormat value);
  private:
  ::google::logging::v2::LogSink_VersionFormat _internal_output_version_format() const;
  void _internal_set_output_version_format(::google::logging::v2::LogSink_VersionFormat value);
  public:

  // bool include_children = 9;
  void clear_include_children();
  bool include_children() const;
  void set_include_children(bool value);
  private:
  bool _internal_include_children() const;
  void _internal_set_include_children(bool value);
  public:

  // .google.logging.v2.BigQueryOptions bigquery_options = 12;
  bool has_bigquery_options() const;
  private:
  bool _internal_has_bigquery_options() const;
  public:
  void clear_bigquery_options();
  const ::google::logging::v2::BigQueryOptions& bigquery_options() const;
  ::google::logging::v2::BigQueryOptions* release_bigquery_options();
  ::google::logging::v2::BigQueryOptions* mutable_bigquery_options();
  void set_allocated_bigquery_options(::google::logging::v2::BigQueryOptions* bigquery_options);
  private:
  const ::google::logging::v2::BigQueryOptions& _internal_bigquery_options() const;
  ::google::logging::v2::BigQueryOptions* _internal_mutable_bigquery_options();
  public:
  void unsafe_arena_set_allocated_bigquery_options(
      ::google::logging::v2::BigQueryOptions* bigquery_options);
  ::google::logging::v2::BigQueryOptions* unsafe_arena_release_bigquery_options();

  void clear_options();
  OptionsCase options_case() const;
  // @@protoc_insertion_point(class_scope:google.logging.v2.LogSink)
 private:
  class _Internal;
  void set_has_bigquery_options();

  inline bool has_options() const;
  inline void clear_has_options();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr writer_identity_;
  PROTOBUF_NAMESPACE_ID::Timestamp* start_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* end_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* update_time_;
  int output_version_format_;
  bool include_children_;
  union OptionsUnion {
    OptionsUnion() {}
    ::google::logging::v2::BigQueryOptions* bigquery_options_;
  } options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2flogging_2fv2_2flogging_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class BigQueryOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.BigQueryOptions) */ {
 public:
  BigQueryOptions();
  virtual ~BigQueryOptions();

  BigQueryOptions(const BigQueryOptions& from);
  BigQueryOptions(BigQueryOptions&& from) noexcept
    : BigQueryOptions() {
    *this = ::std::move(from);
  }

  inline BigQueryOptions& operator=(const BigQueryOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline BigQueryOptions& operator=(BigQueryOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BigQueryOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BigQueryOptions* internal_default_instance() {
    return reinterpret_cast<const BigQueryOptions*>(
               &_BigQueryOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BigQueryOptions& a, BigQueryOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(BigQueryOptions* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BigQueryOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BigQueryOptions* New() const final {
    return CreateMaybeMessage<BigQueryOptions>(nullptr);
  }

  BigQueryOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BigQueryOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BigQueryOptions& from);
  void MergeFrom(const BigQueryOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BigQueryOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.logging.v2.BigQueryOptions";
  }
  protected:
  explicit BigQueryOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto);
    return ::descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsePartitionedTablesFieldNumber = 1,
  };
  // bool use_partitioned_tables = 1;
  void clear_use_partitioned_tables();
  bool use_partitioned_tables() const;
  void set_use_partitioned_tables(bool value);
  private:
  bool _internal_use_partitioned_tables() const;
  void _internal_set_use_partitioned_tables(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.logging.v2.BigQueryOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool use_partitioned_tables_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2flogging_2fv2_2flogging_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ListSinksRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.ListSinksRequest) */ {
 public:
  ListSinksRequest();
  virtual ~ListSinksRequest();

  ListSinksRequest(const ListSinksRequest& from);
  ListSinksRequest(ListSinksRequest&& from) noexcept
    : ListSinksRequest() {
    *this = ::std::move(from);
  }

  inline ListSinksRequest& operator=(const ListSinksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSinksRequest& operator=(ListSinksRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListSinksRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListSinksRequest* internal_default_instance() {
    return reinterpret_cast<const ListSinksRequest*>(
               &_ListSinksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListSinksRequest& a, ListSinksRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSinksRequest* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSinksRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSinksRequest* New() const final {
    return CreateMaybeMessage<ListSinksRequest>(nullptr);
  }

  ListSinksRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSinksRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListSinksRequest& from);
  void MergeFrom(const ListSinksRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSinksRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.logging.v2.ListSinksRequest";
  }
  protected:
  explicit ListSinksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto);
    return ::descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 2,
    kPageSizeFieldNumber = 3,
  };
  // string parent = 1;
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_parent();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_parent(
      std::string* parent);
  private:
  const std::string& _internal_parent() const;
  void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 2;
  void clear_page_token();
  const std::string& page_token() const;
  void set_page_token(const std::string& value);
  void set_page_token(std::string&& value);
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  std::string* mutable_page_token();
  std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_page_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_page_token(
      std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 3;
  void clear_page_size();
  ::PROTOBUF_NAMESPACE_ID::int32 page_size() const;
  void set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_size() const;
  void _internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.logging.v2.ListSinksRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2flogging_2fv2_2flogging_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ListSinksResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.ListSinksResponse) */ {
 public:
  ListSinksResponse();
  virtual ~ListSinksResponse();

  ListSinksResponse(const ListSinksResponse& from);
  ListSinksResponse(ListSinksResponse&& from) noexcept
    : ListSinksResponse() {
    *this = ::std::move(from);
  }

  inline ListSinksResponse& operator=(const ListSinksResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListSinksResponse& operator=(ListSinksResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListSinksResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListSinksResponse* internal_default_instance() {
    return reinterpret_cast<const ListSinksResponse*>(
               &_ListSinksResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListSinksResponse& a, ListSinksResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListSinksResponse* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListSinksResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListSinksResponse* New() const final {
    return CreateMaybeMessage<ListSinksResponse>(nullptr);
  }

  ListSinksResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListSinksResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListSinksResponse& from);
  void MergeFrom(const ListSinksResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListSinksResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.logging.v2.ListSinksResponse";
  }
  protected:
  explicit ListSinksResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto);
    return ::descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSinksFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.logging.v2.LogSink sinks = 1;
  int sinks_size() const;
  private:
  int _internal_sinks_size() const;
  public:
  void clear_sinks();
  ::google::logging::v2::LogSink* mutable_sinks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::logging::v2::LogSink >*
      mutable_sinks();
  private:
  const ::google::logging::v2::LogSink& _internal_sinks(int index) const;
  ::google::logging::v2::LogSink* _internal_add_sinks();
  public:
  const ::google::logging::v2::LogSink& sinks(int index) const;
  ::google::logging::v2::LogSink* add_sinks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::logging::v2::LogSink >&
      sinks() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  void set_next_page_token(const std::string& value);
  void set_next_page_token(std::string&& value);
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  std::string* mutable_next_page_token();
  std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_next_page_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_next_page_token(
      std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.logging.v2.ListSinksResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::logging::v2::LogSink > sinks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2flogging_2fv2_2flogging_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class GetSinkRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.GetSinkRequest) */ {
 public:
  GetSinkRequest();
  virtual ~GetSinkRequest();

  GetSinkRequest(const GetSinkRequest& from);
  GetSinkRequest(GetSinkRequest&& from) noexcept
    : GetSinkRequest() {
    *this = ::std::move(from);
  }

  inline GetSinkRequest& operator=(const GetSinkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSinkRequest& operator=(GetSinkRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetSinkRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetSinkRequest* internal_default_instance() {
    return reinterpret_cast<const GetSinkRequest*>(
               &_GetSinkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetSinkRequest& a, GetSinkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetSinkRequest* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSinkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetSinkRequest* New() const final {
    return CreateMaybeMessage<GetSinkRequest>(nullptr);
  }

  GetSinkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetSinkRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetSinkRequest& from);
  void MergeFrom(const GetSinkRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetSinkRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.logging.v2.GetSinkRequest";
  }
  protected:
  explicit GetSinkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto);
    return ::descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSinkNameFieldNumber = 1,
  };
  // string sink_name = 1;
  void clear_sink_name();
  const std::string& sink_name() const;
  void set_sink_name(const std::string& value);
  void set_sink_name(std::string&& value);
  void set_sink_name(const char* value);
  void set_sink_name(const char* value, size_t size);
  std::string* mutable_sink_name();
  std::string* release_sink_name();
  void set_allocated_sink_name(std::string* sink_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sink_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sink_name(
      std::string* sink_name);
  private:
  const std::string& _internal_sink_name() const;
  void _internal_set_sink_name(const std::string& value);
  std::string* _internal_mutable_sink_name();
  public:

  // @@protoc_insertion_point(class_scope:google.logging.v2.GetSinkRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sink_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2flogging_2fv2_2flogging_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class CreateSinkRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.CreateSinkRequest) */ {
 public:
  CreateSinkRequest();
  virtual ~CreateSinkRequest();

  CreateSinkRequest(const CreateSinkRequest& from);
  CreateSinkRequest(CreateSinkRequest&& from) noexcept
    : CreateSinkRequest() {
    *this = ::std::move(from);
  }

  inline CreateSinkRequest& operator=(const CreateSinkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateSinkRequest& operator=(CreateSinkRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateSinkRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateSinkRequest* internal_default_instance() {
    return reinterpret_cast<const CreateSinkRequest*>(
               &_CreateSinkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CreateSinkRequest& a, CreateSinkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateSinkRequest* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateSinkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateSinkRequest* New() const final {
    return CreateMaybeMessage<CreateSinkRequest>(nullptr);
  }

  CreateSinkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateSinkRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateSinkRequest& from);
  void MergeFrom(const CreateSinkRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateSinkRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.logging.v2.CreateSinkRequest";
  }
  protected:
  explicit CreateSinkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto);
    return ::descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kSinkFieldNumber = 2,
    kUniqueWriterIdentityFieldNumber = 3,
  };
  // string parent = 1;
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_parent();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_parent(
      std::string* parent);
  private:
  const std::string& _internal_parent() const;
  void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // .google.logging.v2.LogSink sink = 2;
  bool has_sink() const;
  private:
  bool _internal_has_sink() const;
  public:
  void clear_sink();
  const ::google::logging::v2::LogSink& sink() const;
  ::google::logging::v2::LogSink* release_sink();
  ::google::logging::v2::LogSink* mutable_sink();
  void set_allocated_sink(::google::logging::v2::LogSink* sink);
  private:
  const ::google::logging::v2::LogSink& _internal_sink() const;
  ::google::logging::v2::LogSink* _internal_mutable_sink();
  public:
  void unsafe_arena_set_allocated_sink(
      ::google::logging::v2::LogSink* sink);
  ::google::logging::v2::LogSink* unsafe_arena_release_sink();

  // bool unique_writer_identity = 3;
  void clear_unique_writer_identity();
  bool unique_writer_identity() const;
  void set_unique_writer_identity(bool value);
  private:
  bool _internal_unique_writer_identity() const;
  void _internal_set_unique_writer_identity(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.logging.v2.CreateSinkRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::google::logging::v2::LogSink* sink_;
  bool unique_writer_identity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2flogging_2fv2_2flogging_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class UpdateSinkRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.UpdateSinkRequest) */ {
 public:
  UpdateSinkRequest();
  virtual ~UpdateSinkRequest();

  UpdateSinkRequest(const UpdateSinkRequest& from);
  UpdateSinkRequest(UpdateSinkRequest&& from) noexcept
    : UpdateSinkRequest() {
    *this = ::std::move(from);
  }

  inline UpdateSinkRequest& operator=(const UpdateSinkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateSinkRequest& operator=(UpdateSinkRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateSinkRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateSinkRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateSinkRequest*>(
               &_UpdateSinkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UpdateSinkRequest& a, UpdateSinkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateSinkRequest* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateSinkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateSinkRequest* New() const final {
    return CreateMaybeMessage<UpdateSinkRequest>(nullptr);
  }

  UpdateSinkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateSinkRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateSinkRequest& from);
  void MergeFrom(const UpdateSinkRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateSinkRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.logging.v2.UpdateSinkRequest";
  }
  protected:
  explicit UpdateSinkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto);
    return ::descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSinkNameFieldNumber = 1,
    kSinkFieldNumber = 2,
    kUpdateMaskFieldNumber = 4,
    kUniqueWriterIdentityFieldNumber = 3,
  };
  // string sink_name = 1;
  void clear_sink_name();
  const std::string& sink_name() const;
  void set_sink_name(const std::string& value);
  void set_sink_name(std::string&& value);
  void set_sink_name(const char* value);
  void set_sink_name(const char* value, size_t size);
  std::string* mutable_sink_name();
  std::string* release_sink_name();
  void set_allocated_sink_name(std::string* sink_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sink_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sink_name(
      std::string* sink_name);
  private:
  const std::string& _internal_sink_name() const;
  void _internal_set_sink_name(const std::string& value);
  std::string* _internal_mutable_sink_name();
  public:

  // .google.logging.v2.LogSink sink = 2;
  bool has_sink() const;
  private:
  bool _internal_has_sink() const;
  public:
  void clear_sink();
  const ::google::logging::v2::LogSink& sink() const;
  ::google::logging::v2::LogSink* release_sink();
  ::google::logging::v2::LogSink* mutable_sink();
  void set_allocated_sink(::google::logging::v2::LogSink* sink);
  private:
  const ::google::logging::v2::LogSink& _internal_sink() const;
  ::google::logging::v2::LogSink* _internal_mutable_sink();
  public:
  void unsafe_arena_set_allocated_sink(
      ::google::logging::v2::LogSink* sink);
  ::google::logging::v2::LogSink* unsafe_arena_release_sink();

  // .google.protobuf.FieldMask update_mask = 4;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // bool unique_writer_identity = 3;
  void clear_unique_writer_identity();
  bool unique_writer_identity() const;
  void set_unique_writer_identity(bool value);
  private:
  bool _internal_unique_writer_identity() const;
  void _internal_set_unique_writer_identity(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.logging.v2.UpdateSinkRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sink_name_;
  ::google::logging::v2::LogSink* sink_;
  PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  bool unique_writer_identity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2flogging_2fv2_2flogging_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class DeleteSinkRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.DeleteSinkRequest) */ {
 public:
  DeleteSinkRequest();
  virtual ~DeleteSinkRequest();

  DeleteSinkRequest(const DeleteSinkRequest& from);
  DeleteSinkRequest(DeleteSinkRequest&& from) noexcept
    : DeleteSinkRequest() {
    *this = ::std::move(from);
  }

  inline DeleteSinkRequest& operator=(const DeleteSinkRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteSinkRequest& operator=(DeleteSinkRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteSinkRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteSinkRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteSinkRequest*>(
               &_DeleteSinkRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteSinkRequest& a, DeleteSinkRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteSinkRequest* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteSinkRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteSinkRequest* New() const final {
    return CreateMaybeMessage<DeleteSinkRequest>(nullptr);
  }

  DeleteSinkRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteSinkRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteSinkRequest& from);
  void MergeFrom(const DeleteSinkRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteSinkRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.logging.v2.DeleteSinkRequest";
  }
  protected:
  explicit DeleteSinkRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto);
    return ::descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSinkNameFieldNumber = 1,
  };
  // string sink_name = 1;
  void clear_sink_name();
  const std::string& sink_name() const;
  void set_sink_name(const std::string& value);
  void set_sink_name(std::string&& value);
  void set_sink_name(const char* value);
  void set_sink_name(const char* value, size_t size);
  std::string* mutable_sink_name();
  std::string* release_sink_name();
  void set_allocated_sink_name(std::string* sink_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sink_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sink_name(
      std::string* sink_name);
  private:
  const std::string& _internal_sink_name() const;
  void _internal_set_sink_name(const std::string& value);
  std::string* _internal_mutable_sink_name();
  public:

  // @@protoc_insertion_point(class_scope:google.logging.v2.DeleteSinkRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sink_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2flogging_2fv2_2flogging_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class LogExclusion :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.LogExclusion) */ {
 public:
  LogExclusion();
  virtual ~LogExclusion();

  LogExclusion(const LogExclusion& from);
  LogExclusion(LogExclusion&& from) noexcept
    : LogExclusion() {
    *this = ::std::move(from);
  }

  inline LogExclusion& operator=(const LogExclusion& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogExclusion& operator=(LogExclusion&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogExclusion& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogExclusion* internal_default_instance() {
    return reinterpret_cast<const LogExclusion*>(
               &_LogExclusion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LogExclusion& a, LogExclusion& b) {
    a.Swap(&b);
  }
  inline void Swap(LogExclusion* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogExclusion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogExclusion* New() const final {
    return CreateMaybeMessage<LogExclusion>(nullptr);
  }

  LogExclusion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogExclusion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogExclusion& from);
  void MergeFrom(const LogExclusion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogExclusion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.logging.v2.LogExclusion";
  }
  protected:
  explicit LogExclusion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto);
    return ::descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kFilterFieldNumber = 3,
    kCreateTimeFieldNumber = 5,
    kUpdateTimeFieldNumber = 6,
    kDisabledFieldNumber = 4,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_description();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_description(
      std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string filter = 3;
  void clear_filter();
  const std::string& filter() const;
  void set_filter(const std::string& value);
  void set_filter(std::string&& value);
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  std::string* mutable_filter();
  std::string* release_filter();
  void set_allocated_filter(std::string* filter);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_filter();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_filter(
      std::string* filter);
  private:
  const std::string& _internal_filter() const;
  void _internal_set_filter(const std::string& value);
  std::string* _internal_mutable_filter();
  public:

  // .google.protobuf.Timestamp create_time = 5;
  bool has_create_time() const;
  private:
  bool _internal_has_create_time() const;
  public:
  void clear_create_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& create_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_create_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_create_time();
  void set_allocated_create_time(PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_create_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_create_time();
  public:
  void unsafe_arena_set_allocated_create_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* create_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_create_time();

  // .google.protobuf.Timestamp update_time = 6;
  bool has_update_time() const;
  private:
  bool _internal_has_update_time() const;
  public:
  void clear_update_time();
  const PROTOBUF_NAMESPACE_ID::Timestamp& update_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_update_time();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_update_time();
  void set_allocated_update_time(PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_update_time() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_update_time();
  public:
  void unsafe_arena_set_allocated_update_time(
      PROTOBUF_NAMESPACE_ID::Timestamp* update_time);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_update_time();

  // bool disabled = 4;
  void clear_disabled();
  bool disabled() const;
  void set_disabled(bool value);
  private:
  bool _internal_disabled() const;
  void _internal_set_disabled(bool value);
  public:

  // @@protoc_insertion_point(class_scope:google.logging.v2.LogExclusion)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filter_;
  PROTOBUF_NAMESPACE_ID::Timestamp* create_time_;
  PROTOBUF_NAMESPACE_ID::Timestamp* update_time_;
  bool disabled_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2flogging_2fv2_2flogging_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ListExclusionsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.ListExclusionsRequest) */ {
 public:
  ListExclusionsRequest();
  virtual ~ListExclusionsRequest();

  ListExclusionsRequest(const ListExclusionsRequest& from);
  ListExclusionsRequest(ListExclusionsRequest&& from) noexcept
    : ListExclusionsRequest() {
    *this = ::std::move(from);
  }

  inline ListExclusionsRequest& operator=(const ListExclusionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListExclusionsRequest& operator=(ListExclusionsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListExclusionsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListExclusionsRequest* internal_default_instance() {
    return reinterpret_cast<const ListExclusionsRequest*>(
               &_ListExclusionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ListExclusionsRequest& a, ListExclusionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListExclusionsRequest* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListExclusionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListExclusionsRequest* New() const final {
    return CreateMaybeMessage<ListExclusionsRequest>(nullptr);
  }

  ListExclusionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListExclusionsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListExclusionsRequest& from);
  void MergeFrom(const ListExclusionsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListExclusionsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.logging.v2.ListExclusionsRequest";
  }
  protected:
  explicit ListExclusionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto);
    return ::descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 2,
    kPageSizeFieldNumber = 3,
  };
  // string parent = 1;
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_parent();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_parent(
      std::string* parent);
  private:
  const std::string& _internal_parent() const;
  void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // string page_token = 2;
  void clear_page_token();
  const std::string& page_token() const;
  void set_page_token(const std::string& value);
  void set_page_token(std::string&& value);
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  std::string* mutable_page_token();
  std::string* release_page_token();
  void set_allocated_page_token(std::string* page_token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_page_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_page_token(
      std::string* page_token);
  private:
  const std::string& _internal_page_token() const;
  void _internal_set_page_token(const std::string& value);
  std::string* _internal_mutable_page_token();
  public:

  // int32 page_size = 3;
  void clear_page_size();
  ::PROTOBUF_NAMESPACE_ID::int32 page_size() const;
  void set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_size() const;
  void _internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.logging.v2.ListExclusionsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2flogging_2fv2_2flogging_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class ListExclusionsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.ListExclusionsResponse) */ {
 public:
  ListExclusionsResponse();
  virtual ~ListExclusionsResponse();

  ListExclusionsResponse(const ListExclusionsResponse& from);
  ListExclusionsResponse(ListExclusionsResponse&& from) noexcept
    : ListExclusionsResponse() {
    *this = ::std::move(from);
  }

  inline ListExclusionsResponse& operator=(const ListExclusionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListExclusionsResponse& operator=(ListExclusionsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ListExclusionsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListExclusionsResponse* internal_default_instance() {
    return reinterpret_cast<const ListExclusionsResponse*>(
               &_ListExclusionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ListExclusionsResponse& a, ListExclusionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListExclusionsResponse* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListExclusionsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListExclusionsResponse* New() const final {
    return CreateMaybeMessage<ListExclusionsResponse>(nullptr);
  }

  ListExclusionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListExclusionsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ListExclusionsResponse& from);
  void MergeFrom(const ListExclusionsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListExclusionsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.logging.v2.ListExclusionsResponse";
  }
  protected:
  explicit ListExclusionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto);
    return ::descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExclusionsFieldNumber = 1,
    kNextPageTokenFieldNumber = 2,
  };
  // repeated .google.logging.v2.LogExclusion exclusions = 1;
  int exclusions_size() const;
  private:
  int _internal_exclusions_size() const;
  public:
  void clear_exclusions();
  ::google::logging::v2::LogExclusion* mutable_exclusions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::logging::v2::LogExclusion >*
      mutable_exclusions();
  private:
  const ::google::logging::v2::LogExclusion& _internal_exclusions(int index) const;
  ::google::logging::v2::LogExclusion* _internal_add_exclusions();
  public:
  const ::google::logging::v2::LogExclusion& exclusions(int index) const;
  ::google::logging::v2::LogExclusion* add_exclusions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::logging::v2::LogExclusion >&
      exclusions() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  const std::string& next_page_token() const;
  void set_next_page_token(const std::string& value);
  void set_next_page_token(std::string&& value);
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  std::string* mutable_next_page_token();
  std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* next_page_token);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_next_page_token();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_next_page_token(
      std::string* next_page_token);
  private:
  const std::string& _internal_next_page_token() const;
  void _internal_set_next_page_token(const std::string& value);
  std::string* _internal_mutable_next_page_token();
  public:

  // @@protoc_insertion_point(class_scope:google.logging.v2.ListExclusionsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::logging::v2::LogExclusion > exclusions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2flogging_2fv2_2flogging_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class GetExclusionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.GetExclusionRequest) */ {
 public:
  GetExclusionRequest();
  virtual ~GetExclusionRequest();

  GetExclusionRequest(const GetExclusionRequest& from);
  GetExclusionRequest(GetExclusionRequest&& from) noexcept
    : GetExclusionRequest() {
    *this = ::std::move(from);
  }

  inline GetExclusionRequest& operator=(const GetExclusionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetExclusionRequest& operator=(GetExclusionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetExclusionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetExclusionRequest* internal_default_instance() {
    return reinterpret_cast<const GetExclusionRequest*>(
               &_GetExclusionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(GetExclusionRequest& a, GetExclusionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetExclusionRequest* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetExclusionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetExclusionRequest* New() const final {
    return CreateMaybeMessage<GetExclusionRequest>(nullptr);
  }

  GetExclusionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetExclusionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetExclusionRequest& from);
  void MergeFrom(const GetExclusionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetExclusionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.logging.v2.GetExclusionRequest";
  }
  protected:
  explicit GetExclusionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto);
    return ::descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.logging.v2.GetExclusionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2flogging_2fv2_2flogging_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class CreateExclusionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.CreateExclusionRequest) */ {
 public:
  CreateExclusionRequest();
  virtual ~CreateExclusionRequest();

  CreateExclusionRequest(const CreateExclusionRequest& from);
  CreateExclusionRequest(CreateExclusionRequest&& from) noexcept
    : CreateExclusionRequest() {
    *this = ::std::move(from);
  }

  inline CreateExclusionRequest& operator=(const CreateExclusionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateExclusionRequest& operator=(CreateExclusionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateExclusionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateExclusionRequest* internal_default_instance() {
    return reinterpret_cast<const CreateExclusionRequest*>(
               &_CreateExclusionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CreateExclusionRequest& a, CreateExclusionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateExclusionRequest* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateExclusionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateExclusionRequest* New() const final {
    return CreateMaybeMessage<CreateExclusionRequest>(nullptr);
  }

  CreateExclusionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateExclusionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateExclusionRequest& from);
  void MergeFrom(const CreateExclusionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateExclusionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.logging.v2.CreateExclusionRequest";
  }
  protected:
  explicit CreateExclusionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto);
    return ::descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParentFieldNumber = 1,
    kExclusionFieldNumber = 2,
  };
  // string parent = 1;
  void clear_parent();
  const std::string& parent() const;
  void set_parent(const std::string& value);
  void set_parent(std::string&& value);
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  std::string* mutable_parent();
  std::string* release_parent();
  void set_allocated_parent(std::string* parent);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_parent();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_parent(
      std::string* parent);
  private:
  const std::string& _internal_parent() const;
  void _internal_set_parent(const std::string& value);
  std::string* _internal_mutable_parent();
  public:

  // .google.logging.v2.LogExclusion exclusion = 2;
  bool has_exclusion() const;
  private:
  bool _internal_has_exclusion() const;
  public:
  void clear_exclusion();
  const ::google::logging::v2::LogExclusion& exclusion() const;
  ::google::logging::v2::LogExclusion* release_exclusion();
  ::google::logging::v2::LogExclusion* mutable_exclusion();
  void set_allocated_exclusion(::google::logging::v2::LogExclusion* exclusion);
  private:
  const ::google::logging::v2::LogExclusion& _internal_exclusion() const;
  ::google::logging::v2::LogExclusion* _internal_mutable_exclusion();
  public:
  void unsafe_arena_set_allocated_exclusion(
      ::google::logging::v2::LogExclusion* exclusion);
  ::google::logging::v2::LogExclusion* unsafe_arena_release_exclusion();

  // @@protoc_insertion_point(class_scope:google.logging.v2.CreateExclusionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
  ::google::logging::v2::LogExclusion* exclusion_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2flogging_2fv2_2flogging_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class UpdateExclusionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.UpdateExclusionRequest) */ {
 public:
  UpdateExclusionRequest();
  virtual ~UpdateExclusionRequest();

  UpdateExclusionRequest(const UpdateExclusionRequest& from);
  UpdateExclusionRequest(UpdateExclusionRequest&& from) noexcept
    : UpdateExclusionRequest() {
    *this = ::std::move(from);
  }

  inline UpdateExclusionRequest& operator=(const UpdateExclusionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateExclusionRequest& operator=(UpdateExclusionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateExclusionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateExclusionRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateExclusionRequest*>(
               &_UpdateExclusionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(UpdateExclusionRequest& a, UpdateExclusionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateExclusionRequest* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateExclusionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateExclusionRequest* New() const final {
    return CreateMaybeMessage<UpdateExclusionRequest>(nullptr);
  }

  UpdateExclusionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateExclusionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateExclusionRequest& from);
  void MergeFrom(const UpdateExclusionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateExclusionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.logging.v2.UpdateExclusionRequest";
  }
  protected:
  explicit UpdateExclusionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto);
    return ::descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kExclusionFieldNumber = 2,
    kUpdateMaskFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.logging.v2.LogExclusion exclusion = 2;
  bool has_exclusion() const;
  private:
  bool _internal_has_exclusion() const;
  public:
  void clear_exclusion();
  const ::google::logging::v2::LogExclusion& exclusion() const;
  ::google::logging::v2::LogExclusion* release_exclusion();
  ::google::logging::v2::LogExclusion* mutable_exclusion();
  void set_allocated_exclusion(::google::logging::v2::LogExclusion* exclusion);
  private:
  const ::google::logging::v2::LogExclusion& _internal_exclusion() const;
  ::google::logging::v2::LogExclusion* _internal_mutable_exclusion();
  public:
  void unsafe_arena_set_allocated_exclusion(
      ::google::logging::v2::LogExclusion* exclusion);
  ::google::logging::v2::LogExclusion* unsafe_arena_release_exclusion();

  // .google.protobuf.FieldMask update_mask = 3;
  bool has_update_mask() const;
  private:
  bool _internal_has_update_mask() const;
  public:
  void clear_update_mask();
  const PROTOBUF_NAMESPACE_ID::FieldMask& update_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* release_update_mask();
  PROTOBUF_NAMESPACE_ID::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  private:
  const PROTOBUF_NAMESPACE_ID::FieldMask& _internal_update_mask() const;
  PROTOBUF_NAMESPACE_ID::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      PROTOBUF_NAMESPACE_ID::FieldMask* update_mask);
  PROTOBUF_NAMESPACE_ID::FieldMask* unsafe_arena_release_update_mask();

  // @@protoc_insertion_point(class_scope:google.logging.v2.UpdateExclusionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::google::logging::v2::LogExclusion* exclusion_;
  PROTOBUF_NAMESPACE_ID::FieldMask* update_mask_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2flogging_2fv2_2flogging_5fconfig_2eproto;
};
// -------------------------------------------------------------------

class DeleteExclusionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.logging.v2.DeleteExclusionRequest) */ {
 public:
  DeleteExclusionRequest();
  virtual ~DeleteExclusionRequest();

  DeleteExclusionRequest(const DeleteExclusionRequest& from);
  DeleteExclusionRequest(DeleteExclusionRequest&& from) noexcept
    : DeleteExclusionRequest() {
    *this = ::std::move(from);
  }

  inline DeleteExclusionRequest& operator=(const DeleteExclusionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteExclusionRequest& operator=(DeleteExclusionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArena() const final {
    return GetArenaNoVirtual();
  }
  inline void* GetMaybeArenaPointer() const final {
    return MaybeArenaPtr();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteExclusionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteExclusionRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteExclusionRequest*>(
               &_DeleteExclusionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DeleteExclusionRequest& a, DeleteExclusionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteExclusionRequest* other) {
    if (other == this) return;
    if (GetArenaNoVirtual() == other->GetArenaNoVirtual()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteExclusionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArenaNoVirtual() == other->GetArenaNoVirtual());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteExclusionRequest* New() const final {
    return CreateMaybeMessage<DeleteExclusionRequest>(nullptr);
  }

  DeleteExclusionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteExclusionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteExclusionRequest& from);
  void MergeFrom(const DeleteExclusionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteExclusionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.logging.v2.DeleteExclusionRequest";
  }
  protected:
  explicit DeleteExclusionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto);
    return ::descriptor_table_google_2flogging_2fv2_2flogging_5fconfig_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.logging.v2.DeleteExclusionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2flogging_2fv2_2flogging_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogSink

// string name = 1;
inline void LogSink::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& LogSink::name() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogSink.name)
  return _internal_name();
}
inline void LogSink::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.LogSink.name)
}
inline std::string* LogSink::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogSink.name)
  return _internal_mutable_name();
}
inline const std::string& LogSink::_internal_name() const {
  return name_.Get();
}
inline void LogSink::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void LogSink::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.LogSink.name)
}
inline void LogSink::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogSink.name)
}
inline void LogSink::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogSink.name)
}
inline std::string* LogSink::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* LogSink::release_name() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogSink.name)
  
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void LogSink::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogSink.name)
}
inline std::string* LogSink::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogSink.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LogSink::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogSink.name)
}

// string destination = 3;
inline void LogSink::clear_destination() {
  destination_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& LogSink::destination() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogSink.destination)
  return _internal_destination();
}
inline void LogSink::set_destination(const std::string& value) {
  _internal_set_destination(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.LogSink.destination)
}
inline std::string* LogSink::mutable_destination() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogSink.destination)
  return _internal_mutable_destination();
}
inline const std::string& LogSink::_internal_destination() const {
  return destination_.Get();
}
inline void LogSink::_internal_set_destination(const std::string& value) {
  
  destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void LogSink::set_destination(std::string&& value) {
  
  destination_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.LogSink.destination)
}
inline void LogSink::set_destination(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogSink.destination)
}
inline void LogSink::set_destination(const char* value,
    size_t size) {
  
  destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogSink.destination)
}
inline std::string* LogSink::_internal_mutable_destination() {
  
  return destination_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* LogSink::release_destination() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogSink.destination)
  
  return destination_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void LogSink::set_allocated_destination(std::string* destination) {
  if (destination != nullptr) {
    
  } else {
    
  }
  destination_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), destination,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogSink.destination)
}
inline std::string* LogSink::unsafe_arena_release_destination() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogSink.destination)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return destination_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LogSink::unsafe_arena_set_allocated_destination(
    std::string* destination) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (destination != nullptr) {
    
  } else {
    
  }
  destination_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      destination, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogSink.destination)
}

// string filter = 5;
inline void LogSink::clear_filter() {
  filter_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& LogSink::filter() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogSink.filter)
  return _internal_filter();
}
inline void LogSink::set_filter(const std::string& value) {
  _internal_set_filter(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.LogSink.filter)
}
inline std::string* LogSink::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogSink.filter)
  return _internal_mutable_filter();
}
inline const std::string& LogSink::_internal_filter() const {
  return filter_.Get();
}
inline void LogSink::_internal_set_filter(const std::string& value) {
  
  filter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void LogSink::set_filter(std::string&& value) {
  
  filter_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.LogSink.filter)
}
inline void LogSink::set_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogSink.filter)
}
inline void LogSink::set_filter(const char* value,
    size_t size) {
  
  filter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogSink.filter)
}
inline std::string* LogSink::_internal_mutable_filter() {
  
  return filter_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* LogSink::release_filter() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogSink.filter)
  
  return filter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void LogSink::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filter,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogSink.filter)
}
inline std::string* LogSink::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogSink.filter)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return filter_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LogSink::unsafe_arena_set_allocated_filter(
    std::string* filter) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      filter, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogSink.filter)
}

// .google.logging.v2.LogSink.VersionFormat output_version_format = 6 [deprecated = true];
inline void LogSink::clear_output_version_format() {
  output_version_format_ = 0;
}
inline ::google::logging::v2::LogSink_VersionFormat LogSink::_internal_output_version_format() const {
  return static_cast< ::google::logging::v2::LogSink_VersionFormat >(output_version_format_);
}
inline ::google::logging::v2::LogSink_VersionFormat LogSink::output_version_format() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogSink.output_version_format)
  return _internal_output_version_format();
}
inline void LogSink::_internal_set_output_version_format(::google::logging::v2::LogSink_VersionFormat value) {
  
  output_version_format_ = value;
}
inline void LogSink::set_output_version_format(::google::logging::v2::LogSink_VersionFormat value) {
  _internal_set_output_version_format(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.LogSink.output_version_format)
}

// string writer_identity = 8;
inline void LogSink::clear_writer_identity() {
  writer_identity_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& LogSink::writer_identity() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogSink.writer_identity)
  return _internal_writer_identity();
}
inline void LogSink::set_writer_identity(const std::string& value) {
  _internal_set_writer_identity(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.LogSink.writer_identity)
}
inline std::string* LogSink::mutable_writer_identity() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogSink.writer_identity)
  return _internal_mutable_writer_identity();
}
inline const std::string& LogSink::_internal_writer_identity() const {
  return writer_identity_.Get();
}
inline void LogSink::_internal_set_writer_identity(const std::string& value) {
  
  writer_identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void LogSink::set_writer_identity(std::string&& value) {
  
  writer_identity_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.LogSink.writer_identity)
}
inline void LogSink::set_writer_identity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  writer_identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogSink.writer_identity)
}
inline void LogSink::set_writer_identity(const char* value,
    size_t size) {
  
  writer_identity_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogSink.writer_identity)
}
inline std::string* LogSink::_internal_mutable_writer_identity() {
  
  return writer_identity_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* LogSink::release_writer_identity() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogSink.writer_identity)
  
  return writer_identity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void LogSink::set_allocated_writer_identity(std::string* writer_identity) {
  if (writer_identity != nullptr) {
    
  } else {
    
  }
  writer_identity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), writer_identity,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogSink.writer_identity)
}
inline std::string* LogSink::unsafe_arena_release_writer_identity() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogSink.writer_identity)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return writer_identity_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LogSink::unsafe_arena_set_allocated_writer_identity(
    std::string* writer_identity) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (writer_identity != nullptr) {
    
  } else {
    
  }
  writer_identity_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      writer_identity, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogSink.writer_identity)
}

// bool include_children = 9;
inline void LogSink::clear_include_children() {
  include_children_ = false;
}
inline bool LogSink::_internal_include_children() const {
  return include_children_;
}
inline bool LogSink::include_children() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogSink.include_children)
  return _internal_include_children();
}
inline void LogSink::_internal_set_include_children(bool value) {
  
  include_children_ = value;
}
inline void LogSink::set_include_children(bool value) {
  _internal_set_include_children(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.LogSink.include_children)
}

// .google.logging.v2.BigQueryOptions bigquery_options = 12;
inline bool LogSink::_internal_has_bigquery_options() const {
  return options_case() == kBigqueryOptions;
}
inline bool LogSink::has_bigquery_options() const {
  return _internal_has_bigquery_options();
}
inline void LogSink::set_has_bigquery_options() {
  _oneof_case_[0] = kBigqueryOptions;
}
inline void LogSink::clear_bigquery_options() {
  if (_internal_has_bigquery_options()) {
    if (GetArenaNoVirtual() == nullptr) {
      delete options_.bigquery_options_;
    }
    clear_has_options();
  }
}
inline ::google::logging::v2::BigQueryOptions* LogSink::release_bigquery_options() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogSink.bigquery_options)
  if (has_bigquery_options()) {
    clear_has_options();
      ::google::logging::v2::BigQueryOptions* temp = options_.bigquery_options_;
    if (GetArenaNoVirtual() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    options_.bigquery_options_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::logging::v2::BigQueryOptions& LogSink::_internal_bigquery_options() const {
  return _internal_has_bigquery_options()
      ? *options_.bigquery_options_
      : *reinterpret_cast< ::google::logging::v2::BigQueryOptions*>(&::google::logging::v2::_BigQueryOptions_default_instance_);
}
inline const ::google::logging::v2::BigQueryOptions& LogSink::bigquery_options() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogSink.bigquery_options)
  return _internal_bigquery_options();
}
inline ::google::logging::v2::BigQueryOptions* LogSink::unsafe_arena_release_bigquery_options() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogSink.bigquery_options)
  if (has_bigquery_options()) {
    clear_has_options();
    ::google::logging::v2::BigQueryOptions* temp = options_.bigquery_options_;
    options_.bigquery_options_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LogSink::unsafe_arena_set_allocated_bigquery_options(::google::logging::v2::BigQueryOptions* bigquery_options) {
  clear_options();
  if (bigquery_options) {
    set_has_bigquery_options();
    options_.bigquery_options_ = bigquery_options;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogSink.bigquery_options)
}
inline ::google::logging::v2::BigQueryOptions* LogSink::_internal_mutable_bigquery_options() {
  if (!_internal_has_bigquery_options()) {
    clear_options();
    set_has_bigquery_options();
    options_.bigquery_options_ = CreateMaybeMessage< ::google::logging::v2::BigQueryOptions >(
        GetArenaNoVirtual());
  }
  return options_.bigquery_options_;
}
inline ::google::logging::v2::BigQueryOptions* LogSink::mutable_bigquery_options() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogSink.bigquery_options)
  return _internal_mutable_bigquery_options();
}

// .google.protobuf.Timestamp create_time = 13;
inline bool LogSink::_internal_has_create_time() const {
  return this != internal_default_instance() && create_time_ != nullptr;
}
inline bool LogSink::has_create_time() const {
  return _internal_has_create_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& LogSink::_internal_create_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = create_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& LogSink::create_time() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogSink.create_time)
  return _internal_create_time();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LogSink::release_create_time() {
  auto temp = unsafe_arena_release_create_time();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LogSink::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogSink.create_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LogSink::_internal_mutable_create_time() {
  
  if (create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    create_time_ = p;
  }
  return create_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LogSink::mutable_create_time() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogSink.create_time)
  return _internal_mutable_create_time();
}
inline void LogSink::set_allocated_create_time(PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogSink.create_time)
}

// .google.protobuf.Timestamp update_time = 14;
inline bool LogSink::_internal_has_update_time() const {
  return this != internal_default_instance() && update_time_ != nullptr;
}
inline bool LogSink::has_update_time() const {
  return _internal_has_update_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& LogSink::_internal_update_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = update_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& LogSink::update_time() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogSink.update_time)
  return _internal_update_time();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LogSink::release_update_time() {
  auto temp = unsafe_arena_release_update_time();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LogSink::unsafe_arena_release_update_time() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogSink.update_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = update_time_;
  update_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LogSink::_internal_mutable_update_time() {
  
  if (update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    update_time_ = p;
  }
  return update_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LogSink::mutable_update_time() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogSink.update_time)
  return _internal_mutable_update_time();
}
inline void LogSink::set_allocated_update_time(PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogSink.update_time)
}

// .google.protobuf.Timestamp start_time = 10 [deprecated = true];
inline bool LogSink::_internal_has_start_time() const {
  return this != internal_default_instance() && start_time_ != nullptr;
}
inline bool LogSink::has_start_time() const {
  return _internal_has_start_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& LogSink::_internal_start_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = start_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& LogSink::start_time() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogSink.start_time)
  return _internal_start_time();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LogSink::release_start_time() {
  auto temp = unsafe_arena_release_start_time();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LogSink::unsafe_arena_release_start_time() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogSink.start_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LogSink::_internal_mutable_start_time() {
  
  if (start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    start_time_ = p;
  }
  return start_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LogSink::mutable_start_time() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogSink.start_time)
  return _internal_mutable_start_time();
}
inline void LogSink::set_allocated_start_time(PROTOBUF_NAMESPACE_ID::Timestamp* start_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogSink.start_time)
}

// .google.protobuf.Timestamp end_time = 11 [deprecated = true];
inline bool LogSink::_internal_has_end_time() const {
  return this != internal_default_instance() && end_time_ != nullptr;
}
inline bool LogSink::has_end_time() const {
  return _internal_has_end_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& LogSink::_internal_end_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = end_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& LogSink::end_time() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogSink.end_time)
  return _internal_end_time();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LogSink::release_end_time() {
  auto temp = unsafe_arena_release_end_time();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LogSink::unsafe_arena_release_end_time() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogSink.end_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LogSink::_internal_mutable_end_time() {
  
  if (end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    end_time_ = p;
  }
  return end_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LogSink::mutable_end_time() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogSink.end_time)
  return _internal_mutable_end_time();
}
inline void LogSink::set_allocated_end_time(PROTOBUF_NAMESPACE_ID::Timestamp* end_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogSink.end_time)
}

inline bool LogSink::has_options() const {
  return options_case() != OPTIONS_NOT_SET;
}
inline void LogSink::clear_has_options() {
  _oneof_case_[0] = OPTIONS_NOT_SET;
}
inline LogSink::OptionsCase LogSink::options_case() const {
  return LogSink::OptionsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BigQueryOptions

// bool use_partitioned_tables = 1;
inline void BigQueryOptions::clear_use_partitioned_tables() {
  use_partitioned_tables_ = false;
}
inline bool BigQueryOptions::_internal_use_partitioned_tables() const {
  return use_partitioned_tables_;
}
inline bool BigQueryOptions::use_partitioned_tables() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.BigQueryOptions.use_partitioned_tables)
  return _internal_use_partitioned_tables();
}
inline void BigQueryOptions::_internal_set_use_partitioned_tables(bool value) {
  
  use_partitioned_tables_ = value;
}
inline void BigQueryOptions::set_use_partitioned_tables(bool value) {
  _internal_set_use_partitioned_tables(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.BigQueryOptions.use_partitioned_tables)
}

// -------------------------------------------------------------------

// ListSinksRequest

// string parent = 1;
inline void ListSinksRequest::clear_parent() {
  parent_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& ListSinksRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListSinksRequest.parent)
  return _internal_parent();
}
inline void ListSinksRequest::set_parent(const std::string& value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.ListSinksRequest.parent)
}
inline std::string* ListSinksRequest::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListSinksRequest.parent)
  return _internal_mutable_parent();
}
inline const std::string& ListSinksRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListSinksRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void ListSinksRequest::set_parent(std::string&& value) {
  
  parent_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.ListSinksRequest.parent)
}
inline void ListSinksRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.ListSinksRequest.parent)
}
inline void ListSinksRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.ListSinksRequest.parent)
}
inline std::string* ListSinksRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* ListSinksRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.logging.v2.ListSinksRequest.parent)
  
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListSinksRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.ListSinksRequest.parent)
}
inline std::string* ListSinksRequest::unsafe_arena_release_parent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.ListSinksRequest.parent)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return parent_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListSinksRequest::unsafe_arena_set_allocated_parent(
    std::string* parent) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      parent, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.ListSinksRequest.parent)
}

// string page_token = 2;
inline void ListSinksRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& ListSinksRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListSinksRequest.page_token)
  return _internal_page_token();
}
inline void ListSinksRequest::set_page_token(const std::string& value) {
  _internal_set_page_token(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.ListSinksRequest.page_token)
}
inline std::string* ListSinksRequest::mutable_page_token() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListSinksRequest.page_token)
  return _internal_mutable_page_token();
}
inline const std::string& ListSinksRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListSinksRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void ListSinksRequest::set_page_token(std::string&& value) {
  
  page_token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.ListSinksRequest.page_token)
}
inline void ListSinksRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.ListSinksRequest.page_token)
}
inline void ListSinksRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.ListSinksRequest.page_token)
}
inline std::string* ListSinksRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* ListSinksRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.logging.v2.ListSinksRequest.page_token)
  
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListSinksRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.ListSinksRequest.page_token)
}
inline std::string* ListSinksRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.ListSinksRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return page_token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListSinksRequest::unsafe_arena_set_allocated_page_token(
    std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.ListSinksRequest.page_token)
}

// int32 page_size = 3;
inline void ListSinksRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListSinksRequest::_internal_page_size() const {
  return page_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListSinksRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListSinksRequest.page_size)
  return _internal_page_size();
}
inline void ListSinksRequest::_internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_size_ = value;
}
inline void ListSinksRequest::set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.ListSinksRequest.page_size)
}

// -------------------------------------------------------------------

// ListSinksResponse

// repeated .google.logging.v2.LogSink sinks = 1;
inline int ListSinksResponse::_internal_sinks_size() const {
  return sinks_.size();
}
inline int ListSinksResponse::sinks_size() const {
  return _internal_sinks_size();
}
inline void ListSinksResponse::clear_sinks() {
  sinks_.Clear();
}
inline ::google::logging::v2::LogSink* ListSinksResponse::mutable_sinks(int index) {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListSinksResponse.sinks)
  return sinks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::logging::v2::LogSink >*
ListSinksResponse::mutable_sinks() {
  // @@protoc_insertion_point(field_mutable_list:google.logging.v2.ListSinksResponse.sinks)
  return &sinks_;
}
inline const ::google::logging::v2::LogSink& ListSinksResponse::_internal_sinks(int index) const {
  return sinks_.Get(index);
}
inline const ::google::logging::v2::LogSink& ListSinksResponse::sinks(int index) const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListSinksResponse.sinks)
  return _internal_sinks(index);
}
inline ::google::logging::v2::LogSink* ListSinksResponse::_internal_add_sinks() {
  return sinks_.Add();
}
inline ::google::logging::v2::LogSink* ListSinksResponse::add_sinks() {
  // @@protoc_insertion_point(field_add:google.logging.v2.ListSinksResponse.sinks)
  return _internal_add_sinks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::logging::v2::LogSink >&
ListSinksResponse::sinks() const {
  // @@protoc_insertion_point(field_list:google.logging.v2.ListSinksResponse.sinks)
  return sinks_;
}

// string next_page_token = 2;
inline void ListSinksResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& ListSinksResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListSinksResponse.next_page_token)
  return _internal_next_page_token();
}
inline void ListSinksResponse::set_next_page_token(const std::string& value) {
  _internal_set_next_page_token(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.ListSinksResponse.next_page_token)
}
inline std::string* ListSinksResponse::mutable_next_page_token() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListSinksResponse.next_page_token)
  return _internal_mutable_next_page_token();
}
inline const std::string& ListSinksResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListSinksResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void ListSinksResponse::set_next_page_token(std::string&& value) {
  
  next_page_token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.ListSinksResponse.next_page_token)
}
inline void ListSinksResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.ListSinksResponse.next_page_token)
}
inline void ListSinksResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.ListSinksResponse.next_page_token)
}
inline std::string* ListSinksResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* ListSinksResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.logging.v2.ListSinksResponse.next_page_token)
  
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListSinksResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.ListSinksResponse.next_page_token)
}
inline std::string* ListSinksResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.ListSinksResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return next_page_token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListSinksResponse::unsafe_arena_set_allocated_next_page_token(
    std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.ListSinksResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetSinkRequest

// string sink_name = 1;
inline void GetSinkRequest::clear_sink_name() {
  sink_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& GetSinkRequest::sink_name() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.GetSinkRequest.sink_name)
  return _internal_sink_name();
}
inline void GetSinkRequest::set_sink_name(const std::string& value) {
  _internal_set_sink_name(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.GetSinkRequest.sink_name)
}
inline std::string* GetSinkRequest::mutable_sink_name() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.GetSinkRequest.sink_name)
  return _internal_mutable_sink_name();
}
inline const std::string& GetSinkRequest::_internal_sink_name() const {
  return sink_name_.Get();
}
inline void GetSinkRequest::_internal_set_sink_name(const std::string& value) {
  
  sink_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void GetSinkRequest::set_sink_name(std::string&& value) {
  
  sink_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.GetSinkRequest.sink_name)
}
inline void GetSinkRequest::set_sink_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sink_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.GetSinkRequest.sink_name)
}
inline void GetSinkRequest::set_sink_name(const char* value,
    size_t size) {
  
  sink_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.GetSinkRequest.sink_name)
}
inline std::string* GetSinkRequest::_internal_mutable_sink_name() {
  
  return sink_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* GetSinkRequest::release_sink_name() {
  // @@protoc_insertion_point(field_release:google.logging.v2.GetSinkRequest.sink_name)
  
  return sink_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void GetSinkRequest::set_allocated_sink_name(std::string* sink_name) {
  if (sink_name != nullptr) {
    
  } else {
    
  }
  sink_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sink_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.GetSinkRequest.sink_name)
}
inline std::string* GetSinkRequest::unsafe_arena_release_sink_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.GetSinkRequest.sink_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return sink_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetSinkRequest::unsafe_arena_set_allocated_sink_name(
    std::string* sink_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (sink_name != nullptr) {
    
  } else {
    
  }
  sink_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sink_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.GetSinkRequest.sink_name)
}

// -------------------------------------------------------------------

// CreateSinkRequest

// string parent = 1;
inline void CreateSinkRequest::clear_parent() {
  parent_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& CreateSinkRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.CreateSinkRequest.parent)
  return _internal_parent();
}
inline void CreateSinkRequest::set_parent(const std::string& value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.CreateSinkRequest.parent)
}
inline std::string* CreateSinkRequest::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.CreateSinkRequest.parent)
  return _internal_mutable_parent();
}
inline const std::string& CreateSinkRequest::_internal_parent() const {
  return parent_.Get();
}
inline void CreateSinkRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void CreateSinkRequest::set_parent(std::string&& value) {
  
  parent_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.CreateSinkRequest.parent)
}
inline void CreateSinkRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.CreateSinkRequest.parent)
}
inline void CreateSinkRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.CreateSinkRequest.parent)
}
inline std::string* CreateSinkRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* CreateSinkRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.logging.v2.CreateSinkRequest.parent)
  
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void CreateSinkRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.CreateSinkRequest.parent)
}
inline std::string* CreateSinkRequest::unsafe_arena_release_parent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.CreateSinkRequest.parent)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return parent_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CreateSinkRequest::unsafe_arena_set_allocated_parent(
    std::string* parent) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      parent, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.CreateSinkRequest.parent)
}

// .google.logging.v2.LogSink sink = 2;
inline bool CreateSinkRequest::_internal_has_sink() const {
  return this != internal_default_instance() && sink_ != nullptr;
}
inline bool CreateSinkRequest::has_sink() const {
  return _internal_has_sink();
}
inline void CreateSinkRequest::clear_sink() {
  if (GetArenaNoVirtual() == nullptr && sink_ != nullptr) {
    delete sink_;
  }
  sink_ = nullptr;
}
inline const ::google::logging::v2::LogSink& CreateSinkRequest::_internal_sink() const {
  const ::google::logging::v2::LogSink* p = sink_;
  return p != nullptr ? *p : *reinterpret_cast<const ::google::logging::v2::LogSink*>(
      &::google::logging::v2::_LogSink_default_instance_);
}
inline const ::google::logging::v2::LogSink& CreateSinkRequest::sink() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.CreateSinkRequest.sink)
  return _internal_sink();
}
inline ::google::logging::v2::LogSink* CreateSinkRequest::release_sink() {
  auto temp = unsafe_arena_release_sink();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::logging::v2::LogSink* CreateSinkRequest::unsafe_arena_release_sink() {
  // @@protoc_insertion_point(field_release:google.logging.v2.CreateSinkRequest.sink)
  
  ::google::logging::v2::LogSink* temp = sink_;
  sink_ = nullptr;
  return temp;
}
inline ::google::logging::v2::LogSink* CreateSinkRequest::_internal_mutable_sink() {
  
  if (sink_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::logging::v2::LogSink>(GetArenaNoVirtual());
    sink_ = p;
  }
  return sink_;
}
inline ::google::logging::v2::LogSink* CreateSinkRequest::mutable_sink() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.CreateSinkRequest.sink)
  return _internal_mutable_sink();
}
inline void CreateSinkRequest::set_allocated_sink(::google::logging::v2::LogSink* sink) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sink_;
  }
  if (sink) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sink);
    if (message_arena != submessage_arena) {
      sink = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sink, submessage_arena);
    }
    
  } else {
    
  }
  sink_ = sink;
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.CreateSinkRequest.sink)
}

// bool unique_writer_identity = 3;
inline void CreateSinkRequest::clear_unique_writer_identity() {
  unique_writer_identity_ = false;
}
inline bool CreateSinkRequest::_internal_unique_writer_identity() const {
  return unique_writer_identity_;
}
inline bool CreateSinkRequest::unique_writer_identity() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.CreateSinkRequest.unique_writer_identity)
  return _internal_unique_writer_identity();
}
inline void CreateSinkRequest::_internal_set_unique_writer_identity(bool value) {
  
  unique_writer_identity_ = value;
}
inline void CreateSinkRequest::set_unique_writer_identity(bool value) {
  _internal_set_unique_writer_identity(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.CreateSinkRequest.unique_writer_identity)
}

// -------------------------------------------------------------------

// UpdateSinkRequest

// string sink_name = 1;
inline void UpdateSinkRequest::clear_sink_name() {
  sink_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& UpdateSinkRequest::sink_name() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.UpdateSinkRequest.sink_name)
  return _internal_sink_name();
}
inline void UpdateSinkRequest::set_sink_name(const std::string& value) {
  _internal_set_sink_name(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.UpdateSinkRequest.sink_name)
}
inline std::string* UpdateSinkRequest::mutable_sink_name() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.UpdateSinkRequest.sink_name)
  return _internal_mutable_sink_name();
}
inline const std::string& UpdateSinkRequest::_internal_sink_name() const {
  return sink_name_.Get();
}
inline void UpdateSinkRequest::_internal_set_sink_name(const std::string& value) {
  
  sink_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void UpdateSinkRequest::set_sink_name(std::string&& value) {
  
  sink_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.UpdateSinkRequest.sink_name)
}
inline void UpdateSinkRequest::set_sink_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sink_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.UpdateSinkRequest.sink_name)
}
inline void UpdateSinkRequest::set_sink_name(const char* value,
    size_t size) {
  
  sink_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.UpdateSinkRequest.sink_name)
}
inline std::string* UpdateSinkRequest::_internal_mutable_sink_name() {
  
  return sink_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* UpdateSinkRequest::release_sink_name() {
  // @@protoc_insertion_point(field_release:google.logging.v2.UpdateSinkRequest.sink_name)
  
  return sink_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UpdateSinkRequest::set_allocated_sink_name(std::string* sink_name) {
  if (sink_name != nullptr) {
    
  } else {
    
  }
  sink_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sink_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.UpdateSinkRequest.sink_name)
}
inline std::string* UpdateSinkRequest::unsafe_arena_release_sink_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.UpdateSinkRequest.sink_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return sink_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UpdateSinkRequest::unsafe_arena_set_allocated_sink_name(
    std::string* sink_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (sink_name != nullptr) {
    
  } else {
    
  }
  sink_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sink_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.UpdateSinkRequest.sink_name)
}

// .google.logging.v2.LogSink sink = 2;
inline bool UpdateSinkRequest::_internal_has_sink() const {
  return this != internal_default_instance() && sink_ != nullptr;
}
inline bool UpdateSinkRequest::has_sink() const {
  return _internal_has_sink();
}
inline void UpdateSinkRequest::clear_sink() {
  if (GetArenaNoVirtual() == nullptr && sink_ != nullptr) {
    delete sink_;
  }
  sink_ = nullptr;
}
inline const ::google::logging::v2::LogSink& UpdateSinkRequest::_internal_sink() const {
  const ::google::logging::v2::LogSink* p = sink_;
  return p != nullptr ? *p : *reinterpret_cast<const ::google::logging::v2::LogSink*>(
      &::google::logging::v2::_LogSink_default_instance_);
}
inline const ::google::logging::v2::LogSink& UpdateSinkRequest::sink() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.UpdateSinkRequest.sink)
  return _internal_sink();
}
inline ::google::logging::v2::LogSink* UpdateSinkRequest::release_sink() {
  auto temp = unsafe_arena_release_sink();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::logging::v2::LogSink* UpdateSinkRequest::unsafe_arena_release_sink() {
  // @@protoc_insertion_point(field_release:google.logging.v2.UpdateSinkRequest.sink)
  
  ::google::logging::v2::LogSink* temp = sink_;
  sink_ = nullptr;
  return temp;
}
inline ::google::logging::v2::LogSink* UpdateSinkRequest::_internal_mutable_sink() {
  
  if (sink_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::logging::v2::LogSink>(GetArenaNoVirtual());
    sink_ = p;
  }
  return sink_;
}
inline ::google::logging::v2::LogSink* UpdateSinkRequest::mutable_sink() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.UpdateSinkRequest.sink)
  return _internal_mutable_sink();
}
inline void UpdateSinkRequest::set_allocated_sink(::google::logging::v2::LogSink* sink) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sink_;
  }
  if (sink) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sink);
    if (message_arena != submessage_arena) {
      sink = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sink, submessage_arena);
    }
    
  } else {
    
  }
  sink_ = sink;
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.UpdateSinkRequest.sink)
}

// bool unique_writer_identity = 3;
inline void UpdateSinkRequest::clear_unique_writer_identity() {
  unique_writer_identity_ = false;
}
inline bool UpdateSinkRequest::_internal_unique_writer_identity() const {
  return unique_writer_identity_;
}
inline bool UpdateSinkRequest::unique_writer_identity() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.UpdateSinkRequest.unique_writer_identity)
  return _internal_unique_writer_identity();
}
inline void UpdateSinkRequest::_internal_set_unique_writer_identity(bool value) {
  
  unique_writer_identity_ = value;
}
inline void UpdateSinkRequest::set_unique_writer_identity(bool value) {
  _internal_set_unique_writer_identity(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.UpdateSinkRequest.unique_writer_identity)
}

// .google.protobuf.FieldMask update_mask = 4;
inline bool UpdateSinkRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateSinkRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& UpdateSinkRequest::_internal_update_mask() const {
  const PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FieldMask*>(
      &PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& UpdateSinkRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.UpdateSinkRequest.update_mask)
  return _internal_update_mask();
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateSinkRequest::release_update_mask() {
  auto temp = unsafe_arena_release_update_mask();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateSinkRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.logging.v2.UpdateSinkRequest.update_mask)
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateSinkRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaNoVirtual());
    update_mask_ = p;
  }
  return update_mask_;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateSinkRequest::mutable_update_mask() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.UpdateSinkRequest.update_mask)
  return _internal_mutable_update_mask();
}
inline void UpdateSinkRequest::set_allocated_update_mask(PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask)->GetArena();
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.UpdateSinkRequest.update_mask)
}

// -------------------------------------------------------------------

// DeleteSinkRequest

// string sink_name = 1;
inline void DeleteSinkRequest::clear_sink_name() {
  sink_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& DeleteSinkRequest::sink_name() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.DeleteSinkRequest.sink_name)
  return _internal_sink_name();
}
inline void DeleteSinkRequest::set_sink_name(const std::string& value) {
  _internal_set_sink_name(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.DeleteSinkRequest.sink_name)
}
inline std::string* DeleteSinkRequest::mutable_sink_name() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.DeleteSinkRequest.sink_name)
  return _internal_mutable_sink_name();
}
inline const std::string& DeleteSinkRequest::_internal_sink_name() const {
  return sink_name_.Get();
}
inline void DeleteSinkRequest::_internal_set_sink_name(const std::string& value) {
  
  sink_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void DeleteSinkRequest::set_sink_name(std::string&& value) {
  
  sink_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.DeleteSinkRequest.sink_name)
}
inline void DeleteSinkRequest::set_sink_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sink_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.DeleteSinkRequest.sink_name)
}
inline void DeleteSinkRequest::set_sink_name(const char* value,
    size_t size) {
  
  sink_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.DeleteSinkRequest.sink_name)
}
inline std::string* DeleteSinkRequest::_internal_mutable_sink_name() {
  
  return sink_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* DeleteSinkRequest::release_sink_name() {
  // @@protoc_insertion_point(field_release:google.logging.v2.DeleteSinkRequest.sink_name)
  
  return sink_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void DeleteSinkRequest::set_allocated_sink_name(std::string* sink_name) {
  if (sink_name != nullptr) {
    
  } else {
    
  }
  sink_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sink_name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.DeleteSinkRequest.sink_name)
}
inline std::string* DeleteSinkRequest::unsafe_arena_release_sink_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.DeleteSinkRequest.sink_name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return sink_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DeleteSinkRequest::unsafe_arena_set_allocated_sink_name(
    std::string* sink_name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (sink_name != nullptr) {
    
  } else {
    
  }
  sink_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sink_name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.DeleteSinkRequest.sink_name)
}

// -------------------------------------------------------------------

// LogExclusion

// string name = 1;
inline void LogExclusion::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& LogExclusion::name() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogExclusion.name)
  return _internal_name();
}
inline void LogExclusion::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.LogExclusion.name)
}
inline std::string* LogExclusion::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogExclusion.name)
  return _internal_mutable_name();
}
inline const std::string& LogExclusion::_internal_name() const {
  return name_.Get();
}
inline void LogExclusion::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void LogExclusion::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.LogExclusion.name)
}
inline void LogExclusion::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogExclusion.name)
}
inline void LogExclusion::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogExclusion.name)
}
inline std::string* LogExclusion::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* LogExclusion::release_name() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogExclusion.name)
  
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void LogExclusion::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogExclusion.name)
}
inline std::string* LogExclusion::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogExclusion.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LogExclusion::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogExclusion.name)
}

// string description = 2;
inline void LogExclusion::clear_description() {
  description_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& LogExclusion::description() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogExclusion.description)
  return _internal_description();
}
inline void LogExclusion::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.LogExclusion.description)
}
inline std::string* LogExclusion::mutable_description() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogExclusion.description)
  return _internal_mutable_description();
}
inline const std::string& LogExclusion::_internal_description() const {
  return description_.Get();
}
inline void LogExclusion::_internal_set_description(const std::string& value) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void LogExclusion::set_description(std::string&& value) {
  
  description_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.LogExclusion.description)
}
inline void LogExclusion::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogExclusion.description)
}
inline void LogExclusion::set_description(const char* value,
    size_t size) {
  
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogExclusion.description)
}
inline std::string* LogExclusion::_internal_mutable_description() {
  
  return description_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* LogExclusion::release_description() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogExclusion.description)
  
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void LogExclusion::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogExclusion.description)
}
inline std::string* LogExclusion::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogExclusion.description)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return description_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LogExclusion::unsafe_arena_set_allocated_description(
    std::string* description) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (description != nullptr) {
    
  } else {
    
  }
  description_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      description, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogExclusion.description)
}

// string filter = 3;
inline void LogExclusion::clear_filter() {
  filter_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& LogExclusion::filter() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogExclusion.filter)
  return _internal_filter();
}
inline void LogExclusion::set_filter(const std::string& value) {
  _internal_set_filter(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.LogExclusion.filter)
}
inline std::string* LogExclusion::mutable_filter() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogExclusion.filter)
  return _internal_mutable_filter();
}
inline const std::string& LogExclusion::_internal_filter() const {
  return filter_.Get();
}
inline void LogExclusion::_internal_set_filter(const std::string& value) {
  
  filter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void LogExclusion::set_filter(std::string&& value) {
  
  filter_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.LogExclusion.filter)
}
inline void LogExclusion::set_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.LogExclusion.filter)
}
inline void LogExclusion::set_filter(const char* value,
    size_t size) {
  
  filter_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.LogExclusion.filter)
}
inline std::string* LogExclusion::_internal_mutable_filter() {
  
  return filter_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* LogExclusion::release_filter() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogExclusion.filter)
  
  return filter_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void LogExclusion::set_allocated_filter(std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filter,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogExclusion.filter)
}
inline std::string* LogExclusion::unsafe_arena_release_filter() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.LogExclusion.filter)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return filter_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void LogExclusion::unsafe_arena_set_allocated_filter(
    std::string* filter) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      filter, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.LogExclusion.filter)
}

// bool disabled = 4;
inline void LogExclusion::clear_disabled() {
  disabled_ = false;
}
inline bool LogExclusion::_internal_disabled() const {
  return disabled_;
}
inline bool LogExclusion::disabled() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogExclusion.disabled)
  return _internal_disabled();
}
inline void LogExclusion::_internal_set_disabled(bool value) {
  
  disabled_ = value;
}
inline void LogExclusion::set_disabled(bool value) {
  _internal_set_disabled(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.LogExclusion.disabled)
}

// .google.protobuf.Timestamp create_time = 5;
inline bool LogExclusion::_internal_has_create_time() const {
  return this != internal_default_instance() && create_time_ != nullptr;
}
inline bool LogExclusion::has_create_time() const {
  return _internal_has_create_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& LogExclusion::_internal_create_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = create_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& LogExclusion::create_time() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogExclusion.create_time)
  return _internal_create_time();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LogExclusion::release_create_time() {
  auto temp = unsafe_arena_release_create_time();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LogExclusion::unsafe_arena_release_create_time() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogExclusion.create_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = create_time_;
  create_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LogExclusion::_internal_mutable_create_time() {
  
  if (create_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    create_time_ = p;
  }
  return create_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LogExclusion::mutable_create_time() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogExclusion.create_time)
  return _internal_mutable_create_time();
}
inline void LogExclusion::set_allocated_create_time(PROTOBUF_NAMESPACE_ID::Timestamp* create_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time_);
  }
  if (create_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(create_time)->GetArena();
    if (message_arena != submessage_arena) {
      create_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_time, submessage_arena);
    }
    
  } else {
    
  }
  create_time_ = create_time;
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogExclusion.create_time)
}

// .google.protobuf.Timestamp update_time = 6;
inline bool LogExclusion::_internal_has_update_time() const {
  return this != internal_default_instance() && update_time_ != nullptr;
}
inline bool LogExclusion::has_update_time() const {
  return _internal_has_update_time();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& LogExclusion::_internal_update_time() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = update_time_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp*>(
      &PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& LogExclusion::update_time() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.LogExclusion.update_time)
  return _internal_update_time();
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LogExclusion::release_update_time() {
  auto temp = unsafe_arena_release_update_time();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LogExclusion::unsafe_arena_release_update_time() {
  // @@protoc_insertion_point(field_release:google.logging.v2.LogExclusion.update_time)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = update_time_;
  update_time_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LogExclusion::_internal_mutable_update_time() {
  
  if (update_time_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaNoVirtual());
    update_time_ = p;
  }
  return update_time_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* LogExclusion::mutable_update_time() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.LogExclusion.update_time)
  return _internal_mutable_update_time();
}
inline void LogExclusion::set_allocated_update_time(PROTOBUF_NAMESPACE_ID::Timestamp* update_time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time_);
  }
  if (update_time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_time)->GetArena();
    if (message_arena != submessage_arena) {
      update_time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_time, submessage_arena);
    }
    
  } else {
    
  }
  update_time_ = update_time;
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.LogExclusion.update_time)
}

// -------------------------------------------------------------------

// ListExclusionsRequest

// string parent = 1;
inline void ListExclusionsRequest::clear_parent() {
  parent_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& ListExclusionsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListExclusionsRequest.parent)
  return _internal_parent();
}
inline void ListExclusionsRequest::set_parent(const std::string& value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.ListExclusionsRequest.parent)
}
inline std::string* ListExclusionsRequest::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListExclusionsRequest.parent)
  return _internal_mutable_parent();
}
inline const std::string& ListExclusionsRequest::_internal_parent() const {
  return parent_.Get();
}
inline void ListExclusionsRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void ListExclusionsRequest::set_parent(std::string&& value) {
  
  parent_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.ListExclusionsRequest.parent)
}
inline void ListExclusionsRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.ListExclusionsRequest.parent)
}
inline void ListExclusionsRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.ListExclusionsRequest.parent)
}
inline std::string* ListExclusionsRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* ListExclusionsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.logging.v2.ListExclusionsRequest.parent)
  
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListExclusionsRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.ListExclusionsRequest.parent)
}
inline std::string* ListExclusionsRequest::unsafe_arena_release_parent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.ListExclusionsRequest.parent)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return parent_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListExclusionsRequest::unsafe_arena_set_allocated_parent(
    std::string* parent) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      parent, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.ListExclusionsRequest.parent)
}

// string page_token = 2;
inline void ListExclusionsRequest::clear_page_token() {
  page_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& ListExclusionsRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListExclusionsRequest.page_token)
  return _internal_page_token();
}
inline void ListExclusionsRequest::set_page_token(const std::string& value) {
  _internal_set_page_token(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.ListExclusionsRequest.page_token)
}
inline std::string* ListExclusionsRequest::mutable_page_token() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListExclusionsRequest.page_token)
  return _internal_mutable_page_token();
}
inline const std::string& ListExclusionsRequest::_internal_page_token() const {
  return page_token_.Get();
}
inline void ListExclusionsRequest::_internal_set_page_token(const std::string& value) {
  
  page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void ListExclusionsRequest::set_page_token(std::string&& value) {
  
  page_token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.ListExclusionsRequest.page_token)
}
inline void ListExclusionsRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.ListExclusionsRequest.page_token)
}
inline void ListExclusionsRequest::set_page_token(const char* value,
    size_t size) {
  
  page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.ListExclusionsRequest.page_token)
}
inline std::string* ListExclusionsRequest::_internal_mutable_page_token() {
  
  return page_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* ListExclusionsRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.logging.v2.ListExclusionsRequest.page_token)
  
  return page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListExclusionsRequest::set_allocated_page_token(std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.ListExclusionsRequest.page_token)
}
inline std::string* ListExclusionsRequest::unsafe_arena_release_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.ListExclusionsRequest.page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return page_token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListExclusionsRequest::unsafe_arena_set_allocated_page_token(
    std::string* page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.ListExclusionsRequest.page_token)
}

// int32 page_size = 3;
inline void ListExclusionsRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListExclusionsRequest::_internal_page_size() const {
  return page_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ListExclusionsRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListExclusionsRequest.page_size)
  return _internal_page_size();
}
inline void ListExclusionsRequest::_internal_set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_size_ = value;
}
inline void ListExclusionsRequest::set_page_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.ListExclusionsRequest.page_size)
}

// -------------------------------------------------------------------

// ListExclusionsResponse

// repeated .google.logging.v2.LogExclusion exclusions = 1;
inline int ListExclusionsResponse::_internal_exclusions_size() const {
  return exclusions_.size();
}
inline int ListExclusionsResponse::exclusions_size() const {
  return _internal_exclusions_size();
}
inline void ListExclusionsResponse::clear_exclusions() {
  exclusions_.Clear();
}
inline ::google::logging::v2::LogExclusion* ListExclusionsResponse::mutable_exclusions(int index) {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListExclusionsResponse.exclusions)
  return exclusions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::logging::v2::LogExclusion >*
ListExclusionsResponse::mutable_exclusions() {
  // @@protoc_insertion_point(field_mutable_list:google.logging.v2.ListExclusionsResponse.exclusions)
  return &exclusions_;
}
inline const ::google::logging::v2::LogExclusion& ListExclusionsResponse::_internal_exclusions(int index) const {
  return exclusions_.Get(index);
}
inline const ::google::logging::v2::LogExclusion& ListExclusionsResponse::exclusions(int index) const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListExclusionsResponse.exclusions)
  return _internal_exclusions(index);
}
inline ::google::logging::v2::LogExclusion* ListExclusionsResponse::_internal_add_exclusions() {
  return exclusions_.Add();
}
inline ::google::logging::v2::LogExclusion* ListExclusionsResponse::add_exclusions() {
  // @@protoc_insertion_point(field_add:google.logging.v2.ListExclusionsResponse.exclusions)
  return _internal_add_exclusions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::logging::v2::LogExclusion >&
ListExclusionsResponse::exclusions() const {
  // @@protoc_insertion_point(field_list:google.logging.v2.ListExclusionsResponse.exclusions)
  return exclusions_;
}

// string next_page_token = 2;
inline void ListExclusionsResponse::clear_next_page_token() {
  next_page_token_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& ListExclusionsResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.ListExclusionsResponse.next_page_token)
  return _internal_next_page_token();
}
inline void ListExclusionsResponse::set_next_page_token(const std::string& value) {
  _internal_set_next_page_token(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.ListExclusionsResponse.next_page_token)
}
inline std::string* ListExclusionsResponse::mutable_next_page_token() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.ListExclusionsResponse.next_page_token)
  return _internal_mutable_next_page_token();
}
inline const std::string& ListExclusionsResponse::_internal_next_page_token() const {
  return next_page_token_.Get();
}
inline void ListExclusionsResponse::_internal_set_next_page_token(const std::string& value) {
  
  next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void ListExclusionsResponse::set_next_page_token(std::string&& value) {
  
  next_page_token_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.ListExclusionsResponse.next_page_token)
}
inline void ListExclusionsResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.ListExclusionsResponse.next_page_token)
}
inline void ListExclusionsResponse::set_next_page_token(const char* value,
    size_t size) {
  
  next_page_token_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.ListExclusionsResponse.next_page_token)
}
inline std::string* ListExclusionsResponse::_internal_mutable_next_page_token() {
  
  return next_page_token_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* ListExclusionsResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.logging.v2.ListExclusionsResponse.next_page_token)
  
  return next_page_token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void ListExclusionsResponse::set_allocated_next_page_token(std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), next_page_token,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.ListExclusionsResponse.next_page_token)
}
inline std::string* ListExclusionsResponse::unsafe_arena_release_next_page_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.ListExclusionsResponse.next_page_token)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return next_page_token_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void ListExclusionsResponse::unsafe_arena_set_allocated_next_page_token(
    std::string* next_page_token) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      next_page_token, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.ListExclusionsResponse.next_page_token)
}

// -------------------------------------------------------------------

// GetExclusionRequest

// string name = 1;
inline void GetExclusionRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& GetExclusionRequest::name() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.GetExclusionRequest.name)
  return _internal_name();
}
inline void GetExclusionRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.GetExclusionRequest.name)
}
inline std::string* GetExclusionRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.GetExclusionRequest.name)
  return _internal_mutable_name();
}
inline const std::string& GetExclusionRequest::_internal_name() const {
  return name_.Get();
}
inline void GetExclusionRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void GetExclusionRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.GetExclusionRequest.name)
}
inline void GetExclusionRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.GetExclusionRequest.name)
}
inline void GetExclusionRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.GetExclusionRequest.name)
}
inline std::string* GetExclusionRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* GetExclusionRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.logging.v2.GetExclusionRequest.name)
  
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void GetExclusionRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.GetExclusionRequest.name)
}
inline std::string* GetExclusionRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.GetExclusionRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void GetExclusionRequest::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.GetExclusionRequest.name)
}

// -------------------------------------------------------------------

// CreateExclusionRequest

// string parent = 1;
inline void CreateExclusionRequest::clear_parent() {
  parent_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& CreateExclusionRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.CreateExclusionRequest.parent)
  return _internal_parent();
}
inline void CreateExclusionRequest::set_parent(const std::string& value) {
  _internal_set_parent(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.CreateExclusionRequest.parent)
}
inline std::string* CreateExclusionRequest::mutable_parent() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.CreateExclusionRequest.parent)
  return _internal_mutable_parent();
}
inline const std::string& CreateExclusionRequest::_internal_parent() const {
  return parent_.Get();
}
inline void CreateExclusionRequest::_internal_set_parent(const std::string& value) {
  
  parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void CreateExclusionRequest::set_parent(std::string&& value) {
  
  parent_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.CreateExclusionRequest.parent)
}
inline void CreateExclusionRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.CreateExclusionRequest.parent)
}
inline void CreateExclusionRequest::set_parent(const char* value,
    size_t size) {
  
  parent_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.CreateExclusionRequest.parent)
}
inline std::string* CreateExclusionRequest::_internal_mutable_parent() {
  
  return parent_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* CreateExclusionRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.logging.v2.CreateExclusionRequest.parent)
  
  return parent_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void CreateExclusionRequest::set_allocated_parent(std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parent,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.CreateExclusionRequest.parent)
}
inline std::string* CreateExclusionRequest::unsafe_arena_release_parent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.CreateExclusionRequest.parent)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return parent_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void CreateExclusionRequest::unsafe_arena_set_allocated_parent(
    std::string* parent) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      parent, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.CreateExclusionRequest.parent)
}

// .google.logging.v2.LogExclusion exclusion = 2;
inline bool CreateExclusionRequest::_internal_has_exclusion() const {
  return this != internal_default_instance() && exclusion_ != nullptr;
}
inline bool CreateExclusionRequest::has_exclusion() const {
  return _internal_has_exclusion();
}
inline void CreateExclusionRequest::clear_exclusion() {
  if (GetArenaNoVirtual() == nullptr && exclusion_ != nullptr) {
    delete exclusion_;
  }
  exclusion_ = nullptr;
}
inline const ::google::logging::v2::LogExclusion& CreateExclusionRequest::_internal_exclusion() const {
  const ::google::logging::v2::LogExclusion* p = exclusion_;
  return p != nullptr ? *p : *reinterpret_cast<const ::google::logging::v2::LogExclusion*>(
      &::google::logging::v2::_LogExclusion_default_instance_);
}
inline const ::google::logging::v2::LogExclusion& CreateExclusionRequest::exclusion() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.CreateExclusionRequest.exclusion)
  return _internal_exclusion();
}
inline ::google::logging::v2::LogExclusion* CreateExclusionRequest::release_exclusion() {
  auto temp = unsafe_arena_release_exclusion();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::logging::v2::LogExclusion* CreateExclusionRequest::unsafe_arena_release_exclusion() {
  // @@protoc_insertion_point(field_release:google.logging.v2.CreateExclusionRequest.exclusion)
  
  ::google::logging::v2::LogExclusion* temp = exclusion_;
  exclusion_ = nullptr;
  return temp;
}
inline ::google::logging::v2::LogExclusion* CreateExclusionRequest::_internal_mutable_exclusion() {
  
  if (exclusion_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::logging::v2::LogExclusion>(GetArenaNoVirtual());
    exclusion_ = p;
  }
  return exclusion_;
}
inline ::google::logging::v2::LogExclusion* CreateExclusionRequest::mutable_exclusion() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.CreateExclusionRequest.exclusion)
  return _internal_mutable_exclusion();
}
inline void CreateExclusionRequest::set_allocated_exclusion(::google::logging::v2::LogExclusion* exclusion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete exclusion_;
  }
  if (exclusion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(exclusion);
    if (message_arena != submessage_arena) {
      exclusion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exclusion, submessage_arena);
    }
    
  } else {
    
  }
  exclusion_ = exclusion;
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.CreateExclusionRequest.exclusion)
}

// -------------------------------------------------------------------

// UpdateExclusionRequest

// string name = 1;
inline void UpdateExclusionRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& UpdateExclusionRequest::name() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.UpdateExclusionRequest.name)
  return _internal_name();
}
inline void UpdateExclusionRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.UpdateExclusionRequest.name)
}
inline std::string* UpdateExclusionRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.UpdateExclusionRequest.name)
  return _internal_mutable_name();
}
inline const std::string& UpdateExclusionRequest::_internal_name() const {
  return name_.Get();
}
inline void UpdateExclusionRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void UpdateExclusionRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.UpdateExclusionRequest.name)
}
inline void UpdateExclusionRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.UpdateExclusionRequest.name)
}
inline void UpdateExclusionRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.UpdateExclusionRequest.name)
}
inline std::string* UpdateExclusionRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* UpdateExclusionRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.logging.v2.UpdateExclusionRequest.name)
  
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void UpdateExclusionRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.UpdateExclusionRequest.name)
}
inline std::string* UpdateExclusionRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.UpdateExclusionRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void UpdateExclusionRequest::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.UpdateExclusionRequest.name)
}

// .google.logging.v2.LogExclusion exclusion = 2;
inline bool UpdateExclusionRequest::_internal_has_exclusion() const {
  return this != internal_default_instance() && exclusion_ != nullptr;
}
inline bool UpdateExclusionRequest::has_exclusion() const {
  return _internal_has_exclusion();
}
inline void UpdateExclusionRequest::clear_exclusion() {
  if (GetArenaNoVirtual() == nullptr && exclusion_ != nullptr) {
    delete exclusion_;
  }
  exclusion_ = nullptr;
}
inline const ::google::logging::v2::LogExclusion& UpdateExclusionRequest::_internal_exclusion() const {
  const ::google::logging::v2::LogExclusion* p = exclusion_;
  return p != nullptr ? *p : *reinterpret_cast<const ::google::logging::v2::LogExclusion*>(
      &::google::logging::v2::_LogExclusion_default_instance_);
}
inline const ::google::logging::v2::LogExclusion& UpdateExclusionRequest::exclusion() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.UpdateExclusionRequest.exclusion)
  return _internal_exclusion();
}
inline ::google::logging::v2::LogExclusion* UpdateExclusionRequest::release_exclusion() {
  auto temp = unsafe_arena_release_exclusion();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::google::logging::v2::LogExclusion* UpdateExclusionRequest::unsafe_arena_release_exclusion() {
  // @@protoc_insertion_point(field_release:google.logging.v2.UpdateExclusionRequest.exclusion)
  
  ::google::logging::v2::LogExclusion* temp = exclusion_;
  exclusion_ = nullptr;
  return temp;
}
inline ::google::logging::v2::LogExclusion* UpdateExclusionRequest::_internal_mutable_exclusion() {
  
  if (exclusion_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::logging::v2::LogExclusion>(GetArenaNoVirtual());
    exclusion_ = p;
  }
  return exclusion_;
}
inline ::google::logging::v2::LogExclusion* UpdateExclusionRequest::mutable_exclusion() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.UpdateExclusionRequest.exclusion)
  return _internal_mutable_exclusion();
}
inline void UpdateExclusionRequest::set_allocated_exclusion(::google::logging::v2::LogExclusion* exclusion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete exclusion_;
  }
  if (exclusion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(exclusion);
    if (message_arena != submessage_arena) {
      exclusion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, exclusion, submessage_arena);
    }
    
  } else {
    
  }
  exclusion_ = exclusion;
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.UpdateExclusionRequest.exclusion)
}

// .google.protobuf.FieldMask update_mask = 3;
inline bool UpdateExclusionRequest::_internal_has_update_mask() const {
  return this != internal_default_instance() && update_mask_ != nullptr;
}
inline bool UpdateExclusionRequest::has_update_mask() const {
  return _internal_has_update_mask();
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& UpdateExclusionRequest::_internal_update_mask() const {
  const PROTOBUF_NAMESPACE_ID::FieldMask* p = update_mask_;
  return p != nullptr ? *p : *reinterpret_cast<const PROTOBUF_NAMESPACE_ID::FieldMask*>(
      &PROTOBUF_NAMESPACE_ID::_FieldMask_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::FieldMask& UpdateExclusionRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.UpdateExclusionRequest.update_mask)
  return _internal_update_mask();
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateExclusionRequest::release_update_mask() {
  auto temp = unsafe_arena_release_update_mask();
  if (GetArenaNoVirtual() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateExclusionRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:google.logging.v2.UpdateExclusionRequest.update_mask)
  
  PROTOBUF_NAMESPACE_ID::FieldMask* temp = update_mask_;
  update_mask_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateExclusionRequest::_internal_mutable_update_mask() {
  
  if (update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::FieldMask>(GetArenaNoVirtual());
    update_mask_ = p;
  }
  return update_mask_;
}
inline PROTOBUF_NAMESPACE_ID::FieldMask* UpdateExclusionRequest::mutable_update_mask() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.UpdateExclusionRequest.update_mask)
  return _internal_mutable_update_mask();
}
inline void UpdateExclusionRequest::set_allocated_update_mask(PROTOBUF_NAMESPACE_ID::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask)->GetArena();
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    
  } else {
    
  }
  update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.UpdateExclusionRequest.update_mask)
}

// -------------------------------------------------------------------

// DeleteExclusionRequest

// string name = 1;
inline void DeleteExclusionRequest::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline const std::string& DeleteExclusionRequest::name() const {
  // @@protoc_insertion_point(field_get:google.logging.v2.DeleteExclusionRequest.name)
  return _internal_name();
}
inline void DeleteExclusionRequest::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:google.logging.v2.DeleteExclusionRequest.name)
}
inline std::string* DeleteExclusionRequest::mutable_name() {
  // @@protoc_insertion_point(field_mutable:google.logging.v2.DeleteExclusionRequest.name)
  return _internal_mutable_name();
}
inline const std::string& DeleteExclusionRequest::_internal_name() const {
  return name_.Get();
}
inline void DeleteExclusionRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArenaNoVirtual());
}
inline void DeleteExclusionRequest::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_rvalue:google.logging.v2.DeleteExclusionRequest.name)
}
inline void DeleteExclusionRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_char:google.logging.v2.DeleteExclusionRequest.name)
}
inline void DeleteExclusionRequest::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_pointer:google.logging.v2.DeleteExclusionRequest.name)
}
inline std::string* DeleteExclusionRequest::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline std::string* DeleteExclusionRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.logging.v2.DeleteExclusionRequest.name)
  
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaNoVirtual());
}
inline void DeleteExclusionRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaNoVirtual());
  // @@protoc_insertion_point(field_set_allocated:google.logging.v2.DeleteExclusionRequest.name)
}
inline std::string* DeleteExclusionRequest::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:google.logging.v2.DeleteExclusionRequest.name)
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArenaNoVirtual());
}
inline void DeleteExclusionRequest::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArenaNoVirtual() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArenaNoVirtual());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.logging.v2.DeleteExclusionRequest.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace logging
}  // namespace google

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::google::logging::v2::LogSink_VersionFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::logging::v2::LogSink_VersionFormat>() {
  return ::google::logging::v2::LogSink_VersionFormat_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_google_2flogging_2fv2_2flogging_5fconfig_2eproto
